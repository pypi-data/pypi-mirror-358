"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2
import google.protobuf.empty_pb2
import grpc

class AnisotropicBsdfServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    Load: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.FileName,
        google.protobuf.empty_pb2.Empty] = ...
    """serialization for native *.anisotropicbsdf files"""

    Save: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.FileName,
        google.protobuf.empty_pb2.Empty] = ...

    Import: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.AnisotropicBsdfData,
        google.protobuf.empty_pb2.Empty] = ...
    """to and from AnisoptropicSpeosBsdf.AnisotropicBsdfData"""

    Export: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.AnisotropicBsdfData] = ...

    ImportFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.FileName,
        google.protobuf.empty_pb2.Empty] = ...
    """to and from serialized AnisoptropicSpeosBsdf.AnisotropicBsdfData"""

    ExportFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.FileName,
        google.protobuf.empty_pb2.Empty] = ...

    GenerateSpecularInterpolationEnhancementData: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.RefractiveIndices,
        google.protobuf.empty_pb2.Empty] = ...
    """interpolation enhancement for specular"""

    GetSpecularInterpolationEnhancementData: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.SpecularInterpolationEnhancementData] = ...

    SetSpecularInterpolationEnhancementData: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.SpecularInterpolationEnhancementData,
        google.protobuf.empty_pb2.Empty] = ...

    GenerateRetroReflectionInterpolationEnhancementData: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        google.protobuf.empty_pb2.Empty] = ...
    """interpolation enhancement for retro reflection"""

    GetRetroReflectionInterpolationEnhancementData: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.InterpolationEnhancementData] = ...

    SetRetroReflectionInterpolationEnhancementData: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.InterpolationEnhancementData,
        google.protobuf.empty_pb2.Empty] = ...

    EnableWhiteSpecular: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.Wavelength,
        google.protobuf.empty_pb2.Empty] = ...
    """white specular"""

    DisableWhiteSpecular: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        google.protobuf.empty_pb2.Empty] = ...

    ImportReflectionSpectrum: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.SpectrumImport,
        google.protobuf.empty_pb2.Empty] = ...
    """spectrum import"""

    ImportTransmissionSpectrum: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.SpectrumImport,
        google.protobuf.empty_pb2.Empty] = ...

    FreezeAbsorptionReflectionTransmissionCoefficients: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        google.protobuf.empty_pb2.Empty] = ...
    """constant absorption"""

    ExportToConoscopicMap: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.ConoscopicMap,
        google.protobuf.empty_pb2.Empty] = ...
    """export to conoscopic map"""


class AnisotropicBsdfServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Load(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.FileName,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """serialization for native *.anisotropicbsdf files"""
        pass

    @abc.abstractmethod
    def Save(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.FileName,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def Import(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.AnisotropicBsdfData,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """to and from AnisoptropicSpeosBsdf.AnisotropicBsdfData"""
        pass

    @abc.abstractmethod
    def Export(self,
        request: google.protobuf.empty_pb2.Empty,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.AnisotropicBsdfData: ...

    @abc.abstractmethod
    def ImportFile(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.FileName,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """to and from serialized AnisoptropicSpeosBsdf.AnisotropicBsdfData"""
        pass

    @abc.abstractmethod
    def ExportFile(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.FileName,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def GenerateSpecularInterpolationEnhancementData(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.RefractiveIndices,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """interpolation enhancement for specular"""
        pass

    @abc.abstractmethod
    def GetSpecularInterpolationEnhancementData(self,
        request: google.protobuf.empty_pb2.Empty,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.SpecularInterpolationEnhancementData: ...

    @abc.abstractmethod
    def SetSpecularInterpolationEnhancementData(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.SpecularInterpolationEnhancementData,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def GenerateRetroReflectionInterpolationEnhancementData(self,
        request: google.protobuf.empty_pb2.Empty,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """interpolation enhancement for retro reflection"""
        pass

    @abc.abstractmethod
    def GetRetroReflectionInterpolationEnhancementData(self,
        request: google.protobuf.empty_pb2.Empty,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.InterpolationEnhancementData: ...

    @abc.abstractmethod
    def SetRetroReflectionInterpolationEnhancementData(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.InterpolationEnhancementData,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def EnableWhiteSpecular(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.Wavelength,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """white specular"""
        pass

    @abc.abstractmethod
    def DisableWhiteSpecular(self,
        request: google.protobuf.empty_pb2.Empty,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def ImportReflectionSpectrum(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.SpectrumImport,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """spectrum import"""
        pass

    @abc.abstractmethod
    def ImportTransmissionSpectrum(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.SpectrumImport,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    @abc.abstractmethod
    def FreezeAbsorptionReflectionTransmissionCoefficients(self,
        request: google.protobuf.empty_pb2.Empty,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """constant absorption"""
        pass

    @abc.abstractmethod
    def ExportToConoscopicMap(self,
        request: ansys.api.speos.bsdf.v1.anisotropic_bsdf_pb2.ConoscopicMap,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """export to conoscopic map"""
        pass


def add_AnisotropicBsdfServiceServicer_to_server(servicer: AnisotropicBsdfServiceServicer, server: grpc.Server) -> None: ...
