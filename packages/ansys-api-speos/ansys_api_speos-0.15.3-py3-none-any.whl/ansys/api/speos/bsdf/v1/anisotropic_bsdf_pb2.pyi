"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class AnisotropicBsdfData(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Double3(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        X_FIELD_NUMBER: builtins.int
        Y_FIELD_NUMBER: builtins.int
        Z_FIELD_NUMBER: builtins.int
        x: builtins.float = ...
        y: builtins.float = ...
        z: builtins.float = ...
        def __init__(self,
            *,
            x : builtins.float = ...,
            y : builtins.float = ...,
            z : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y","z",b"z"]) -> None: ...

    class Bsdf(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class WavelengthCoefficientPair(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            WAVELENGTH_FIELD_NUMBER: builtins.int
            COEFFICIENT_FIELD_NUMBER: builtins.int
            wavelength: builtins.float = ...
            """nanometers"""

            coefficient: builtins.float = ...
            """in [0, 1] interval"""

            def __init__(self,
                *,
                wavelength : builtins.float = ...,
                coefficient : builtins.float = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["coefficient",b"coefficient","wavelength",b"wavelength"]) -> None: ...

        class AnisotropicSample(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class IncidenceSample(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                INCIDENCE_SAMPLE_FIELD_NUMBER: builtins.int
                THETA_SAMPLES_FIELD_NUMBER: builtins.int
                PHI_SAMPLES_FIELD_NUMBER: builtins.int
                BSDF_COS_THETA_FIELD_NUMBER: builtins.int
                INTEGRAL_FIELD_NUMBER: builtins.int
                incidence_sample: builtins.float = ...
                """radians in [0, pi/2]"""

                @property
                def theta_samples(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                    """intensity diagram
                    radians in [0, pi/2] for reflection // radians in [pi/2, pi] for transmission
                    """
                    pass
                @property
                def phi_samples(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                    """radians in [0, 2*pi]"""
                    pass
                @property
                def bsdf_cos_theta(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                    """1/steradians"""
                    pass
                integral: builtins.float = ...
                """reflection/transmission coefficient"""

                def __init__(self,
                    *,
                    incidence_sample : builtins.float = ...,
                    theta_samples : typing.Optional[typing.Iterable[builtins.float]] = ...,
                    phi_samples : typing.Optional[typing.Iterable[builtins.float]] = ...,
                    bsdf_cos_theta : typing.Optional[typing.Iterable[builtins.float]] = ...,
                    integral : builtins.float = ...,
                    ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["bsdf_cos_theta",b"bsdf_cos_theta","incidence_sample",b"incidence_sample","integral",b"integral","phi_samples",b"phi_samples","theta_samples",b"theta_samples"]) -> None: ...

            ANISOTROPIC_SAMPLE_FIELD_NUMBER: builtins.int
            INCIDENCE_SAMPLES_FIELD_NUMBER: builtins.int
            anisotropic_sample: builtins.float = ...
            """radians in [0, pi/2] or [0, pi] or [0, 2*pi]"""

            @property
            def incidence_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AnisotropicBsdfData.Bsdf.AnisotropicSample.IncidenceSample]: ...
            def __init__(self,
                *,
                anisotropic_sample : builtins.float = ...,
                incidence_samples : typing.Optional[typing.Iterable[global___AnisotropicBsdfData.Bsdf.AnisotropicSample.IncidenceSample]] = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["anisotropic_sample",b"anisotropic_sample","incidence_samples",b"incidence_samples"]) -> None: ...

        SPECTRUM_INCIDENCE_FIELD_NUMBER: builtins.int
        SPECTRUM_ANISOTROPY_FIELD_NUMBER: builtins.int
        SPECTRUM_FIELD_NUMBER: builtins.int
        ANISOTROPIC_SAMPLES_FIELD_NUMBER: builtins.int
        spectrum_incidence: builtins.float = ...
        """spectrum information
        radians in [0, pi/2]
        """

        spectrum_anisotropy: builtins.float = ...
        """radians in [0, 2*pi]"""

        @property
        def spectrum(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AnisotropicBsdfData.Bsdf.WavelengthCoefficientPair]: ...
        @property
        def anisotropic_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AnisotropicBsdfData.Bsdf.AnisotropicSample]: ...
        def __init__(self,
            *,
            spectrum_incidence : builtins.float = ...,
            spectrum_anisotropy : builtins.float = ...,
            spectrum : typing.Optional[typing.Iterable[global___AnisotropicBsdfData.Bsdf.WavelengthCoefficientPair]] = ...,
            anisotropic_samples : typing.Optional[typing.Iterable[global___AnisotropicBsdfData.Bsdf.AnisotropicSample]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["anisotropic_samples",b"anisotropic_samples","spectrum",b"spectrum","spectrum_anisotropy",b"spectrum_anisotropy","spectrum_incidence",b"spectrum_incidence"]) -> None: ...

    DESCRIPTION_FIELD_NUMBER: builtins.int
    ANISOTROPY_VECTOR_FIELD_NUMBER: builtins.int
    REFLECTION_FIELD_NUMBER: builtins.int
    TRANSMISSION_FIELD_NUMBER: builtins.int
    description: typing.Text = ...
    @property
    def anisotropy_vector(self) -> global___AnisotropicBsdfData.Double3: ...
    @property
    def reflection(self) -> global___AnisotropicBsdfData.Bsdf: ...
    @property
    def transmission(self) -> global___AnisotropicBsdfData.Bsdf: ...
    def __init__(self,
        *,
        description : typing.Text = ...,
        anisotropy_vector : typing.Optional[global___AnisotropicBsdfData.Double3] = ...,
        reflection : typing.Optional[global___AnisotropicBsdfData.Bsdf] = ...,
        transmission : typing.Optional[global___AnisotropicBsdfData.Bsdf] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["anisotropy_vector",b"anisotropy_vector","reflection",b"reflection","transmission",b"transmission"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["anisotropy_vector",b"anisotropy_vector","description",b"description","reflection",b"reflection","transmission",b"transmission"]) -> None: ...
global___AnisotropicBsdfData = AnisotropicBsdfData

class FileName(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FILE_NAME_FIELD_NUMBER: builtins.int
    file_name: typing.Text = ...
    def __init__(self,
        *,
        file_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["file_name",b"file_name"]) -> None: ...
global___FileName = FileName

class RefractiveIndices(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REFRACTIVE_INDEX_1_FIELD_NUMBER: builtins.int
    REFRACTIVE_INDEX_2_FIELD_NUMBER: builtins.int
    refractive_index_1: builtins.float = ...
    refractive_index_2: builtins.float = ...
    def __init__(self,
        *,
        refractive_index_1 : builtins.float = ...,
        refractive_index_2 : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["refractive_index_1",b"refractive_index_1","refractive_index_2",b"refractive_index_2"]) -> None: ...
global___RefractiveIndices = RefractiveIndices

class InterpolationEnhancementData(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class AnisotropicSample(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class ConeData(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            CONE_HALF_ANGLE_FIELD_NUMBER: builtins.int
            CONE_HEIGHT_FIELD_NUMBER: builtins.int
            cone_half_angle: builtins.float = ...
            """radians in [0, pi/2]"""

            cone_height: builtins.float = ...
            """value >= 0"""

            def __init__(self,
                *,
                cone_half_angle : builtins.float = ...,
                cone_height : builtins.float = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["cone_half_angle",b"cone_half_angle","cone_height",b"cone_height"]) -> None: ...

        INCIDENCE_SAMPLES_FIELD_NUMBER: builtins.int
        @property
        def incidence_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InterpolationEnhancementData.AnisotropicSample.ConeData]: ...
        def __init__(self,
            *,
            incidence_samples : typing.Optional[typing.Iterable[global___InterpolationEnhancementData.AnisotropicSample.ConeData]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["incidence_samples",b"incidence_samples"]) -> None: ...

    ANISOTROPIC_SAMPLES_FIELD_NUMBER: builtins.int
    @property
    def anisotropic_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InterpolationEnhancementData.AnisotropicSample]: ...
    def __init__(self,
        *,
        anisotropic_samples : typing.Optional[typing.Iterable[global___InterpolationEnhancementData.AnisotropicSample]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["anisotropic_samples",b"anisotropic_samples"]) -> None: ...
global___InterpolationEnhancementData = InterpolationEnhancementData

class SpecularInterpolationEnhancementData(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REFLECTION_FIELD_NUMBER: builtins.int
    TRANSMISSION_FIELD_NUMBER: builtins.int
    REFRACTIVE_INDEX_1_FIELD_NUMBER: builtins.int
    REFRACTIVE_INDEX_2_FIELD_NUMBER: builtins.int
    @property
    def reflection(self) -> global___InterpolationEnhancementData: ...
    @property
    def transmission(self) -> global___InterpolationEnhancementData: ...
    refractive_index_1: builtins.float = ...
    refractive_index_2: builtins.float = ...
    def __init__(self,
        *,
        reflection : typing.Optional[global___InterpolationEnhancementData] = ...,
        transmission : typing.Optional[global___InterpolationEnhancementData] = ...,
        refractive_index_1 : builtins.float = ...,
        refractive_index_2 : builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["reflection",b"reflection","transmission",b"transmission"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["reflection",b"reflection","refractive_index_1",b"refractive_index_1","refractive_index_2",b"refractive_index_2","transmission",b"transmission"]) -> None: ...
global___SpecularInterpolationEnhancementData = SpecularInterpolationEnhancementData

class Wavelength(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    WAVELENGTH_FIELD_NUMBER: builtins.int
    wavelength: builtins.float = ...
    """in nanometers"""

    def __init__(self,
        *,
        wavelength : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["wavelength",b"wavelength"]) -> None: ...
global___Wavelength = Wavelength

class SpectrumImport(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INCIDENCE_ANGLE_FIELD_NUMBER: builtins.int
    ANISOTROPY_ANGLE_FIELD_NUMBER: builtins.int
    FILE_NAME_FIELD_NUMBER: builtins.int
    incidence_angle: builtins.float = ...
    """radians in [0, pi/2]"""

    anisotropy_angle: builtins.float = ...
    """radians in [0, 2*pi]"""

    file_name: typing.Text = ...
    """*.spectrum"""

    def __init__(self,
        *,
        incidence_angle : builtins.float = ...,
        anisotropy_angle : builtins.float = ...,
        file_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["anisotropy_angle",b"anisotropy_angle","file_name",b"file_name","incidence_angle",b"incidence_angle"]) -> None: ...
global___SpectrumImport = SpectrumImport

class ConoscopicMap(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _BsdfSide:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _BsdfSideEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_BsdfSide.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNKNOWN: ConoscopicMap.BsdfSide.ValueType = ...  # 0
        REFLECTION: ConoscopicMap.BsdfSide.ValueType = ...  # 1
        TRANSMISSION: ConoscopicMap.BsdfSide.ValueType = ...  # 2
    class BsdfSide(_BsdfSide, metaclass=_BsdfSideEnumTypeWrapper):
        pass

    UNKNOWN: ConoscopicMap.BsdfSide.ValueType = ...  # 0
    REFLECTION: ConoscopicMap.BsdfSide.ValueType = ...  # 1
    TRANSMISSION: ConoscopicMap.BsdfSide.ValueType = ...  # 2

    OUTPUT_FILE_NAME_FIELD_NUMBER: builtins.int
    WAVELENGTH_FIELD_NUMBER: builtins.int
    ANISOTROPIC_ANGLE_FIELD_NUMBER: builtins.int
    SIDE_FIELD_NUMBER: builtins.int
    RESOLUTION_FIELD_NUMBER: builtins.int
    output_file_name: typing.Text = ...
    """*.xmp"""

    wavelength: builtins.float = ...
    """nanometers"""

    anisotropic_angle: builtins.float = ...
    """radians in [0, 2*pi]"""

    side: global___ConoscopicMap.BsdfSide.ValueType = ...
    resolution: builtins.int = ...
    def __init__(self,
        *,
        output_file_name : typing.Text = ...,
        wavelength : builtins.float = ...,
        anisotropic_angle : builtins.float = ...,
        side : global___ConoscopicMap.BsdfSide.ValueType = ...,
        resolution : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["anisotropic_angle",b"anisotropic_angle","output_file_name",b"output_file_name","resolution",b"resolution","side",b"side","wavelength",b"wavelength"]) -> None: ...
global___ConoscopicMap = ConoscopicMap
