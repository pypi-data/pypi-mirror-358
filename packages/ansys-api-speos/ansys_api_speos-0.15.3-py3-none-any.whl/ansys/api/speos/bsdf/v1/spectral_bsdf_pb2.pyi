"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class SpectralBsdfData(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class WavelengthIncidence(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class Diagram(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            THETA_SAMPLES_FIELD_NUMBER: builtins.int
            PHI_SAMPLES_FIELD_NUMBER: builtins.int
            BSDF_COS_THETA_FIELD_NUMBER: builtins.int
            INTEGRAL_FIELD_NUMBER: builtins.int
            @property
            def theta_samples(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                """radians in [0, pi/2]"""
                pass
            @property
            def phi_samples(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                """radians in [0, 2*pi]"""
                pass
            @property
            def bsdf_cos_theta(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                """1/steradians"""
                pass
            integral: builtins.float = ...
            """reflection/transmission coefficient in [0, 1] interval"""

            def __init__(self,
                *,
                theta_samples : typing.Optional[typing.Iterable[builtins.float]] = ...,
                phi_samples : typing.Optional[typing.Iterable[builtins.float]] = ...,
                bsdf_cos_theta : typing.Optional[typing.Iterable[builtins.float]] = ...,
                integral : builtins.float = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["bsdf_cos_theta",b"bsdf_cos_theta","integral",b"integral","phi_samples",b"phi_samples","theta_samples",b"theta_samples"]) -> None: ...

        REFLECTION_FIELD_NUMBER: builtins.int
        TRANSMISSION_FIELD_NUMBER: builtins.int
        @property
        def reflection(self) -> global___SpectralBsdfData.WavelengthIncidence.Diagram: ...
        @property
        def transmission(self) -> global___SpectralBsdfData.WavelengthIncidence.Diagram: ...
        def __init__(self,
            *,
            reflection : typing.Optional[global___SpectralBsdfData.WavelengthIncidence.Diagram] = ...,
            transmission : typing.Optional[global___SpectralBsdfData.WavelengthIncidence.Diagram] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["reflection",b"reflection","transmission",b"transmission"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["reflection",b"reflection","transmission",b"transmission"]) -> None: ...

    DESCRIPTION_FIELD_NUMBER: builtins.int
    INCIDENCE_SAMPLES_FIELD_NUMBER: builtins.int
    WAVELENGTH_SAMPLES_FIELD_NUMBER: builtins.int
    WAVELENGTH_INCIDENCE_SAMPLES_FIELD_NUMBER: builtins.int
    description: typing.Text = ...
    @property
    def incidence_samples(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """radians in [0, pi/2]"""
        pass
    @property
    def wavelength_samples(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """nanometers"""
        pass
    @property
    def wavelength_incidence_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpectralBsdfData.WavelengthIncidence]: ...
    def __init__(self,
        *,
        description : typing.Text = ...,
        incidence_samples : typing.Optional[typing.Iterable[builtins.float]] = ...,
        wavelength_samples : typing.Optional[typing.Iterable[builtins.float]] = ...,
        wavelength_incidence_samples : typing.Optional[typing.Iterable[global___SpectralBsdfData.WavelengthIncidence]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","incidence_samples",b"incidence_samples","wavelength_incidence_samples",b"wavelength_incidence_samples","wavelength_samples",b"wavelength_samples"]) -> None: ...
global___SpectralBsdfData = SpectralBsdfData

class FileName(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FILE_NAME_FIELD_NUMBER: builtins.int
    file_name: typing.Text = ...
    def __init__(self,
        *,
        file_name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["file_name",b"file_name"]) -> None: ...
global___FileName = FileName

class RefractiveIndices(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    REFRACTIVE_INDEX_1_FIELD_NUMBER: builtins.int
    REFRACTIVE_INDEX_2_FIELD_NUMBER: builtins.int
    refractive_index_1: builtins.float = ...
    refractive_index_2: builtins.float = ...
    def __init__(self,
        *,
        refractive_index_1 : builtins.float = ...,
        refractive_index_2 : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["refractive_index_1",b"refractive_index_1","refractive_index_2",b"refractive_index_2"]) -> None: ...
global___RefractiveIndices = RefractiveIndices

class SpecularInterpolationEnhancementData(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class WavelengthIncidence(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class ConeData(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            CONE_HALF_ANGLE_FIELD_NUMBER: builtins.int
            CONE_HEIGHT_FIELD_NUMBER: builtins.int
            cone_half_angle: builtins.float = ...
            """radians in [0, pi/2]"""

            cone_height: builtins.float = ...
            """value >= 0"""

            def __init__(self,
                *,
                cone_half_angle : builtins.float = ...,
                cone_height : builtins.float = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["cone_half_angle",b"cone_half_angle","cone_height",b"cone_height"]) -> None: ...

        REFLECTION_FIELD_NUMBER: builtins.int
        TRANSMISSION_FIELD_NUMBER: builtins.int
        @property
        def reflection(self) -> global___SpecularInterpolationEnhancementData.WavelengthIncidence.ConeData: ...
        @property
        def transmission(self) -> global___SpecularInterpolationEnhancementData.WavelengthIncidence.ConeData: ...
        def __init__(self,
            *,
            reflection : typing.Optional[global___SpecularInterpolationEnhancementData.WavelengthIncidence.ConeData] = ...,
            transmission : typing.Optional[global___SpecularInterpolationEnhancementData.WavelengthIncidence.ConeData] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["reflection",b"reflection","transmission",b"transmission"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["reflection",b"reflection","transmission",b"transmission"]) -> None: ...

    INCIDENCE_NB_FIELD_NUMBER: builtins.int
    WAVELENGTH_NB_FIELD_NUMBER: builtins.int
    REFRACTIVE_INDEX_1_FIELD_NUMBER: builtins.int
    REFRACTIVE_INDEX_2_FIELD_NUMBER: builtins.int
    WAVELENGTH_INCIDENCE_SAMPLES_FIELD_NUMBER: builtins.int
    incidence_nb: builtins.int = ...
    wavelength_nb: builtins.int = ...
    refractive_index_1: builtins.float = ...
    refractive_index_2: builtins.float = ...
    @property
    def wavelength_incidence_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpecularInterpolationEnhancementData.WavelengthIncidence]: ...
    def __init__(self,
        *,
        incidence_nb : builtins.int = ...,
        wavelength_nb : builtins.int = ...,
        refractive_index_1 : builtins.float = ...,
        refractive_index_2 : builtins.float = ...,
        wavelength_incidence_samples : typing.Optional[typing.Iterable[global___SpecularInterpolationEnhancementData.WavelengthIncidence]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["incidence_nb",b"incidence_nb","refractive_index_1",b"refractive_index_1","refractive_index_2",b"refractive_index_2","wavelength_incidence_samples",b"wavelength_incidence_samples","wavelength_nb",b"wavelength_nb"]) -> None: ...
global___SpecularInterpolationEnhancementData = SpecularInterpolationEnhancementData

class ConoscopicMap(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _BsdfSide:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _BsdfSideEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_BsdfSide.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        UNKNOWN: ConoscopicMap.BsdfSide.ValueType = ...  # 0
        REFLECTION: ConoscopicMap.BsdfSide.ValueType = ...  # 1
        TRANSMISSION: ConoscopicMap.BsdfSide.ValueType = ...  # 2
    class BsdfSide(_BsdfSide, metaclass=_BsdfSideEnumTypeWrapper):
        pass

    UNKNOWN: ConoscopicMap.BsdfSide.ValueType = ...  # 0
    REFLECTION: ConoscopicMap.BsdfSide.ValueType = ...  # 1
    TRANSMISSION: ConoscopicMap.BsdfSide.ValueType = ...  # 2

    OUTPUT_FILE_NAME_FIELD_NUMBER: builtins.int
    WAVELENGTH_FIELD_NUMBER: builtins.int
    SIDE_FIELD_NUMBER: builtins.int
    RESOLUTION_FIELD_NUMBER: builtins.int
    output_file_name: typing.Text = ...
    """*.xmp"""

    wavelength: builtins.float = ...
    """nanometers"""

    side: global___ConoscopicMap.BsdfSide.ValueType = ...
    resolution: builtins.int = ...
    def __init__(self,
        *,
        output_file_name : typing.Text = ...,
        wavelength : builtins.float = ...,
        side : global___ConoscopicMap.BsdfSide.ValueType = ...,
        resolution : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["output_file_name",b"output_file_name","resolution",b"resolution","side",b"side","wavelength",b"wavelength"]) -> None: ...
global___ConoscopicMap = ConoscopicMap
