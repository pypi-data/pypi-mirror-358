"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.speos.sop.v1.sop_pb2
import grpc

class SOPTemplatesManagerStub:
    """Manager for SOPTemplates (SOP: Surface Optical Properties)"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.sop.v1.sop_pb2.Create_Request,
        ansys.api.speos.sop.v1.sop_pb2.Create_Response] = ...
    """Create a SOPTemplate"""

    Read: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.sop.v1.sop_pb2.Read_Request,
        ansys.api.speos.sop.v1.sop_pb2.Read_Response] = ...
    """Read a SOPTemplate"""

    Update: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.sop.v1.sop_pb2.Update_Request,
        ansys.api.speos.sop.v1.sop_pb2.Update_Response] = ...
    """Update a SOPTemplate"""

    Delete: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.sop.v1.sop_pb2.Delete_Request,
        ansys.api.speos.sop.v1.sop_pb2.Delete_Response] = ...
    """Delete a SOPTemplate"""

    List: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.sop.v1.sop_pb2.List_Request,
        ansys.api.speos.sop.v1.sop_pb2.List_Response] = ...
    """List all SOPTemplates in manager"""


class SOPTemplatesManagerServicer(metaclass=abc.ABCMeta):
    """Manager for SOPTemplates (SOP: Surface Optical Properties)"""
    @abc.abstractmethod
    def Create(self,
        request: ansys.api.speos.sop.v1.sop_pb2.Create_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.sop.v1.sop_pb2.Create_Response:
        """Create a SOPTemplate"""
        pass

    @abc.abstractmethod
    def Read(self,
        request: ansys.api.speos.sop.v1.sop_pb2.Read_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.sop.v1.sop_pb2.Read_Response:
        """Read a SOPTemplate"""
        pass

    @abc.abstractmethod
    def Update(self,
        request: ansys.api.speos.sop.v1.sop_pb2.Update_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.sop.v1.sop_pb2.Update_Response:
        """Update a SOPTemplate"""
        pass

    @abc.abstractmethod
    def Delete(self,
        request: ansys.api.speos.sop.v1.sop_pb2.Delete_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.sop.v1.sop_pb2.Delete_Response:
        """Delete a SOPTemplate"""
        pass

    @abc.abstractmethod
    def List(self,
        request: ansys.api.speos.sop.v1.sop_pb2.List_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.sop.v1.sop_pb2.List_Response:
        """List all SOPTemplates in manager"""
        pass


def add_SOPTemplatesManagerServicer_to_server(servicer: SOPTemplatesManagerServicer, server: grpc.Server) -> None: ...

class SOPTemplateActionsStub:
    """Actions available on a SOPTemplate"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    pass


class SOPTemplateActionsServicer(metaclass=abc.ABCMeta):
    """Actions available on a SOPTemplate"""
    pass


def add_SOPTemplateActionsServicer_to_server(servicer: SOPTemplateActionsServicer, server: grpc.Server) -> None: ...
