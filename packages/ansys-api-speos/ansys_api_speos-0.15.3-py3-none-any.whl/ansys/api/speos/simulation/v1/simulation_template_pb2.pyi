"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import ansys.api.speos.sensor.v1.common_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _EnumColorimetricStandard:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _EnumColorimetricStandardEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EnumColorimetricStandard.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    CIE_1931: EnumColorimetricStandard.ValueType = ...  # 0
    """2 degrees CIE Standard Colorimetric Observer Data."""

    CIE_1964: EnumColorimetricStandard.ValueType = ...  # 1
    """10 degrees CIE Standard Colorimetric Observer Data."""

class EnumColorimetricStandard(_EnumColorimetricStandard, metaclass=_EnumColorimetricStandardEnumTypeWrapper):
    """Default Colorimetric Standard"""
    pass

CIE_1931: EnumColorimetricStandard.ValueType = ...  # 0
"""2 degrees CIE Standard Colorimetric Observer Data."""

CIE_1964: EnumColorimetricStandard.ValueType = ...  # 1
"""10 degrees CIE Standard Colorimetric Observer Data."""

global___EnumColorimetricStandard = EnumColorimetricStandard


class Weight(google.protobuf.message.Message):
    """The Weight represents the ray energy. In real life, a ray looses some energy (power) when it interacts with an object.
    Activating weight means that the Weight message is present.
    When weight is not activated, rays' energy stays constant and probability laws dictate if rays continue or stop propagating.
    When weight is activated, rays' energy evolves with interactions until rays reach the sensors.
    It is highly recommended to activate Weight, except in Interactive simulation.
    Not activating Weight is useful to understand certain phenomena as absorption.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MINIMUM_ENERGY_PERCENTAGE_FIELD_NUMBER: builtins.int
    minimum_energy_percentage: builtins.float = ...
    """The Minimum energy percentage parameter defines the minimum energy ratio to continue to propagate a ray with weight. 1 = 100%."""

    def __init__(self,
        *,
        minimum_energy_percentage : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["minimum_energy_percentage",b"minimum_energy_percentage"]) -> None: ...
global___Weight = Weight

class Texture(google.protobuf.message.Message):
    """If texture has been applied in the scene, fill Texture message."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _TextureNormalization:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TextureNormalizationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TextureNormalization.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        TEXTURE_NORMALIZATION_UNSPECIFIED: Texture.TextureNormalization.ValueType = ...  # 0
        TEXTURE_NORMALIZATION_NONE: Texture.TextureNormalization.ValueType = ...  # 1
        """The simulation result uses both the image texture and the texture mapping optical properties."""

        TEXTURE_NORMALIZATION_COLOR_FROM_TEXTURE: Texture.TextureNormalization.ValueType = ...  # 2
        """The simulation result uses the color and the color lightness of the image texture."""

        TEXTURE_NORMALIZATION_COLOR_FROM_BSDF: Texture.TextureNormalization.ValueType = ...  # 3
        """The simulation result uses the BSDF information of the texture mapping optical properties."""

    class TextureNormalization(_TextureNormalization, metaclass=_TextureNormalizationEnumTypeWrapper):
        pass

    TEXTURE_NORMALIZATION_UNSPECIFIED: Texture.TextureNormalization.ValueType = ...  # 0
    TEXTURE_NORMALIZATION_NONE: Texture.TextureNormalization.ValueType = ...  # 1
    """The simulation result uses both the image texture and the texture mapping optical properties."""

    TEXTURE_NORMALIZATION_COLOR_FROM_TEXTURE: Texture.TextureNormalization.ValueType = ...  # 2
    """The simulation result uses the color and the color lightness of the image texture."""

    TEXTURE_NORMALIZATION_COLOR_FROM_BSDF: Texture.TextureNormalization.ValueType = ...  # 3
    """The simulation result uses the BSDF information of the texture mapping optical properties."""


    TEXTURE_NORMALIZATION_FIELD_NUMBER: builtins.int
    NORMAL_MAP_FIELD_NUMBER: builtins.int
    texture_normalization: global___Texture.TextureNormalization.ValueType = ...
    """Rendering of the texture."""

    normal_map: builtins.bool = ...
    """To activate normal map."""

    def __init__(self,
        *,
        texture_normalization : global___Texture.TextureNormalization.ValueType = ...,
        normal_map : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["normal_map",b"normal_map","texture_normalization",b"texture_normalization"]) -> None: ...
global___Texture = Texture

class DirectMCSimulationTemplate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GEOM_DISTANCE_TOLERANCE_FIELD_NUMBER: builtins.int
    MAX_IMPACT_FIELD_NUMBER: builtins.int
    WEIGHT_FIELD_NUMBER: builtins.int
    COLORIMETRIC_STANDARD_FIELD_NUMBER: builtins.int
    DISPERSION_FIELD_NUMBER: builtins.int
    FAST_TRANSMISSION_GATHERING_FIELD_NUMBER: builtins.int
    AMBIENT_MATERIAL_URI_FIELD_NUMBER: builtins.int
    TEXTURE_FIELD_NUMBER: builtins.int
    geom_distance_tolerance: builtins.float = ...
    """Maximum distance in mm to consider two faces as tangent"""

    max_impact: builtins.int = ...
    """To define a value to determine the maximum number of ray impacts during propagation. When a ray has interacted N times with the geometry, the propagation of the ray stops."""

    @property
    def weight(self) -> global___Weight:
        """To activate Weight. The Weight represents the ray energy. In real life, a ray looses some energy (power) when it interacts with an object."""
        pass
    colorimetric_standard: global___EnumColorimetricStandard.ValueType = ...
    """To define the Colorimetric Standard"""

    dispersion: builtins.bool = ...
    """To activate the dispersion calculation."""

    fast_transmission_gathering: builtins.bool = ...
    """To accelerate the simulation by neglecting the light refraction that occurs when the light is being transmitted through a transparent surface."""

    ambient_material_uri: typing.Text = ...
    """To select an ambient material *.material"""

    @property
    def texture(self) -> global___Texture:
        """To activate texture."""
        pass
    def __init__(self,
        *,
        geom_distance_tolerance : builtins.float = ...,
        max_impact : builtins.int = ...,
        weight : typing.Optional[global___Weight] = ...,
        colorimetric_standard : global___EnumColorimetricStandard.ValueType = ...,
        dispersion : builtins.bool = ...,
        fast_transmission_gathering : builtins.bool = ...,
        ambient_material_uri : typing.Text = ...,
        texture : typing.Optional[global___Texture] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["texture",b"texture","weight",b"weight"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ambient_material_uri",b"ambient_material_uri","colorimetric_standard",b"colorimetric_standard","dispersion",b"dispersion","fast_transmission_gathering",b"fast_transmission_gathering","geom_distance_tolerance",b"geom_distance_tolerance","max_impact",b"max_impact","texture",b"texture","weight",b"weight"]) -> None: ...
global___DirectMCSimulationTemplate = DirectMCSimulationTemplate

class InverseMCSimulationTemplate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GEOM_DISTANCE_TOLERANCE_FIELD_NUMBER: builtins.int
    MAX_IMPACT_FIELD_NUMBER: builtins.int
    WEIGHT_FIELD_NUMBER: builtins.int
    COLORIMETRIC_STANDARD_FIELD_NUMBER: builtins.int
    DISPERSION_FIELD_NUMBER: builtins.int
    SPLITTING_FIELD_NUMBER: builtins.int
    NUMBER_OF_GATHERING_RAYS_PER_SOURCE_FIELD_NUMBER: builtins.int
    MAXIMUM_GATHERING_ERROR_FIELD_NUMBER: builtins.int
    MAXIMUM_GATHERING_ERROR_PERCENTAGE_FIELD_NUMBER: builtins.int
    FAST_TRANSMISSION_GATHERING_FIELD_NUMBER: builtins.int
    AMBIENT_MATERIAL_URI_FIELD_NUMBER: builtins.int
    TEXTURE_FIELD_NUMBER: builtins.int
    geom_distance_tolerance: builtins.float = ...
    """Maximum distance in mm to consider two faces as tangent."""

    max_impact: builtins.int = ...
    """To define a value to determine the maximum number of ray impacts during propagation. When a ray has interacted N times with the geometry, the propagation of the ray stops."""

    @property
    def weight(self) -> global___Weight:
        """To activate Weight. The Weight represents the ray energy. In real life, a ray looses some energy (power) when it interacts with an object."""
        pass
    colorimetric_standard: global___EnumColorimetricStandard.ValueType = ...
    """To define the Colorimetric Standard"""

    dispersion: builtins.bool = ...
    """To activate the dispersion calculation."""

    splitting: builtins.bool = ...
    """To split each propagated ray into several paths at their first impact after leaving the observer point."""

    number_of_gathering_rays_per_source: builtins.int = ...
    """This number pilots the number of shadow rays to target at each source."""

    maximum_gathering_error: builtins.int = ...
    """Deprecated - Better use maximum_gathering_error_percentage."""

    maximum_gathering_error_percentage: builtins.float = ...
    """This value defines the level below which a source can be neglected. 0, the default value means that no approximation will be done."""

    fast_transmission_gathering: builtins.bool = ...
    """To accelerate the simulation by neglecting the light refraction that occurs when the light is being transmitted through a transparent surface."""

    ambient_material_uri: typing.Text = ...
    """To select an ambient material *.material"""

    @property
    def texture(self) -> global___Texture:
        """To activate texture."""
        pass
    def __init__(self,
        *,
        geom_distance_tolerance : builtins.float = ...,
        max_impact : builtins.int = ...,
        weight : typing.Optional[global___Weight] = ...,
        colorimetric_standard : global___EnumColorimetricStandard.ValueType = ...,
        dispersion : builtins.bool = ...,
        splitting : builtins.bool = ...,
        number_of_gathering_rays_per_source : builtins.int = ...,
        maximum_gathering_error : builtins.int = ...,
        maximum_gathering_error_percentage : builtins.float = ...,
        fast_transmission_gathering : builtins.bool = ...,
        ambient_material_uri : typing.Text = ...,
        texture : typing.Optional[global___Texture] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["texture",b"texture","weight",b"weight"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ambient_material_uri",b"ambient_material_uri","colorimetric_standard",b"colorimetric_standard","dispersion",b"dispersion","fast_transmission_gathering",b"fast_transmission_gathering","geom_distance_tolerance",b"geom_distance_tolerance","max_impact",b"max_impact","maximum_gathering_error",b"maximum_gathering_error","maximum_gathering_error_percentage",b"maximum_gathering_error_percentage","number_of_gathering_rays_per_source",b"number_of_gathering_rays_per_source","splitting",b"splitting","texture",b"texture","weight",b"weight"]) -> None: ...
global___InverseMCSimulationTemplate = InverseMCSimulationTemplate

class SimulationTemplate(google.protobuf.message.Message):
    """Simulation template with its basic characteristics"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class Interactive(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        GEOM_DISTANCE_TOLERANCE_FIELD_NUMBER: builtins.int
        MAX_IMPACT_FIELD_NUMBER: builtins.int
        WEIGHT_FIELD_NUMBER: builtins.int
        COLORIMETRIC_STANDARD_FIELD_NUMBER: builtins.int
        AMBIENT_MATERIAL_URI_FIELD_NUMBER: builtins.int
        TEXTURE_FIELD_NUMBER: builtins.int
        geom_distance_tolerance: builtins.float = ...
        """Maximum distance in mm to consider two faces as tangent."""

        max_impact: builtins.int = ...
        """Defines a value to determine the maximum number of ray impacts during propagation. When a ray has interacted N times with the geometry, the propagation of the ray stops."""

        @property
        def weight(self) -> global___Weight:
            """Activates Weight. Highly recommended to fill"""
            pass
        colorimetric_standard: global___EnumColorimetricStandard.ValueType = ...
        """Default Colorimetric Standard"""

        ambient_material_uri: typing.Text = ...
        """To define the environment in which the light will propagate (water, fog, smoke etc.). It is expressed in a .material file"""

        @property
        def texture(self) -> global___Texture:
            """To activate texture."""
            pass
        def __init__(self,
            *,
            geom_distance_tolerance : builtins.float = ...,
            max_impact : builtins.int = ...,
            weight : typing.Optional[global___Weight] = ...,
            colorimetric_standard : global___EnumColorimetricStandard.ValueType = ...,
            ambient_material_uri : typing.Text = ...,
            texture : typing.Optional[global___Texture] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["texture",b"texture","weight",b"weight"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["ambient_material_uri",b"ambient_material_uri","colorimetric_standard",b"colorimetric_standard","geom_distance_tolerance",b"geom_distance_tolerance","max_impact",b"max_impact","texture",b"texture","weight",b"weight"]) -> None: ...

    class VirtualBSDFBench(google.protobuf.message.Message):
        """Virtual BSDF Bench"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class SourceSamplingUniformIsotropic(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            THETA_SAMPLING_FIELD_NUMBER: builtins.int
            theta_sampling: builtins.int = ...
            """Number of samples created along the polar angle Theta (around the normal Z-axis) in the range [0,90] degrees, with a minimum value of 2 degrees. Each sample represents the position of the source on Theta."""

            def __init__(self,
                *,
                theta_sampling : builtins.int = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["theta_sampling",b"theta_sampling"]) -> None: ...

        class SourceSamplingUniformAnisotropic(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class _PhiSymmetry:
                ValueType = typing.NewType('ValueType', builtins.int)
                V: typing_extensions.TypeAlias = ValueType
            class _PhiSymmetryEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PhiSymmetry.ValueType], builtins.type):
                DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
                PHI_SYMMETRY_UNSPECIFIED: SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic.PhiSymmetry.ValueType = ...  # 0
                PHI_SYMMETRY_NONE: SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic.PhiSymmetry.ValueType = ...  # 1
                PHI_SYMMETRY_1_PLANE: SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic.PhiSymmetry.ValueType = ...  # 2
                """Symmetry to plane 0 - 180"""

                PHI_SYMMETRY_2_PLANES: SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic.PhiSymmetry.ValueType = ...  # 3
                """Symmetry to planes 0 - 180 and 90 - 270"""

            class PhiSymmetry(_PhiSymmetry, metaclass=_PhiSymmetryEnumTypeWrapper):
                pass

            PHI_SYMMETRY_UNSPECIFIED: SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic.PhiSymmetry.ValueType = ...  # 0
            PHI_SYMMETRY_NONE: SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic.PhiSymmetry.ValueType = ...  # 1
            PHI_SYMMETRY_1_PLANE: SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic.PhiSymmetry.ValueType = ...  # 2
            """Symmetry to plane 0 - 180"""

            PHI_SYMMETRY_2_PLANES: SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic.PhiSymmetry.ValueType = ...  # 3
            """Symmetry to planes 0 - 180 and 90 - 270"""


            THETA_SAMPLING_FIELD_NUMBER: builtins.int
            PHI_SAMPLING_FIELD_NUMBER: builtins.int
            SYMMETRY_TYPE_FIELD_NUMBER: builtins.int
            theta_sampling: builtins.int = ...
            """Number of samples created along the polar angle Theta (around the normal Z-axis) in the range [0,90] degrees, with a minimum value of 2 degrees. Each sample represents the position of the source on Theta."""

            phi_sampling: builtins.int = ...
            """Number of samples created along the azimuthal angle Phi (around the X-axis). Each sample represents the position of the source on Phi."""

            symmetry_type: global___SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic.PhiSymmetry.ValueType = ...
            """Define symmetry type. Not needed if there is no symmetry in measure."""

            def __init__(self,
                *,
                theta_sampling : builtins.int = ...,
                phi_sampling : builtins.int = ...,
                symmetry_type : global___SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic.PhiSymmetry.ValueType = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["phi_sampling",b"phi_sampling","symmetry_type",b"symmetry_type","theta_sampling",b"theta_sampling"]) -> None: ...

        class SourceSamplingAdaptive(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            FILE_URI_FIELD_NUMBER: builtins.int
            file_uri: typing.Text = ...
            """uri of incident sampling file"""

            def __init__(self,
                *,
                file_uri : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["file_uri",b"file_uri"]) -> None: ...

        class Sensor(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class SensorSamplingUniform(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                THETA_SAMPLING_FIELD_NUMBER: builtins.int
                PHI_SAMPLING_FIELD_NUMBER: builtins.int
                theta_sampling: builtins.int = ...
                """Number of samples created along the polar angle Theta (around the normal Z-axis) in the range [0,90] degrees. Each sample represents the position of the sensor on Theta."""

                phi_sampling: builtins.int = ...
                """Number of samples created along the azimuthal angle Phi (around the X-axis). Each sample represents the position of the sensor on Phi."""

                def __init__(self,
                    *,
                    theta_sampling : builtins.int = ...,
                    phi_sampling : builtins.int = ...,
                    ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["phi_sampling",b"phi_sampling","theta_sampling",b"theta_sampling"]) -> None: ...

            class SensorSamplingAutomatic(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                def __init__(self,
                    ) -> None: ...

            INTEGRATION_ANGLE_FIELD_NUMBER: builtins.int
            UNIFORM_FIELD_NUMBER: builtins.int
            AUTOMATIC_FIELD_NUMBER: builtins.int
            integration_angle: builtins.float = ...
            @property
            def uniform(self) -> global___SimulationTemplate.VirtualBSDFBench.Sensor.SensorSamplingUniform: ...
            @property
            def automatic(self) -> global___SimulationTemplate.VirtualBSDFBench.Sensor.SensorSamplingAutomatic: ...
            def __init__(self,
                *,
                integration_angle : builtins.float = ...,
                uniform : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.Sensor.SensorSamplingUniform] = ...,
                automatic : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.Sensor.SensorSamplingAutomatic] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["automatic",b"automatic","sampling_mode",b"sampling_mode","uniform",b"uniform"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["automatic",b"automatic","integration_angle",b"integration_angle","sampling_mode",b"sampling_mode","uniform",b"uniform"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["sampling_mode",b"sampling_mode"]) -> typing.Optional[typing_extensions.Literal["uniform","automatic"]]: ...

        class RoughnessOnly(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            UNIFORM_ISOTROPIC_FIELD_NUMBER: builtins.int
            ADAPTIVE_FIELD_NUMBER: builtins.int
            @property
            def uniform_isotropic(self) -> global___SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformIsotropic:
                """oneof with adaptive"""
                pass
            @property
            def adaptive(self) -> global___SimulationTemplate.VirtualBSDFBench.SourceSamplingAdaptive: ...
            def __init__(self,
                *,
                uniform_isotropic : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformIsotropic] = ...,
                adaptive : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.SourceSamplingAdaptive] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["adaptive",b"adaptive","source_sampling",b"source_sampling","uniform_isotropic",b"uniform_isotropic"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["adaptive",b"adaptive","source_sampling",b"source_sampling","uniform_isotropic",b"uniform_isotropic"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["source_sampling",b"source_sampling"]) -> typing.Optional[typing_extensions.Literal["uniform_isotropic","adaptive"]]: ...

        class AllCharacteristics(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class Iridescence(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                UNIFORM_ISOTROPIC_FIELD_NUMBER: builtins.int
                ADAPTIVE_FIELD_NUMBER: builtins.int
                @property
                def uniform_isotropic(self) -> global___SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformIsotropic: ...
                @property
                def adaptive(self) -> global___SimulationTemplate.VirtualBSDFBench.SourceSamplingAdaptive: ...
                def __init__(self,
                    *,
                    uniform_isotropic : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformIsotropic] = ...,
                    adaptive : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.SourceSamplingAdaptive] = ...,
                    ) -> None: ...
                def HasField(self, field_name: typing_extensions.Literal["adaptive",b"adaptive","source_sampling",b"source_sampling","uniform_isotropic",b"uniform_isotropic"]) -> builtins.bool: ...
                def ClearField(self, field_name: typing_extensions.Literal["adaptive",b"adaptive","source_sampling",b"source_sampling","uniform_isotropic",b"uniform_isotropic"]) -> None: ...
                def WhichOneof(self, oneof_group: typing_extensions.Literal["source_sampling",b"source_sampling"]) -> typing.Optional[typing_extensions.Literal["uniform_isotropic","adaptive"]]: ...

            class NoIridescence(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                class Isotropic(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                    UNIFORM_ISOTROPIC_FIELD_NUMBER: builtins.int
                    ADAPTIVE_FIELD_NUMBER: builtins.int
                    @property
                    def uniform_isotropic(self) -> global___SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformIsotropic: ...
                    @property
                    def adaptive(self) -> global___SimulationTemplate.VirtualBSDFBench.SourceSamplingAdaptive: ...
                    def __init__(self,
                        *,
                        uniform_isotropic : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformIsotropic] = ...,
                        adaptive : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.SourceSamplingAdaptive] = ...,
                        ) -> None: ...
                    def HasField(self, field_name: typing_extensions.Literal["adaptive",b"adaptive","source_sampling",b"source_sampling","uniform_isotropic",b"uniform_isotropic"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing_extensions.Literal["adaptive",b"adaptive","source_sampling",b"source_sampling","uniform_isotropic",b"uniform_isotropic"]) -> None: ...
                    def WhichOneof(self, oneof_group: typing_extensions.Literal["source_sampling",b"source_sampling"]) -> typing.Optional[typing_extensions.Literal["uniform_isotropic","adaptive"]]: ...

                class Anisotropic(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                    UNIFORM_ANISOTROPIC_FIELD_NUMBER: builtins.int
                    ADAPTIVE_FIELD_NUMBER: builtins.int
                    @property
                    def uniform_anisotropic(self) -> global___SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic: ...
                    @property
                    def adaptive(self) -> global___SimulationTemplate.VirtualBSDFBench.SourceSamplingAdaptive: ...
                    def __init__(self,
                        *,
                        uniform_anisotropic : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.SourceSamplingUniformAnisotropic] = ...,
                        adaptive : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.SourceSamplingAdaptive] = ...,
                        ) -> None: ...
                    def HasField(self, field_name: typing_extensions.Literal["adaptive",b"adaptive","source_sampling",b"source_sampling","uniform_anisotropic",b"uniform_anisotropic"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing_extensions.Literal["adaptive",b"adaptive","source_sampling",b"source_sampling","uniform_anisotropic",b"uniform_anisotropic"]) -> None: ...
                    def WhichOneof(self, oneof_group: typing_extensions.Literal["source_sampling",b"source_sampling"]) -> typing.Optional[typing_extensions.Literal["uniform_anisotropic","adaptive"]]: ...

                ISOTROPIC_FIELD_NUMBER: builtins.int
                ANISOTROPIC_FIELD_NUMBER: builtins.int
                @property
                def isotropic(self) -> global___SimulationTemplate.VirtualBSDFBench.AllCharacteristics.NoIridescence.Isotropic: ...
                @property
                def anisotropic(self) -> global___SimulationTemplate.VirtualBSDFBench.AllCharacteristics.NoIridescence.Anisotropic: ...
                def __init__(self,
                    *,
                    isotropic : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.AllCharacteristics.NoIridescence.Isotropic] = ...,
                    anisotropic : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.AllCharacteristics.NoIridescence.Anisotropic] = ...,
                    ) -> None: ...
                def HasField(self, field_name: typing_extensions.Literal["anisotropic",b"anisotropic","isotropic",b"isotropic","surface_type",b"surface_type"]) -> builtins.bool: ...
                def ClearField(self, field_name: typing_extensions.Literal["anisotropic",b"anisotropic","isotropic",b"isotropic","surface_type",b"surface_type"]) -> None: ...
                def WhichOneof(self, oneof_group: typing_extensions.Literal["surface_type",b"surface_type"]) -> typing.Optional[typing_extensions.Literal["isotropic","anisotropic"]]: ...

            IS_BSDF180_FIELD_NUMBER: builtins.int
            IRIDESCENCE_FIELD_NUMBER: builtins.int
            NO_IRIDESCENCE_FIELD_NUMBER: builtins.int
            SENSOR_REFLECTION_AND_TRANSMISSION_FIELD_NUMBER: builtins.int
            is_bsdf180: builtins.bool = ...
            """Corresponds to the parameter "BSDF depends on light incidence side". When set to true, the Theta sampling for the source is defined on [0,180] instead of [0,90]."""

            @property
            def iridescence(self) -> global___SimulationTemplate.VirtualBSDFBench.AllCharacteristics.Iridescence:
                """Color depends on viewing direction"""
                pass
            @property
            def no_iridescence(self) -> global___SimulationTemplate.VirtualBSDFBench.AllCharacteristics.NoIridescence:
                """Color does not depend on viewing direction"""
                pass
            sensor_reflection_and_transmission: builtins.bool = ...
            """When set to true, it measures the reflection and transmission (theta in [0,180]). When set to false, it measures the reflection only (theta in [0,90])."""

            def __init__(self,
                *,
                is_bsdf180 : builtins.bool = ...,
                iridescence : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.AllCharacteristics.Iridescence] = ...,
                no_iridescence : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.AllCharacteristics.NoIridescence] = ...,
                sensor_reflection_and_transmission : builtins.bool = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["iridescence",b"iridescence","iridescence_mode",b"iridescence_mode","no_iridescence",b"no_iridescence"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["iridescence",b"iridescence","iridescence_mode",b"iridescence_mode","is_bsdf180",b"is_bsdf180","no_iridescence",b"no_iridescence","sensor_reflection_and_transmission",b"sensor_reflection_and_transmission"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["iridescence_mode",b"iridescence_mode"]) -> typing.Optional[typing_extensions.Literal["iridescence","no_iridescence"]]: ...

        GEOM_DISTANCE_TOLERANCE_FIELD_NUMBER: builtins.int
        MAX_IMPACT_FIELD_NUMBER: builtins.int
        WEIGHT_FIELD_NUMBER: builtins.int
        COLORIMETRIC_STANDARD_FIELD_NUMBER: builtins.int
        TEXTURE_FIELD_NUMBER: builtins.int
        ROUGHNESS_ONLY_FIELD_NUMBER: builtins.int
        ALL_CHARACTERISTICS_FIELD_NUMBER: builtins.int
        WAVELENGTHS_RANGE_FIELD_NUMBER: builtins.int
        SENSOR_FIELD_NUMBER: builtins.int
        geom_distance_tolerance: builtins.float = ...
        """Maximum distance in mm to consider two faces as tangent."""

        max_impact: builtins.int = ...
        """Defines a value to determine the maximum number of ray impacts during propagation. When a ray has interacted N times with the geometry, the propagation of the ray stops."""

        @property
        def weight(self) -> global___Weight:
            """Activates Weight. It is highly recommended to activate."""
            pass
        colorimetric_standard: global___EnumColorimetricStandard.ValueType = ...
        """Default Colorimetric Standard"""

        @property
        def texture(self) -> global___Texture:
            """Activates texture."""
            pass
        @property
        def roughness_only(self) -> global___SimulationTemplate.VirtualBSDFBench.RoughnessOnly:
            """BSDF depends on surface roughness only"""
            pass
        @property
        def all_characteristics(self) -> global___SimulationTemplate.VirtualBSDFBench.AllCharacteristics:
            """BSDF depends on all properties"""
            pass
        @property
        def wavelengths_range(self) -> ansys.api.speos.sensor.v1.common_pb2.WavelengthsRange:
            """"""
            pass
        @property
        def sensor(self) -> global___SimulationTemplate.VirtualBSDFBench.Sensor:
            """Sensor definition"""
            pass
        def __init__(self,
            *,
            geom_distance_tolerance : builtins.float = ...,
            max_impact : builtins.int = ...,
            weight : typing.Optional[global___Weight] = ...,
            colorimetric_standard : global___EnumColorimetricStandard.ValueType = ...,
            texture : typing.Optional[global___Texture] = ...,
            roughness_only : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.RoughnessOnly] = ...,
            all_characteristics : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.AllCharacteristics] = ...,
            wavelengths_range : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.WavelengthsRange] = ...,
            sensor : typing.Optional[global___SimulationTemplate.VirtualBSDFBench.Sensor] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["all_characteristics",b"all_characteristics","mode",b"mode","roughness_only",b"roughness_only","sensor",b"sensor","texture",b"texture","wavelengths_range",b"wavelengths_range","weight",b"weight"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["all_characteristics",b"all_characteristics","colorimetric_standard",b"colorimetric_standard","geom_distance_tolerance",b"geom_distance_tolerance","max_impact",b"max_impact","mode",b"mode","roughness_only",b"roughness_only","sensor",b"sensor","texture",b"texture","wavelengths_range",b"wavelengths_range","weight",b"weight"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["mode",b"mode"]) -> typing.Optional[typing_extensions.Literal["roughness_only","all_characteristics"]]: ...

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    DIRECT_MC_SIMULATION_TEMPLATE_FIELD_NUMBER: builtins.int
    INVERSE_MC_SIMULATION_TEMPLATE_FIELD_NUMBER: builtins.int
    INTERACTIVE_SIMULATION_TEMPLATE_FIELD_NUMBER: builtins.int
    VIRTUAL_BSDF_BENCH_SIMULATION_TEMPLATE_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Simulation name"""

    description: typing.Text = ...
    """Simulation description"""

    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """User defined metadata"""
        pass
    @property
    def direct_mc_simulation_template(self) -> global___DirectMCSimulationTemplate: ...
    @property
    def inverse_mc_simulation_template(self) -> global___InverseMCSimulationTemplate: ...
    @property
    def interactive_simulation_template(self) -> global___SimulationTemplate.Interactive: ...
    @property
    def virtual_bsdf_bench_simulation_template(self) -> global___SimulationTemplate.VirtualBSDFBench: ...
    def __init__(self,
        *,
        name : typing.Text = ...,
        description : typing.Text = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        direct_mc_simulation_template : typing.Optional[global___DirectMCSimulationTemplate] = ...,
        inverse_mc_simulation_template : typing.Optional[global___InverseMCSimulationTemplate] = ...,
        interactive_simulation_template : typing.Optional[global___SimulationTemplate.Interactive] = ...,
        virtual_bsdf_bench_simulation_template : typing.Optional[global___SimulationTemplate.VirtualBSDFBench] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["direct_mc_simulation_template",b"direct_mc_simulation_template","interactive_simulation_template",b"interactive_simulation_template","inverse_mc_simulation_template",b"inverse_mc_simulation_template","simulation_template",b"simulation_template","virtual_bsdf_bench_simulation_template",b"virtual_bsdf_bench_simulation_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","direct_mc_simulation_template",b"direct_mc_simulation_template","interactive_simulation_template",b"interactive_simulation_template","inverse_mc_simulation_template",b"inverse_mc_simulation_template","metadata",b"metadata","name",b"name","simulation_template",b"simulation_template","virtual_bsdf_bench_simulation_template",b"virtual_bsdf_bench_simulation_template"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["simulation_template",b"simulation_template"]) -> typing.Optional[typing_extensions.Literal["direct_mc_simulation_template","inverse_mc_simulation_template","interactive_simulation_template","virtual_bsdf_bench_simulation_template"]]: ...
global___SimulationTemplate = SimulationTemplate

class Create_Request(google.protobuf.message.Message):
    """Request to create a SimulationTemplate in SimulationTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SIMULATION_TEMPLATE_FIELD_NUMBER: builtins.int
    @property
    def simulation_template(self) -> global___SimulationTemplate:
        """SimulationTemplate containing its basic characteristics"""
        pass
    def __init__(self,
        *,
        simulation_template : typing.Optional[global___SimulationTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["simulation_template",b"simulation_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["simulation_template",b"simulation_template"]) -> None: ...
global___Create_Request = Create_Request

class Create_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SimulationTemplate created in SimulationTemplatesManager"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Create_Response = Create_Response

class Read_Request(google.protobuf.message.Message):
    """Request to read a SimulationTemplate in SimulationTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SimulationTemplate to be read"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Read_Request = Read_Request

class Read_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SIMULATION_TEMPLATE_FIELD_NUMBER: builtins.int
    @property
    def simulation_template(self) -> global___SimulationTemplate:
        """SimulationTemplate corresponding to the guid given in Read_Request"""
        pass
    def __init__(self,
        *,
        simulation_template : typing.Optional[global___SimulationTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["simulation_template",b"simulation_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["simulation_template",b"simulation_template"]) -> None: ...
global___Read_Response = Read_Response

class Update_Request(google.protobuf.message.Message):
    """Request to update a SimulationTemplate in SimulationTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    SIMULATION_TEMPLATE_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SimulationTemplate to be updated"""

    @property
    def simulation_template(self) -> global___SimulationTemplate:
        """SimulationTemplate that will be used for the update"""
        pass
    def __init__(self,
        *,
        guid : typing.Text = ...,
        simulation_template : typing.Optional[global___SimulationTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["simulation_template",b"simulation_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid","simulation_template",b"simulation_template"]) -> None: ...
global___Update_Request = Update_Request

class Update_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Update_Response = Update_Response

class Delete_Request(google.protobuf.message.Message):
    """Request to delete a SimulationTemplate in SimulationTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SimulationTemplate to be deleted"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Delete_Request = Delete_Request

class Delete_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Delete_Response = Delete_Response

class List_Request(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___List_Request = List_Request

class List_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUIDS_FIELD_NUMBER: builtins.int
    @property
    def guids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Guids of the SimulationTemplates in SimulationTemplatesManager"""
        pass
    def __init__(self,
        *,
        guids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guids",b"guids"]) -> None: ...
global___List_Response = List_Response
