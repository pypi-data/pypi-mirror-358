"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.speos.results.v1.ray_path_pb2
import ansys.api.speos.scene.v2.scene_pb2
import grpc
import typing

class ScenesManagerStub:
    """Manager for Scenes"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.scene.v2.scene_pb2.Create_Request,
        ansys.api.speos.scene.v2.scene_pb2.Create_Response] = ...
    """Create a Scene"""

    Read: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.scene.v2.scene_pb2.Read_Request,
        ansys.api.speos.scene.v2.scene_pb2.Read_Response] = ...
    """Read a Scene"""

    Update: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.scene.v2.scene_pb2.Update_Request,
        ansys.api.speos.scene.v2.scene_pb2.Update_Response] = ...
    """Update a Scene"""

    Delete: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.scene.v2.scene_pb2.Delete_Request,
        ansys.api.speos.scene.v2.scene_pb2.Delete_Response] = ...
    """Delete a Scene"""

    List: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.scene.v2.scene_pb2.List_Request,
        ansys.api.speos.scene.v2.scene_pb2.List_Response] = ...
    """List all Scenes in manager"""


class ScenesManagerServicer(metaclass=abc.ABCMeta):
    """Manager for Scenes"""
    @abc.abstractmethod
    def Create(self,
        request: ansys.api.speos.scene.v2.scene_pb2.Create_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.scene.v2.scene_pb2.Create_Response:
        """Create a Scene"""
        pass

    @abc.abstractmethod
    def Read(self,
        request: ansys.api.speos.scene.v2.scene_pb2.Read_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.scene.v2.scene_pb2.Read_Response:
        """Read a Scene"""
        pass

    @abc.abstractmethod
    def Update(self,
        request: ansys.api.speos.scene.v2.scene_pb2.Update_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.scene.v2.scene_pb2.Update_Response:
        """Update a Scene"""
        pass

    @abc.abstractmethod
    def Delete(self,
        request: ansys.api.speos.scene.v2.scene_pb2.Delete_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.scene.v2.scene_pb2.Delete_Response:
        """Delete a Scene"""
        pass

    @abc.abstractmethod
    def List(self,
        request: ansys.api.speos.scene.v2.scene_pb2.List_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.scene.v2.scene_pb2.List_Response:
        """List all Scenes in manager"""
        pass


def add_ScenesManagerServicer_to_server(servicer: ScenesManagerServicer, server: grpc.Server) -> None: ...

class SceneActionsStub:
    """Actions available on a Scene"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    LoadFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.scene.v2.scene_pb2.LoadFile_Request,
        ansys.api.speos.scene.v2.scene_pb2.LoadFile_Response] = ...
    """Load .speos file"""

    SaveFile: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.scene.v2.scene_pb2.SaveFile_Request,
        ansys.api.speos.scene.v2.scene_pb2.SaveFile_Response] = ...
    """Save .speos file"""

    GetSourceRayPaths: grpc.UnaryStreamMultiCallable[
        ansys.api.speos.scene.v2.scene_pb2.GetSourceRayPaths_Request,
        ansys.api.speos.results.v1.ray_path_pb2.RayPath] = ...
    """Get RayPaths generated by a source"""


class SceneActionsServicer(metaclass=abc.ABCMeta):
    """Actions available on a Scene"""
    @abc.abstractmethod
    def LoadFile(self,
        request: ansys.api.speos.scene.v2.scene_pb2.LoadFile_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.scene.v2.scene_pb2.LoadFile_Response:
        """Load .speos file"""
        pass

    @abc.abstractmethod
    def SaveFile(self,
        request: ansys.api.speos.scene.v2.scene_pb2.SaveFile_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.scene.v2.scene_pb2.SaveFile_Response:
        """Save .speos file"""
        pass

    @abc.abstractmethod
    def GetSourceRayPaths(self,
        request: ansys.api.speos.scene.v2.scene_pb2.GetSourceRayPaths_Request,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.speos.results.v1.ray_path_pb2.RayPath]:
        """Get RayPaths generated by a source"""
        pass


def add_SceneActionsServicer_to_server(servicer: SceneActionsServicer, server: grpc.Server) -> None: ...
