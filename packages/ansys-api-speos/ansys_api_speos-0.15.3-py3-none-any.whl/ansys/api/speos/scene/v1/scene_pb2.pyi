"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Scene(google.protobuf.message.Message):
    """Optical scene definition made of parts, optical properties, sources, sensors and simulations"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class GeoPaths(google.protobuf.message.Message):
        """Geometry path of object that will include the specific property (can be sub-scene/part/body/face). 
        Empty or "" for all geometries, or in the format : <sub-scene name>/<part name>/<body name>/<face name> (no name by default for root scene and root part).
        "part1" -> part1 of the root part in the root scene
        "part1/body1/face1" -> face1 in body1 in part1 of the root part in the root scene
        "subScene1" -> root part in the sub scene subScene1
        "subScene1/part2" -> part2 of the sub scene subScene1
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        GEO_PATHS_FIELD_NUMBER: builtins.int
        @property
        def geo_paths(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """list of geo paths"""
            pass
        def __init__(self,
            *,
            geo_paths : typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["geo_paths",b"geo_paths"]) -> None: ...

    class VOPInstance(google.protobuf.message.Message):
        """Instance of a VOP to apply on geometries of the scene"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class MetadataEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            value: typing.Text = ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        NAME_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        METADATA_FIELD_NUMBER: builtins.int
        VOP_GUID_FIELD_NUMBER: builtins.int
        GEOMETRIES_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        description: typing.Text = ...
        @property
        def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
            """User defined metadata"""
            pass
        vop_guid: typing.Text = ...
        """Guid of the element to instantiate"""

        @property
        def geometries(self) -> global___Scene.GeoPaths:
            """Geometries that will use this material"""
            pass
        def __init__(self,
            *,
            name : typing.Text = ...,
            description : typing.Text = ...,
            metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
            vop_guid : typing.Text = ...,
            geometries : typing.Optional[global___Scene.GeoPaths] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["geometries",b"geometries"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["description",b"description","geometries",b"geometries","metadata",b"metadata","name",b"name","vop_guid",b"vop_guid"]) -> None: ...

    class SOPInstance(google.protobuf.message.Message):
        """Instance of a SOP to apply on geometries of the scene"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class MetadataEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            value: typing.Text = ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        NAME_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        METADATA_FIELD_NUMBER: builtins.int
        SOP_GUID_FIELD_NUMBER: builtins.int
        GEOMETRIES_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        description: typing.Text = ...
        @property
        def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
            """User defined metadata"""
            pass
        sop_guid: typing.Text = ...
        """Guid of the element to instantiate"""

        @property
        def geometries(self) -> global___Scene.GeoPaths:
            """Geometries that will use this material"""
            pass
        def __init__(self,
            *,
            name : typing.Text = ...,
            description : typing.Text = ...,
            metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
            sop_guid : typing.Text = ...,
            geometries : typing.Optional[global___Scene.GeoPaths] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["geometries",b"geometries"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["description",b"description","geometries",b"geometries","metadata",b"metadata","name",b"name","sop_guid",b"sop_guid"]) -> None: ...

    class SourceInstance(google.protobuf.message.Message):
        """Instance of a source to add in the scene"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class IntensityProperties(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class LibraryProperties(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                class AxisSystem(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                    VALUES_FIELD_NUMBER: builtins.int
                    @property
                    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                        """orientation (Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz)"""
                        pass
                    def __init__(self,
                        *,
                        values : typing.Optional[typing.Iterable[builtins.float]] = ...,
                        ) -> None: ...
                    def ClearField(self, field_name: typing_extensions.Literal["values",b"values"]) -> None: ...

                class NormalToSurface(google.protobuf.message.Message):
                    """Define the intensity distribution as normal to the selected surface."""
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                    def __init__(self,
                        ) -> None: ...

                class NormalToUVMap(google.protobuf.message.Message):
                    """Define the intensity distribution as normal to the selected emissive surface and its orientation on the emissive surface."""
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                    def __init__(self,
                        ) -> None: ...

                EXIT_GEOMETRIES_FIELD_NUMBER: builtins.int
                AXIS_SYSTEM_FIELD_NUMBER: builtins.int
                NORMAL_TO_SURFACE_FIELD_NUMBER: builtins.int
                NORMAL_TO_UV_MAP_FIELD_NUMBER: builtins.int
                @property
                def exit_geometries(self) -> global___Scene.GeoPaths:
                    """Exit Geometries that will use this surface source"""
                    pass
                @property
                def axis_system(self) -> global___Scene.SourceInstance.IntensityProperties.LibraryProperties.AxisSystem:
                    """orientation (Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz)"""
                    pass
                @property
                def normal_to_surface(self) -> global___Scene.SourceInstance.IntensityProperties.LibraryProperties.NormalToSurface:
                    """Define the intensity distribution as normal to the selected surface."""
                    pass
                @property
                def normal_to_uv_map(self) -> global___Scene.SourceInstance.IntensityProperties.LibraryProperties.NormalToUVMap:
                    """Define the intensity distribution as normal to the selected emissive surface and its orientation on the emissive surface."""
                    pass
                def __init__(self,
                    *,
                    exit_geometries : typing.Optional[global___Scene.GeoPaths] = ...,
                    axis_system : typing.Optional[global___Scene.SourceInstance.IntensityProperties.LibraryProperties.AxisSystem] = ...,
                    normal_to_surface : typing.Optional[global___Scene.SourceInstance.IntensityProperties.LibraryProperties.NormalToSurface] = ...,
                    normal_to_uv_map : typing.Optional[global___Scene.SourceInstance.IntensityProperties.LibraryProperties.NormalToUVMap] = ...,
                    ) -> None: ...
                def HasField(self, field_name: typing_extensions.Literal["axis_system",b"axis_system","exit_geometries",b"exit_geometries","normal_to_surface",b"normal_to_surface","normal_to_uv_map",b"normal_to_uv_map","orientation",b"orientation"]) -> builtins.bool: ...
                def ClearField(self, field_name: typing_extensions.Literal["axis_system",b"axis_system","exit_geometries",b"exit_geometries","normal_to_surface",b"normal_to_surface","normal_to_uv_map",b"normal_to_uv_map","orientation",b"orientation"]) -> None: ...
                def WhichOneof(self, oneof_group: typing_extensions.Literal["orientation",b"orientation"]) -> typing.Optional[typing_extensions.Literal["axis_system","normal_to_surface","normal_to_uv_map"]]: ...

            class AsymmetricGaussianProperties(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                AXIS_SYSTEM_FIELD_NUMBER: builtins.int
                @property
                def axis_system(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                    """orientation (Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz)"""
                    pass
                def __init__(self,
                    *,
                    axis_system : typing.Optional[typing.Iterable[builtins.float]] = ...,
                    ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["axis_system",b"axis_system"]) -> None: ...

            class GaussianProperties(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                AXIS_SYSTEM_FIELD_NUMBER: builtins.int
                @property
                def axis_system(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                    """optional - orientation of the intensity distribution (Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz) - if not filled : normal to surface map."""
                    pass
                def __init__(self,
                    *,
                    axis_system : typing.Optional[typing.Iterable[builtins.float]] = ...,
                    ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["axis_system",b"axis_system"]) -> None: ...

            LIBRARY_PROPERTIES_FIELD_NUMBER: builtins.int
            ASYMMETRIC_GAUSSIAN_PROPERTIES_FIELD_NUMBER: builtins.int
            GAUSSIAN_PROPERTIES_FIELD_NUMBER: builtins.int
            @property
            def library_properties(self) -> global___Scene.SourceInstance.IntensityProperties.LibraryProperties:
                """To be filled if the intensity_guid of the source template corresponds to an IntensityTemplate of type Library"""
                pass
            @property
            def asymmetric_gaussian_properties(self) -> global___Scene.SourceInstance.IntensityProperties.AsymmetricGaussianProperties:
                """Deprecated (use gaussian_properties instead) - To be filled if the intensity_guid of the source template corresponds to an IntensityTemplate of type AsymmetricGaussian"""
                pass
            @property
            def gaussian_properties(self) -> global___Scene.SourceInstance.IntensityProperties.GaussianProperties:
                """To be filled if the intensity_guid of the source template corresponds to an IntensityTemplate of type Gaussian"""
                pass
            def __init__(self,
                *,
                library_properties : typing.Optional[global___Scene.SourceInstance.IntensityProperties.LibraryProperties] = ...,
                asymmetric_gaussian_properties : typing.Optional[global___Scene.SourceInstance.IntensityProperties.AsymmetricGaussianProperties] = ...,
                gaussian_properties : typing.Optional[global___Scene.SourceInstance.IntensityProperties.GaussianProperties] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["asymmetric_gaussian_properties",b"asymmetric_gaussian_properties","gaussian_properties",b"gaussian_properties","library_properties",b"library_properties","properties",b"properties"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["asymmetric_gaussian_properties",b"asymmetric_gaussian_properties","gaussian_properties",b"gaussian_properties","library_properties",b"library_properties","properties",b"properties"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["properties",b"properties"]) -> typing.Optional[typing_extensions.Literal["library_properties","asymmetric_gaussian_properties","gaussian_properties"]]: ...

        class LuminaireProperties(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            AXIS_SYSTEM_FIELD_NUMBER: builtins.int
            @property
            def axis_system(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                """Position of the source (Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz)"""
                pass
            def __init__(self,
                *,
                axis_system : typing.Optional[typing.Iterable[builtins.float]] = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["axis_system",b"axis_system"]) -> None: ...

        class SurfaceProperties(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class ExitanceConstantProperties(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                class GeoPath(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                    GEO_PATH_FIELD_NUMBER: builtins.int
                    REVERSE_NORMAL_FIELD_NUMBER: builtins.int
                    geo_path: typing.Text = ...
                    """Geometry that will use this surface source ("<body name>" for a whole body, or "<body name>/<face name>" for a specific face)"""

                    reverse_normal: builtins.bool = ...
                    """optional - if not set or false : normal is not reversed."""

                    def __init__(self,
                        *,
                        geo_path : typing.Text = ...,
                        reverse_normal : typing.Optional[builtins.bool] = ...,
                        ) -> None: ...
                    def HasField(self, field_name: typing_extensions.Literal["_reverse_normal",b"_reverse_normal","reverse_normal",b"reverse_normal"]) -> builtins.bool: ...
                    def ClearField(self, field_name: typing_extensions.Literal["_reverse_normal",b"_reverse_normal","geo_path",b"geo_path","reverse_normal",b"reverse_normal"]) -> None: ...
                    def WhichOneof(self, oneof_group: typing_extensions.Literal["_reverse_normal",b"_reverse_normal"]) -> typing.Optional[typing_extensions.Literal["reverse_normal"]]: ...

                GEO_PATHS_FIELD_NUMBER: builtins.int
                @property
                def geo_paths(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Scene.SourceInstance.SurfaceProperties.ExitanceConstantProperties.GeoPath]: ...
                def __init__(self,
                    *,
                    geo_paths : typing.Optional[typing.Iterable[global___Scene.SourceInstance.SurfaceProperties.ExitanceConstantProperties.GeoPath]] = ...,
                    ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["geo_paths",b"geo_paths"]) -> None: ...

            class ExitanceVariableProperties(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                AXIS_PLANE_FIELD_NUMBER: builtins.int
                @property
                def axis_plane(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                    """Position of the exitance map (Ox Oy Oz Xx Xy Xz Yx Yy Yz)"""
                    pass
                def __init__(self,
                    *,
                    axis_plane : typing.Optional[typing.Iterable[builtins.float]] = ...,
                    ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["axis_plane",b"axis_plane"]) -> None: ...

            EXITANCE_CONSTANT_PROPERTIES_FIELD_NUMBER: builtins.int
            EXITANCE_VARIABLE_PROPERTIES_FIELD_NUMBER: builtins.int
            INTENSITY_PROPERTIES_FIELD_NUMBER: builtins.int
            @property
            def exitance_constant_properties(self) -> global___Scene.SourceInstance.SurfaceProperties.ExitanceConstantProperties:
                """To be filled if the Surface SourceTemplate has ExitanceConstant"""
                pass
            @property
            def exitance_variable_properties(self) -> global___Scene.SourceInstance.SurfaceProperties.ExitanceVariableProperties:
                """To be filled if the Surface SourceTemplate has ExitanceVariable"""
                pass
            @property
            def intensity_properties(self) -> global___Scene.SourceInstance.IntensityProperties: ...
            def __init__(self,
                *,
                exitance_constant_properties : typing.Optional[global___Scene.SourceInstance.SurfaceProperties.ExitanceConstantProperties] = ...,
                exitance_variable_properties : typing.Optional[global___Scene.SourceInstance.SurfaceProperties.ExitanceVariableProperties] = ...,
                intensity_properties : typing.Optional[global___Scene.SourceInstance.IntensityProperties] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["exitanceProperties",b"exitanceProperties","exitance_constant_properties",b"exitance_constant_properties","exitance_variable_properties",b"exitance_variable_properties","intensity_properties",b"intensity_properties"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["exitanceProperties",b"exitanceProperties","exitance_constant_properties",b"exitance_constant_properties","exitance_variable_properties",b"exitance_variable_properties","intensity_properties",b"intensity_properties"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["exitanceProperties",b"exitanceProperties"]) -> typing.Optional[typing_extensions.Literal["exitance_constant_properties","exitance_variable_properties"]]: ...

        class RayFileProperties(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            AXIS_SYSTEM_FIELD_NUMBER: builtins.int
            EXIT_GEOMETRIES_FIELD_NUMBER: builtins.int
            @property
            def axis_system(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                """Position of the source (Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz)"""
                pass
            @property
            def exit_geometries(self) -> global___Scene.GeoPaths:
                """Exit Geometries that will use this rayfile source"""
                pass
            def __init__(self,
                *,
                axis_system : typing.Optional[typing.Iterable[builtins.float]] = ...,
                exit_geometries : typing.Optional[global___Scene.GeoPaths] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["exit_geometries",b"exit_geometries"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["axis_system",b"axis_system","exit_geometries",b"exit_geometries"]) -> None: ...

        class MetadataEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            value: typing.Text = ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        NAME_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        METADATA_FIELD_NUMBER: builtins.int
        SOURCE_GUID_FIELD_NUMBER: builtins.int
        LUMINAIRE_PROPERTIES_FIELD_NUMBER: builtins.int
        SURFACE_PROPERTIES_FIELD_NUMBER: builtins.int
        RAYFILE_PROPERTIES_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        description: typing.Text = ...
        @property
        def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
            """User defined metadata"""
            pass
        source_guid: typing.Text = ...
        """Guid of the SourceTemplate in SourceTemplatesManager to instantiate"""

        @property
        def luminaire_properties(self) -> global___Scene.SourceInstance.LuminaireProperties:
            """To be filled if the source_guid corresponds to a SourceTemplate of type Luminaire"""
            pass
        @property
        def surface_properties(self) -> global___Scene.SourceInstance.SurfaceProperties:
            """To be filled if the source_guid corresponds to a SourceTemplate of type Surface"""
            pass
        @property
        def rayfile_properties(self) -> global___Scene.SourceInstance.RayFileProperties:
            """To be filled if the source_guid corresponds to a SourceTemplate of type RayFile"""
            pass
        def __init__(self,
            *,
            name : typing.Text = ...,
            description : typing.Text = ...,
            metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
            source_guid : typing.Text = ...,
            luminaire_properties : typing.Optional[global___Scene.SourceInstance.LuminaireProperties] = ...,
            surface_properties : typing.Optional[global___Scene.SourceInstance.SurfaceProperties] = ...,
            rayfile_properties : typing.Optional[global___Scene.SourceInstance.RayFileProperties] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["luminaire_properties",b"luminaire_properties","properties",b"properties","rayfile_properties",b"rayfile_properties","surface_properties",b"surface_properties"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["description",b"description","luminaire_properties",b"luminaire_properties","metadata",b"metadata","name",b"name","properties",b"properties","rayfile_properties",b"rayfile_properties","source_guid",b"source_guid","surface_properties",b"surface_properties"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["properties",b"properties"]) -> typing.Optional[typing_extensions.Literal["luminaire_properties","surface_properties","rayfile_properties"]]: ...

    class SensorInstance(google.protobuf.message.Message):
        """Instance of a sensor to add in the scene"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _EnumRayFileType:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _EnumRayFileTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EnumRayFileType.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            RayFileNone: Scene.SensorInstance.EnumRayFileType.ValueType = ...  # 0
            """Generates no ray file."""

            RayFileClassic: Scene.SensorInstance.EnumRayFileType.ValueType = ...  # 1
            """Generates a ray file without polarization data."""

            RayFilePolarization: Scene.SensorInstance.EnumRayFileType.ValueType = ...  # 2
            """Generates a ray file with the polarization data for each ray."""

            RayFileTM25: Scene.SensorInstance.EnumRayFileType.ValueType = ...  # 3
            """Generates a .tm25ray file with polarization data for each ray."""

            RayFileTM25NoPolarization: Scene.SensorInstance.EnumRayFileType.ValueType = ...  # 4
            """Generates a .tm25ray file without polarization data."""

        class EnumRayFileType(_EnumRayFileType, metaclass=_EnumRayFileTypeEnumTypeWrapper):
            """Ray file types available"""
            pass

        RayFileNone: Scene.SensorInstance.EnumRayFileType.ValueType = ...  # 0
        """Generates no ray file."""

        RayFileClassic: Scene.SensorInstance.EnumRayFileType.ValueType = ...  # 1
        """Generates a ray file without polarization data."""

        RayFilePolarization: Scene.SensorInstance.EnumRayFileType.ValueType = ...  # 2
        """Generates a ray file with the polarization data for each ray."""

        RayFileTM25: Scene.SensorInstance.EnumRayFileType.ValueType = ...  # 3
        """Generates a .tm25ray file with polarization data for each ray."""

        RayFileTM25NoPolarization: Scene.SensorInstance.EnumRayFileType.ValueType = ...  # 4
        """Generates a .tm25ray file without polarization data."""


        class LayerTypeNone(google.protobuf.message.Message):
            """Includes the simulation's results in one layer."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        class LayerTypeSource(google.protobuf.message.Message):
            """Includes one layer per active source in the result."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        class LayerTypeFace(google.protobuf.message.Message):
            """Includes one layer per surface selected in the result."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class _EnumSCAFilteringType:
                ValueType = typing.NewType('ValueType', builtins.int)
                V: typing_extensions.TypeAlias = ValueType
            class _EnumSCAFilteringTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EnumSCAFilteringType.ValueType], builtins.type):
                DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
                LastImpact: Scene.SensorInstance.LayerTypeFace.EnumSCAFilteringType.ValueType = ...  # 0
                IntersectedOneTime: Scene.SensorInstance.LayerTypeFace.EnumSCAFilteringType.ValueType = ...  # 1
            class EnumSCAFilteringType(_EnumSCAFilteringType, metaclass=_EnumSCAFilteringTypeEnumTypeWrapper):
                pass

            LastImpact: Scene.SensorInstance.LayerTypeFace.EnumSCAFilteringType.ValueType = ...  # 0
            IntersectedOneTime: Scene.SensorInstance.LayerTypeFace.EnumSCAFilteringType.ValueType = ...  # 1

            class Layer(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
                NAME_FIELD_NUMBER: builtins.int
                GEOMETRIES_FIELD_NUMBER: builtins.int
                name: typing.Text = ...
                """Name of the layer"""

                @property
                def geometries(self) -> global___Scene.GeoPaths:
                    """Surface selected."""
                    pass
                def __init__(self,
                    *,
                    name : typing.Text = ...,
                    geometries : typing.Optional[global___Scene.GeoPaths] = ...,
                    ) -> None: ...
                def HasField(self, field_name: typing_extensions.Literal["geometries",b"geometries"]) -> builtins.bool: ...
                def ClearField(self, field_name: typing_extensions.Literal["geometries",b"geometries","name",b"name"]) -> None: ...

            SCA_FILTERING_MODE_FIELD_NUMBER: builtins.int
            LAYERS_FIELD_NUMBER: builtins.int
            sca_filtering_mode: global___Scene.SensorInstance.LayerTypeFace.EnumSCAFilteringType.ValueType = ...
            @property
            def layers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Scene.SensorInstance.LayerTypeFace.Layer]:
                """Layers that will be taken into account in the result."""
                pass
            def __init__(self,
                *,
                sca_filtering_mode : global___Scene.SensorInstance.LayerTypeFace.EnumSCAFilteringType.ValueType = ...,
                layers : typing.Optional[typing.Iterable[global___Scene.SensorInstance.LayerTypeFace.Layer]] = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["layers",b"layers","sca_filtering_mode",b"sca_filtering_mode"]) -> None: ...

        class LayerTypeSequence(google.protobuf.message.Message):
            """Includes one layer per sequence in the result."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class _EnumSequenceType:
                ValueType = typing.NewType('ValueType', builtins.int)
                V: typing_extensions.TypeAlias = ValueType
            class _EnumSequenceTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EnumSequenceType.ValueType], builtins.type):
                DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
                Geometries: Scene.SensorInstance.LayerTypeSequence.EnumSequenceType.ValueType = ...  # 0
                Faces: Scene.SensorInstance.LayerTypeSequence.EnumSequenceType.ValueType = ...  # 1
            class EnumSequenceType(_EnumSequenceType, metaclass=_EnumSequenceTypeEnumTypeWrapper):
                pass

            Geometries: Scene.SensorInstance.LayerTypeSequence.EnumSequenceType.ValueType = ...  # 0
            Faces: Scene.SensorInstance.LayerTypeSequence.EnumSequenceType.ValueType = ...  # 1

            MAXIMUM_NB_OF_SEQUENCE_FIELD_NUMBER: builtins.int
            DEFINE_SEQUENCE_PER_FIELD_NUMBER: builtins.int
            maximum_nb_of_sequence: builtins.int = ...
            define_sequence_per: global___Scene.SensorInstance.LayerTypeSequence.EnumSequenceType.ValueType = ...
            def __init__(self,
                *,
                maximum_nb_of_sequence : builtins.int = ...,
                define_sequence_per : global___Scene.SensorInstance.LayerTypeSequence.EnumSequenceType.ValueType = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["define_sequence_per",b"define_sequence_per","maximum_nb_of_sequence",b"maximum_nb_of_sequence"]) -> None: ...

        class LayerTypePolarization(google.protobuf.message.Message):
            """Includes one layer per Stokes parameter using the polarization parameter."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        class LayerTypeIncidenceAngle(google.protobuf.message.Message):
            """Includes one layer per range of incident angles."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            SAMPLING_FIELD_NUMBER: builtins.int
            sampling: builtins.int = ...
            def __init__(self,
                *,
                sampling : builtins.int = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["sampling",b"sampling"]) -> None: ...

        class CameraSensorProperties(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            AXIS_SYSTEM_FIELD_NUMBER: builtins.int
            TRAJECTORY_FILE_URI_FIELD_NUMBER: builtins.int
            LAYER_TYPE_NONE_FIELD_NUMBER: builtins.int
            LAYER_TYPE_SOURCE_FIELD_NUMBER: builtins.int
            @property
            def axis_system(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                """Position of the sensor (Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz)"""
                pass
            trajectory_file_uri: typing.Text = ...
            """Trajectory file, used to define the positions and orientations of the Camera sensor in time."""

            @property
            def layer_type_none(self) -> global___Scene.SensorInstance.LayerTypeNone:
                """Layer type : None"""
                pass
            @property
            def layer_type_source(self) -> global___Scene.SensorInstance.LayerTypeSource:
                """Layer type : Source"""
                pass
            def __init__(self,
                *,
                axis_system : typing.Optional[typing.Iterable[builtins.float]] = ...,
                trajectory_file_uri : typing.Text = ...,
                layer_type_none : typing.Optional[global___Scene.SensorInstance.LayerTypeNone] = ...,
                layer_type_source : typing.Optional[global___Scene.SensorInstance.LayerTypeSource] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["layer_type",b"layer_type","layer_type_none",b"layer_type_none","layer_type_source",b"layer_type_source"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["axis_system",b"axis_system","layer_type",b"layer_type","layer_type_none",b"layer_type_none","layer_type_source",b"layer_type_source","trajectory_file_uri",b"trajectory_file_uri"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["layer_type",b"layer_type"]) -> typing.Optional[typing_extensions.Literal["layer_type_none","layer_type_source"]]: ...

        class IrradianceSensorProperties(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            AXIS_SYSTEM_FIELD_NUMBER: builtins.int
            RAY_FILE_TYPE_FIELD_NUMBER: builtins.int
            LAYER_TYPE_NONE_FIELD_NUMBER: builtins.int
            LAYER_TYPE_SOURCE_FIELD_NUMBER: builtins.int
            LAYER_TYPE_FACE_FIELD_NUMBER: builtins.int
            LAYER_TYPE_SEQUENCE_FIELD_NUMBER: builtins.int
            LAYER_TYPE_POLARIZATION_FIELD_NUMBER: builtins.int
            LAYER_TYPE_INCIDENCE_ANGLE_FIELD_NUMBER: builtins.int
            INTEGRATION_DIRECTION_FIELD_NUMBER: builtins.int
            OUTPUT_FACE_GEOMETRIES_FIELD_NUMBER: builtins.int
            @property
            def axis_system(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                """Position of the sensor (Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz)"""
                pass
            ray_file_type: global___Scene.SensorInstance.EnumRayFileType.ValueType = ...
            """Choose type of ray file generated after the simulation."""

            @property
            def layer_type_none(self) -> global___Scene.SensorInstance.LayerTypeNone:
                """Layer type : None"""
                pass
            @property
            def layer_type_source(self) -> global___Scene.SensorInstance.LayerTypeSource:
                """Layer type : Source"""
                pass
            @property
            def layer_type_face(self) -> global___Scene.SensorInstance.LayerTypeFace:
                """Layer type : Face"""
                pass
            @property
            def layer_type_sequence(self) -> global___Scene.SensorInstance.LayerTypeSequence:
                """Layer type : Sequence"""
                pass
            @property
            def layer_type_polarization(self) -> global___Scene.SensorInstance.LayerTypePolarization:
                """Layer type : Polarization"""
                pass
            @property
            def layer_type_incidence_angle(self) -> global___Scene.SensorInstance.LayerTypeIncidenceAngle:
                """Layer type : Incidence angle"""
                pass
            @property
            def integration_direction(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                """Sensor global integration direction [x,y,z], optional (default direction is normal to sensor plane (anti-normal of the sensor)) and only settable for sensor template with IlluminanceTypePlanar or IlluminanceTypeSemiCylindrical as illuminance_type"""
                pass
            @property
            def output_face_geometries(self) -> global___Scene.GeoPaths:
                """List of output faces for inverse simulation optimization"""
                pass
            def __init__(self,
                *,
                axis_system : typing.Optional[typing.Iterable[builtins.float]] = ...,
                ray_file_type : global___Scene.SensorInstance.EnumRayFileType.ValueType = ...,
                layer_type_none : typing.Optional[global___Scene.SensorInstance.LayerTypeNone] = ...,
                layer_type_source : typing.Optional[global___Scene.SensorInstance.LayerTypeSource] = ...,
                layer_type_face : typing.Optional[global___Scene.SensorInstance.LayerTypeFace] = ...,
                layer_type_sequence : typing.Optional[global___Scene.SensorInstance.LayerTypeSequence] = ...,
                layer_type_polarization : typing.Optional[global___Scene.SensorInstance.LayerTypePolarization] = ...,
                layer_type_incidence_angle : typing.Optional[global___Scene.SensorInstance.LayerTypeIncidenceAngle] = ...,
                integration_direction : typing.Optional[typing.Iterable[builtins.float]] = ...,
                output_face_geometries : typing.Optional[global___Scene.GeoPaths] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["layer_type",b"layer_type","layer_type_face",b"layer_type_face","layer_type_incidence_angle",b"layer_type_incidence_angle","layer_type_none",b"layer_type_none","layer_type_polarization",b"layer_type_polarization","layer_type_sequence",b"layer_type_sequence","layer_type_source",b"layer_type_source","output_face_geometries",b"output_face_geometries"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["axis_system",b"axis_system","integration_direction",b"integration_direction","layer_type",b"layer_type","layer_type_face",b"layer_type_face","layer_type_incidence_angle",b"layer_type_incidence_angle","layer_type_none",b"layer_type_none","layer_type_polarization",b"layer_type_polarization","layer_type_sequence",b"layer_type_sequence","layer_type_source",b"layer_type_source","output_face_geometries",b"output_face_geometries","ray_file_type",b"ray_file_type"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["layer_type",b"layer_type"]) -> typing.Optional[typing_extensions.Literal["layer_type_none","layer_type_source","layer_type_face","layer_type_sequence","layer_type_polarization","layer_type_incidence_angle"]]: ...

        class RadianceSensorProperties(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            AXIS_SYSTEM_FIELD_NUMBER: builtins.int
            OBSERVER_POINT_FIELD_NUMBER: builtins.int
            LAYER_TYPE_NONE_FIELD_NUMBER: builtins.int
            LAYER_TYPE_SOURCE_FIELD_NUMBER: builtins.int
            LAYER_TYPE_FACE_FIELD_NUMBER: builtins.int
            LAYER_TYPE_SEQUENCE_FIELD_NUMBER: builtins.int
            @property
            def axis_system(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                """Position of the sensor (Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz)"""
                pass
            @property
            def observer_point(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
                """Position of the observer point (Ox Oy Oz), optional (default: focal length is used)"""
                pass
            @property
            def layer_type_none(self) -> global___Scene.SensorInstance.LayerTypeNone:
                """Layer type : None"""
                pass
            @property
            def layer_type_source(self) -> global___Scene.SensorInstance.LayerTypeSource:
                """Layer type : Source"""
                pass
            @property
            def layer_type_face(self) -> global___Scene.SensorInstance.LayerTypeFace:
                """Layer type : Face"""
                pass
            @property
            def layer_type_sequence(self) -> global___Scene.SensorInstance.LayerTypeSequence:
                """Layer type : Sequence"""
                pass
            def __init__(self,
                *,
                axis_system : typing.Optional[typing.Iterable[builtins.float]] = ...,
                observer_point : typing.Optional[typing.Iterable[builtins.float]] = ...,
                layer_type_none : typing.Optional[global___Scene.SensorInstance.LayerTypeNone] = ...,
                layer_type_source : typing.Optional[global___Scene.SensorInstance.LayerTypeSource] = ...,
                layer_type_face : typing.Optional[global___Scene.SensorInstance.LayerTypeFace] = ...,
                layer_type_sequence : typing.Optional[global___Scene.SensorInstance.LayerTypeSequence] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["layer_type",b"layer_type","layer_type_face",b"layer_type_face","layer_type_none",b"layer_type_none","layer_type_sequence",b"layer_type_sequence","layer_type_source",b"layer_type_source"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["axis_system",b"axis_system","layer_type",b"layer_type","layer_type_face",b"layer_type_face","layer_type_none",b"layer_type_none","layer_type_sequence",b"layer_type_sequence","layer_type_source",b"layer_type_source","observer_point",b"observer_point"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["layer_type",b"layer_type"]) -> typing.Optional[typing_extensions.Literal["layer_type_none","layer_type_source","layer_type_face","layer_type_sequence"]]: ...

        class MetadataEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            value: typing.Text = ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        NAME_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        METADATA_FIELD_NUMBER: builtins.int
        SENSOR_GUID_FIELD_NUMBER: builtins.int
        RESULT_FILE_NAME_FIELD_NUMBER: builtins.int
        CAMERA_SENSOR_PROPERTIES_FIELD_NUMBER: builtins.int
        IRRADIANCE_SENSOR_PROPERTIES_FIELD_NUMBER: builtins.int
        RADIANCE_SENSOR_PROPERTIES_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        description: typing.Text = ...
        @property
        def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
            """User defined metadata"""
            pass
        sensor_guid: typing.Text = ...
        """Guid of the SensorTemplate in SensorTemplatesManager to instantiate"""

        result_file_name: typing.Text = ...
        """Result file name without extention. Result files of the sensor will be based on this name."""

        @property
        def camera_sensor_properties(self) -> global___Scene.SensorInstance.CameraSensorProperties:
            """To be filled if the sensor_guid corresponds to a SensorTemplate of type CameraSensorTemplate"""
            pass
        @property
        def irradiance_sensor_properties(self) -> global___Scene.SensorInstance.IrradianceSensorProperties:
            """To be filled if the sensor_guid corresponds to a SensorTemplate of type IrradianceSensorTemplate"""
            pass
        @property
        def radiance_sensor_properties(self) -> global___Scene.SensorInstance.RadianceSensorProperties:
            """To be filled if the sensor_guid corresponds to a SensorTemplate of type SensorTemplate::Radiance"""
            pass
        def __init__(self,
            *,
            name : typing.Text = ...,
            description : typing.Text = ...,
            metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
            sensor_guid : typing.Text = ...,
            result_file_name : typing.Text = ...,
            camera_sensor_properties : typing.Optional[global___Scene.SensorInstance.CameraSensorProperties] = ...,
            irradiance_sensor_properties : typing.Optional[global___Scene.SensorInstance.IrradianceSensorProperties] = ...,
            radiance_sensor_properties : typing.Optional[global___Scene.SensorInstance.RadianceSensorProperties] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["camera_sensor_properties",b"camera_sensor_properties","irradiance_sensor_properties",b"irradiance_sensor_properties","properties",b"properties","radiance_sensor_properties",b"radiance_sensor_properties"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["camera_sensor_properties",b"camera_sensor_properties","description",b"description","irradiance_sensor_properties",b"irradiance_sensor_properties","metadata",b"metadata","name",b"name","properties",b"properties","radiance_sensor_properties",b"radiance_sensor_properties","result_file_name",b"result_file_name","sensor_guid",b"sensor_guid"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["properties",b"properties"]) -> typing.Optional[typing_extensions.Literal["camera_sensor_properties","irradiance_sensor_properties","radiance_sensor_properties"]]: ...

    class SimulationInstance(google.protobuf.message.Message):
        """Instance of a simulation to add in the scene"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class MetadataEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            value: typing.Text = ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        NAME_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        METADATA_FIELD_NUMBER: builtins.int
        SIMULATION_GUID_FIELD_NUMBER: builtins.int
        SENSOR_PATHS_FIELD_NUMBER: builtins.int
        SOURCE_PATHS_FIELD_NUMBER: builtins.int
        GEOMETRIES_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        description: typing.Text = ...
        @property
        def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
            """User defined metadata"""
            pass
        simulation_guid: typing.Text = ...
        """Guid of the element to instantiate"""

        @property
        def sensor_paths(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """Sensors that this simulation will include (empty or "" for all sensors, "<sensor name>" for a specific sensor in the current scene, or "<scene name>/<sensor name>" for a specific sensor in a specific sub scene)"""
            pass
        @property
        def source_paths(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
            """Sources that this simulation will include (empty or "" for all sources, "<source name>" for a specific source in the current scene, or "<scene name>/<source name>" for a specific source in a specific sub scene)"""
            pass
        @property
        def geometries(self) -> global___Scene.GeoPaths:
            """Geometries that this simulation will include (empty to select the root part and all the subscenes)"""
            pass
        def __init__(self,
            *,
            name : typing.Text = ...,
            description : typing.Text = ...,
            metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
            simulation_guid : typing.Text = ...,
            sensor_paths : typing.Optional[typing.Iterable[typing.Text]] = ...,
            source_paths : typing.Optional[typing.Iterable[typing.Text]] = ...,
            geometries : typing.Optional[global___Scene.GeoPaths] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["geometries",b"geometries"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["description",b"description","geometries",b"geometries","metadata",b"metadata","name",b"name","sensor_paths",b"sensor_paths","simulation_guid",b"simulation_guid","source_paths",b"source_paths"]) -> None: ...

    class SceneInstance(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class MetadataEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            value: typing.Text = ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        NAME_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        METADATA_FIELD_NUMBER: builtins.int
        SCENE_GUID_FIELD_NUMBER: builtins.int
        AXIS_SYSTEM_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        description: typing.Text = ...
        @property
        def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
            """User defined metadata"""
            pass
        scene_guid: typing.Text = ...
        """Guid of the element to instantiate"""

        @property
        def axis_system(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
            """Scene position relative to parent PartTemplate reference (Ox Oy Oz Xx Xy Xz Yx Yy Yz Zx Zy Zz)"""
            pass
        def __init__(self,
            *,
            name : typing.Text = ...,
            description : typing.Text = ...,
            metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
            scene_guid : typing.Text = ...,
            axis_system : typing.Optional[typing.Iterable[builtins.float]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["axis_system",b"axis_system","description",b"description","metadata",b"metadata","name",b"name","scene_guid",b"scene_guid"]) -> None: ...

    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    PART_GUID_FIELD_NUMBER: builtins.int
    VOPS_FIELD_NUMBER: builtins.int
    SOPS_FIELD_NUMBER: builtins.int
    SOURCES_FIELD_NUMBER: builtins.int
    SENSORS_FIELD_NUMBER: builtins.int
    SIMULATIONS_FIELD_NUMBER: builtins.int
    SCENES_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    description: typing.Text = ...
    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """User defined metadata"""
        pass
    part_guid: typing.Text = ...
    """Guid from PartsManager of the geometrical part included inside the scene"""

    @property
    def vops(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Scene.VOPInstance]:
        """The volume materials applied on geometries"""
        pass
    @property
    def sops(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Scene.SOPInstance]:
        """The surface materials applied on geometries"""
        pass
    @property
    def sources(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Scene.SourceInstance]:
        """The sources added in the scene"""
        pass
    @property
    def sensors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Scene.SensorInstance]:
        """The sensors added in the scene"""
        pass
    @property
    def simulations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Scene.SimulationInstance]:
        """The simulations added in the scene"""
        pass
    @property
    def scenes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Scene.SceneInstance]:
        """Sub scenes"""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        description : typing.Text = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        part_guid : typing.Text = ...,
        vops : typing.Optional[typing.Iterable[global___Scene.VOPInstance]] = ...,
        sops : typing.Optional[typing.Iterable[global___Scene.SOPInstance]] = ...,
        sources : typing.Optional[typing.Iterable[global___Scene.SourceInstance]] = ...,
        sensors : typing.Optional[typing.Iterable[global___Scene.SensorInstance]] = ...,
        simulations : typing.Optional[typing.Iterable[global___Scene.SimulationInstance]] = ...,
        scenes : typing.Optional[typing.Iterable[global___Scene.SceneInstance]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","metadata",b"metadata","name",b"name","part_guid",b"part_guid","scenes",b"scenes","sensors",b"sensors","simulations",b"simulations","sops",b"sops","sources",b"sources","vops",b"vops"]) -> None: ...
global___Scene = Scene

class Create_Request(google.protobuf.message.Message):
    """Request to create a Scene in ScenesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SCENE_FIELD_NUMBER: builtins.int
    @property
    def scene(self) -> global___Scene: ...
    def __init__(self,
        *,
        scene : typing.Optional[global___Scene] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["scene",b"scene"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["scene",b"scene"]) -> None: ...
global___Create_Request = Create_Request

class Create_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the Scene created in ScenesManager"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Create_Response = Create_Response

class Read_Request(google.protobuf.message.Message):
    """Request to read a Scene in ScenesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the Scene to be read"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Read_Request = Read_Request

class Read_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SCENE_FIELD_NUMBER: builtins.int
    @property
    def scene(self) -> global___Scene:
        """Scene corresponding to the guid given in Read_Request"""
        pass
    def __init__(self,
        *,
        scene : typing.Optional[global___Scene] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["scene",b"scene"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["scene",b"scene"]) -> None: ...
global___Read_Response = Read_Response

class Update_Request(google.protobuf.message.Message):
    """Request to update a Scene in ScenesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    SCENE_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the Scene to be updated"""

    @property
    def scene(self) -> global___Scene:
        """Scene that will be used for the update"""
        pass
    def __init__(self,
        *,
        guid : typing.Text = ...,
        scene : typing.Optional[global___Scene] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["scene",b"scene"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid","scene",b"scene"]) -> None: ...
global___Update_Request = Update_Request

class Update_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Update_Response = Update_Response

class Delete_Request(google.protobuf.message.Message):
    """Request to delete a Scene in ScenesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the Scene to be deleted"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Delete_Request = Delete_Request

class Delete_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Delete_Response = Delete_Response

class List_Request(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___List_Request = List_Request

class List_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUIDS_FIELD_NUMBER: builtins.int
    @property
    def guids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Guids of the Scenes in ScenesManager"""
        pass
    def __init__(self,
        *,
        guids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guids",b"guids"]) -> None: ...
global___List_Response = List_Response

class LoadFile_Request(google.protobuf.message.Message):
    """Request to LoadFile service"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    FILE_URI_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of a ScenesManager element to update"""

    file_uri: typing.Text = ...
    """File uri (path or guid from FileTransferService)"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        file_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["file_uri",b"file_uri","guid",b"guid"]) -> None: ...
global___LoadFile_Request = LoadFile_Request

class LoadFile_Response(google.protobuf.message.Message):
    """Response to LoadFile service"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___LoadFile_Response = LoadFile_Response

class SaveFile_Request(google.protobuf.message.Message):
    """Request to SaveFile service"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    FILE_URI_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of a ScenesManager element to save"""

    file_uri: typing.Text = ...
    """File uri (path or guid from FileTransferService)"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        file_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["file_uri",b"file_uri","guid",b"guid"]) -> None: ...
global___SaveFile_Request = SaveFile_Request

class SaveFile_Response(google.protobuf.message.Message):
    """Response to SaveFile service"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___SaveFile_Response = SaveFile_Response

class GetSourceRayPaths_Request(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    SOURCE_PATH_FIELD_NUMBER: builtins.int
    RAYS_NB_FIELD_NUMBER: builtins.int
    RAW_DATA_FIELD_NUMBER: builtins.int
    DISPLAY_DATA_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of a ScenesManager element"""

    source_path: typing.Text = ...
    """path to the source in the Scene : "<source name>" for a specific source in the current scene, or "<scene name>/<source name>" for a specific source in a specific sub scene"""

    rays_nb: builtins.int = ...
    """Number of rays sent by the source. Default 100"""

    raw_data: builtins.bool = ...
    """Boolean to get the wavelengths in response stream"""

    display_data: builtins.bool = ...
    """Boolean to get the colors (RGB24 format) in response stream"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        source_path : typing.Text = ...,
        rays_nb : typing.Optional[builtins.int] = ...,
        raw_data : typing.Optional[builtins.bool] = ...,
        display_data : typing.Optional[builtins.bool] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_display_data",b"_display_data","_raw_data",b"_raw_data","_rays_nb",b"_rays_nb","display_data",b"display_data","raw_data",b"raw_data","rays_nb",b"rays_nb"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_display_data",b"_display_data","_raw_data",b"_raw_data","_rays_nb",b"_rays_nb","display_data",b"display_data","guid",b"guid","raw_data",b"raw_data","rays_nb",b"rays_nb","source_path",b"source_path"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_display_data",b"_display_data"]) -> typing.Optional[typing_extensions.Literal["display_data"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_raw_data",b"_raw_data"]) -> typing.Optional[typing_extensions.Literal["raw_data"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_rays_nb",b"_rays_nb"]) -> typing.Optional[typing_extensions.Literal["rays_nb"]]: ...
global___GetSourceRayPaths_Request = GetSourceRayPaths_Request
