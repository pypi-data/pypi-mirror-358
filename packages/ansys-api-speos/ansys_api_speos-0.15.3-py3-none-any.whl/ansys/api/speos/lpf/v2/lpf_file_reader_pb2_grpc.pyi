"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.speos.lpf.v2.lpf_file_reader_pb2
import grpc
import typing

class LpfFileReader_MonoStub:
    """service to read lpf file - server can handle one reading - call CloseLpfFileName then InitLpfFileName to start another reading."""
    def __init__(self, channel: grpc.Channel) -> None: ...
    InitLpfFileName: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.InitLpfFileName_Request_Mono,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.InitLpfFileName_Response] = ...
    """Init the lpf file with its path - returns nothing"""

    GetInformation: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.GetInformation_Request_Mono,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.GetInformation_Response] = ...
    """Get information about the lpf file, for example number of traces, number of xmps..."""

    CloseLpfFileName: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.CloseLpfFileName_Request_Mono,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.CloseLpfFileName_Response] = ...
    """Close the lpf file - returns nothing"""

    Read: grpc.UnaryStreamMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Read_Request_Mono,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.RayPath] = ...
    """Read lpf file and get all the ray paths"""

    ComputeUniqueFaceId: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.ComputeUniqueFaceId_Request_Mono,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.ComputeUniqueFaceId_Response] = ...
    """Compute a unique face id from bodyContextId and faceId"""


class LpfFileReader_MonoServicer(metaclass=abc.ABCMeta):
    """service to read lpf file - server can handle one reading - call CloseLpfFileName then InitLpfFileName to start another reading."""
    @abc.abstractmethod
    def InitLpfFileName(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.InitLpfFileName_Request_Mono,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.lpf.v2.lpf_file_reader_pb2.InitLpfFileName_Response:
        """Init the lpf file with its path - returns nothing"""
        pass

    @abc.abstractmethod
    def GetInformation(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.GetInformation_Request_Mono,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.lpf.v2.lpf_file_reader_pb2.GetInformation_Response:
        """Get information about the lpf file, for example number of traces, number of xmps..."""
        pass

    @abc.abstractmethod
    def CloseLpfFileName(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.CloseLpfFileName_Request_Mono,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.lpf.v2.lpf_file_reader_pb2.CloseLpfFileName_Response:
        """Close the lpf file - returns nothing"""
        pass

    @abc.abstractmethod
    def Read(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Read_Request_Mono,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.speos.lpf.v2.lpf_file_reader_pb2.RayPath]:
        """Read lpf file and get all the ray paths"""
        pass

    @abc.abstractmethod
    def ComputeUniqueFaceId(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.ComputeUniqueFaceId_Request_Mono,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.lpf.v2.lpf_file_reader_pb2.ComputeUniqueFaceId_Response:
        """Compute a unique face id from bodyContextId and faceId"""
        pass


def add_LpfFileReader_MonoServicer_to_server(servicer: LpfFileReader_MonoServicer, server: grpc.Server) -> None: ...

class LpfFileReader_MultiStub:
    """service to read lpf file - server can handle several reading."""
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Create_Request_Multi,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Create_Response] = ...
    """Create a lpf file reader - returns its guid"""

    InitLpfFileName: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.InitLpfFileName_Request_Multi,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.InitLpfFileName_Response] = ...
    """Init the lpf file with its path - returns nothing"""

    GetInformation: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.GetInformation_Request_Multi,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.GetInformation_Response] = ...
    """Get information about the lpf file, for example number of traces, number of xmps..."""

    CloseLpfFileName: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.CloseLpfFileName_Request_Multi,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.CloseLpfFileName_Response] = ...
    """Close the lpf file - returns nothing"""

    Read: grpc.UnaryStreamMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Read_Request_Multi,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.RayPath] = ...
    """Read lpf file and get all the ray paths"""

    ComputeUniqueFaceId: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.ComputeUniqueFaceId_Request_Multi,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.ComputeUniqueFaceId_Response] = ...
    """Compute a unique face id from bodyContextId and faceId"""

    Delete: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Delete_Request_Multi,
        ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Delete_Response] = ...
    """Delete a lpf file reader - returns nothing"""


class LpfFileReader_MultiServicer(metaclass=abc.ABCMeta):
    """service to read lpf file - server can handle several reading."""
    @abc.abstractmethod
    def Create(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Create_Request_Multi,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Create_Response:
        """Create a lpf file reader - returns its guid"""
        pass

    @abc.abstractmethod
    def InitLpfFileName(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.InitLpfFileName_Request_Multi,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.lpf.v2.lpf_file_reader_pb2.InitLpfFileName_Response:
        """Init the lpf file with its path - returns nothing"""
        pass

    @abc.abstractmethod
    def GetInformation(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.GetInformation_Request_Multi,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.lpf.v2.lpf_file_reader_pb2.GetInformation_Response:
        """Get information about the lpf file, for example number of traces, number of xmps..."""
        pass

    @abc.abstractmethod
    def CloseLpfFileName(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.CloseLpfFileName_Request_Multi,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.lpf.v2.lpf_file_reader_pb2.CloseLpfFileName_Response:
        """Close the lpf file - returns nothing"""
        pass

    @abc.abstractmethod
    def Read(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Read_Request_Multi,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.speos.lpf.v2.lpf_file_reader_pb2.RayPath]:
        """Read lpf file and get all the ray paths"""
        pass

    @abc.abstractmethod
    def ComputeUniqueFaceId(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.ComputeUniqueFaceId_Request_Multi,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.lpf.v2.lpf_file_reader_pb2.ComputeUniqueFaceId_Response:
        """Compute a unique face id from bodyContextId and faceId"""
        pass

    @abc.abstractmethod
    def Delete(self,
        request: ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Delete_Request_Multi,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.lpf.v2.lpf_file_reader_pb2.Delete_Response:
        """Delete a lpf file reader - returns nothing"""
        pass


def add_LpfFileReader_MultiServicer_to_server(servicer: LpfFileReader_MultiServicer, server: grpc.Server) -> None: ...
