# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ansys.api.speos.lpf.v2 import lpf_file_reader_pb2 as ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2


class LpfFileReader_MonoStub(object):
    """service to read lpf file - server can handle one reading - call CloseLpfFileName then InitLpfFileName to start another reading.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitLpfFileName = channel.unary_unary(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Mono/InitLpfFileName',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Request_Mono.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Response.FromString,
                )
        self.GetInformation = channel.unary_unary(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Mono/GetInformation',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Request_Mono.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Response.FromString,
                )
        self.CloseLpfFileName = channel.unary_unary(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Mono/CloseLpfFileName',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Request_Mono.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Response.FromString,
                )
        self.Read = channel.unary_stream(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Mono/Read',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Read_Request_Mono.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.RayPath.FromString,
                )
        self.ComputeUniqueFaceId = channel.unary_unary(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Mono/ComputeUniqueFaceId',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Request_Mono.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Response.FromString,
                )


class LpfFileReader_MonoServicer(object):
    """service to read lpf file - server can handle one reading - call CloseLpfFileName then InitLpfFileName to start another reading.
    """

    def InitLpfFileName(self, request, context):
        """Init the lpf file with its path - returns nothing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInformation(self, request, context):
        """Get information about the lpf file, for example number of traces, number of xmps...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseLpfFileName(self, request, context):
        """Close the lpf file - returns nothing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Read lpf file and get all the ray paths
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputeUniqueFaceId(self, request, context):
        """Compute a unique face id from bodyContextId and faceId
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LpfFileReader_MonoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitLpfFileName': grpc.unary_unary_rpc_method_handler(
                    servicer.InitLpfFileName,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Request_Mono.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Response.SerializeToString,
            ),
            'GetInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInformation,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Request_Mono.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Response.SerializeToString,
            ),
            'CloseLpfFileName': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseLpfFileName,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Request_Mono.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Response.SerializeToString,
            ),
            'Read': grpc.unary_stream_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Read_Request_Mono.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.RayPath.SerializeToString,
            ),
            'ComputeUniqueFaceId': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeUniqueFaceId,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Request_Mono.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ansys.api.speos.lpf.v2.LpfFileReader_Mono', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LpfFileReader_Mono(object):
    """service to read lpf file - server can handle one reading - call CloseLpfFileName then InitLpfFileName to start another reading.
    """

    @staticmethod
    def InitLpfFileName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Mono/InitLpfFileName',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Request_Mono.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Mono/GetInformation',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Request_Mono.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseLpfFileName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Mono/CloseLpfFileName',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Request_Mono.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Mono/Read',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Read_Request_Mono.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.RayPath.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputeUniqueFaceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Mono/ComputeUniqueFaceId',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Request_Mono.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LpfFileReader_MultiStub(object):
    """service to read lpf file - server can handle several reading.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/Create',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Create_Request_Multi.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Create_Response.FromString,
                )
        self.InitLpfFileName = channel.unary_unary(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/InitLpfFileName',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Request_Multi.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Response.FromString,
                )
        self.GetInformation = channel.unary_unary(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/GetInformation',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Request_Multi.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Response.FromString,
                )
        self.CloseLpfFileName = channel.unary_unary(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/CloseLpfFileName',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Request_Multi.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Response.FromString,
                )
        self.Read = channel.unary_stream(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/Read',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Read_Request_Multi.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.RayPath.FromString,
                )
        self.ComputeUniqueFaceId = channel.unary_unary(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/ComputeUniqueFaceId',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Request_Multi.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Response.FromString,
                )
        self.Delete = channel.unary_unary(
                '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/Delete',
                request_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Delete_Request_Multi.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Delete_Response.FromString,
                )


class LpfFileReader_MultiServicer(object):
    """service to read lpf file - server can handle several reading.
    """

    def Create(self, request, context):
        """Create a lpf file reader - returns its guid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitLpfFileName(self, request, context):
        """Init the lpf file with its path - returns nothing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInformation(self, request, context):
        """Get information about the lpf file, for example number of traces, number of xmps...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseLpfFileName(self, request, context):
        """Close the lpf file - returns nothing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Read lpf file and get all the ray paths
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputeUniqueFaceId(self, request, context):
        """Compute a unique face id from bodyContextId and faceId
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Delete a lpf file reader - returns nothing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LpfFileReader_MultiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Create_Request_Multi.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Create_Response.SerializeToString,
            ),
            'InitLpfFileName': grpc.unary_unary_rpc_method_handler(
                    servicer.InitLpfFileName,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Request_Multi.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Response.SerializeToString,
            ),
            'GetInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInformation,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Request_Multi.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Response.SerializeToString,
            ),
            'CloseLpfFileName': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseLpfFileName,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Request_Multi.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Response.SerializeToString,
            ),
            'Read': grpc.unary_stream_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Read_Request_Multi.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.RayPath.SerializeToString,
            ),
            'ComputeUniqueFaceId': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeUniqueFaceId,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Request_Multi.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Response.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Delete_Request_Multi.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Delete_Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ansys.api.speos.lpf.v2.LpfFileReader_Multi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LpfFileReader_Multi(object):
    """service to read lpf file - server can handle several reading.
    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/Create',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Create_Request_Multi.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Create_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitLpfFileName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/InitLpfFileName',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Request_Multi.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.InitLpfFileName_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/GetInformation',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Request_Multi.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.GetInformation_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseLpfFileName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/CloseLpfFileName',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Request_Multi.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.CloseLpfFileName_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/Read',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Read_Request_Multi.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.RayPath.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputeUniqueFaceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/ComputeUniqueFaceId',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Request_Multi.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.ComputeUniqueFaceId_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.lpf.v2.LpfFileReader_Multi/Delete',
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Delete_Request_Multi.SerializeToString,
            ansys_dot_api_dot_speos_dot_lpf_dot_v2_dot_lpf__file__reader__pb2.Delete_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
