"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.speos.part.v1.part_pb2
import grpc

class PartsManagerStub:
    """Service to manage geometrical objects"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.part_pb2.Create_Request,
        ansys.api.speos.part.v1.part_pb2.Create_Response] = ...
    """Create a new part"""

    Read: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.part_pb2.Read_Request,
        ansys.api.speos.part.v1.part_pb2.Read_Response] = ...
    """Read a part"""

    Update: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.part_pb2.Update_Request,
        ansys.api.speos.part.v1.part_pb2.Update_Response] = ...
    """Update a part"""

    Delete: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.part_pb2.Delete_Request,
        ansys.api.speos.part.v1.part_pb2.Delete_Response] = ...
    """Delete a part"""

    List: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.part_pb2.List_Request,
        ansys.api.speos.part.v1.part_pb2.List_Response] = ...
    """List all parts in manager"""

    ReadAll: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.part_pb2.ReadAll_Request,
        ansys.api.speos.part.v1.part_pb2.ReadAll_Response] = ...
    """Read the whole database, use a field mask in message grpc request metadata (key = read_masks) to only get needed fields.
    i.e.: parts.*.name -> would only return the names of the bodies in the message
    """


class PartsManagerServicer(metaclass=abc.ABCMeta):
    """Service to manage geometrical objects"""
    @abc.abstractmethod
    def Create(self,
        request: ansys.api.speos.part.v1.part_pb2.Create_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.part_pb2.Create_Response:
        """Create a new part"""
        pass

    @abc.abstractmethod
    def Read(self,
        request: ansys.api.speos.part.v1.part_pb2.Read_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.part_pb2.Read_Response:
        """Read a part"""
        pass

    @abc.abstractmethod
    def Update(self,
        request: ansys.api.speos.part.v1.part_pb2.Update_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.part_pb2.Update_Response:
        """Update a part"""
        pass

    @abc.abstractmethod
    def Delete(self,
        request: ansys.api.speos.part.v1.part_pb2.Delete_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.part_pb2.Delete_Response:
        """Delete a part"""
        pass

    @abc.abstractmethod
    def List(self,
        request: ansys.api.speos.part.v1.part_pb2.List_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.part_pb2.List_Response:
        """List all parts in manager"""
        pass

    @abc.abstractmethod
    def ReadAll(self,
        request: ansys.api.speos.part.v1.part_pb2.ReadAll_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.part_pb2.ReadAll_Response:
        """Read the whole database, use a field mask in message grpc request metadata (key = read_masks) to only get needed fields.
        i.e.: parts.*.name -> would only return the names of the bodies in the message
        """
        pass


def add_PartsManagerServicer_to_server(servicer: PartsManagerServicer, server: grpc.Server) -> None: ...

class PartActionsStub:
    """Actions available on a Part"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    pass


class PartActionsServicer(metaclass=abc.ABCMeta):
    """Actions available on a Part"""
    pass


def add_PartActionsServicer_to_server(servicer: PartActionsServicer, server: grpc.Server) -> None: ...
