"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.speos.part.v1.face_pb2
import grpc
import typing

class FacesManagerStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.face_pb2.Create_Request,
        ansys.api.speos.part.v1.face_pb2.Create_Response] = ...
    """Create a new face"""

    Read: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.face_pb2.Read_Request,
        ansys.api.speos.part.v1.face_pb2.Read_Response] = ...
    """Read a face"""

    Update: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.face_pb2.Update_Request,
        ansys.api.speos.part.v1.face_pb2.Update_Response] = ...
    """Update a face"""

    Delete: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.face_pb2.Delete_Request,
        ansys.api.speos.part.v1.face_pb2.Delete_Response] = ...
    """Delete a face"""

    List: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.face_pb2.List_Request,
        ansys.api.speos.part.v1.face_pb2.List_Response] = ...
    """List all faces in manager"""


class FacesManagerServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Create(self,
        request: ansys.api.speos.part.v1.face_pb2.Create_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.face_pb2.Create_Response:
        """Create a new face"""
        pass

    @abc.abstractmethod
    def Read(self,
        request: ansys.api.speos.part.v1.face_pb2.Read_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.face_pb2.Read_Response:
        """Read a face"""
        pass

    @abc.abstractmethod
    def Update(self,
        request: ansys.api.speos.part.v1.face_pb2.Update_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.face_pb2.Update_Response:
        """Update a face"""
        pass

    @abc.abstractmethod
    def Delete(self,
        request: ansys.api.speos.part.v1.face_pb2.Delete_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.face_pb2.Delete_Response:
        """Delete a face"""
        pass

    @abc.abstractmethod
    def List(self,
        request: ansys.api.speos.part.v1.face_pb2.List_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.face_pb2.List_Response:
        """List all faces in manager"""
        pass


def add_FacesManagerServicer_to_server(servicer: FacesManagerServicer, server: grpc.Server) -> None: ...

class FaceActionsStub:
    """Actions available on a face"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    ReserveFaces: grpc.StreamStreamMultiCallable[
        ansys.api.speos.part.v1.face_pb2.ReserveFace_Request,
        ansys.api.speos.part.v1.face_pb2.ReserveFace_Response] = ...
    """allocate faces before uploading them.
    to have maximum benefit, only the name, description and metadata should be filled
    """

    Upload: grpc.StreamUnaryMultiCallable[
        ansys.api.speos.part.v1.face_pb2.Chunk,
        ansys.api.speos.part.v1.face_pb2.Upload_Response] = ...
    """Update a face via streaming"""

    Download: grpc.UnaryStreamMultiCallable[
        ansys.api.speos.part.v1.face_pb2.Download_Request,
        ansys.api.speos.part.v1.face_pb2.Chunk] = ...
    """Read a face via streaming"""


class FaceActionsServicer(metaclass=abc.ABCMeta):
    """Actions available on a face"""
    @abc.abstractmethod
    def ReserveFaces(self,
        request: typing.Iterator[ansys.api.speos.part.v1.face_pb2.ReserveFace_Request],
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.speos.part.v1.face_pb2.ReserveFace_Response]:
        """allocate faces before uploading them.
        to have maximum benefit, only the name, description and metadata should be filled
        """
        pass

    @abc.abstractmethod
    def Upload(self,
        request: typing.Iterator[ansys.api.speos.part.v1.face_pb2.Chunk],
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.face_pb2.Upload_Response:
        """Update a face via streaming"""
        pass

    @abc.abstractmethod
    def Download(self,
        request: ansys.api.speos.part.v1.face_pb2.Download_Request,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.speos.part.v1.face_pb2.Chunk]:
        """Read a face via streaming"""
        pass


def add_FaceActionsServicer_to_server(servicer: FaceActionsServicer, server: grpc.Server) -> None: ...
