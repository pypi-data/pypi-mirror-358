"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.speos.part.v1.body_pb2
import grpc

class BodiesManagerStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.body_pb2.Create_Request,
        ansys.api.speos.part.v1.body_pb2.Create_Response] = ...
    """Create a new body"""

    Read: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.body_pb2.Read_Request,
        ansys.api.speos.part.v1.body_pb2.Read_Response] = ...
    """Read a body"""

    Update: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.body_pb2.Update_Request,
        ansys.api.speos.part.v1.body_pb2.Update_Response] = ...
    """Update a body"""

    Delete: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.body_pb2.Delete_Request,
        ansys.api.speos.part.v1.body_pb2.Delete_Response] = ...
    """Delete a body"""

    List: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.body_pb2.List_Request,
        ansys.api.speos.part.v1.body_pb2.List_Response] = ...
    """List all bodies in manager"""

    ReadAll: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.part.v1.body_pb2.ReadAll_Request,
        ansys.api.speos.part.v1.body_pb2.ReadAll_Response] = ...
    """Read the whole database, use a field mask in message grpc request metadata (key = read_masks) to only get needed fields.
    i.e.: bodies.*.name -> would only return the names of the bodies in the message
    """


class BodiesManagerServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Create(self,
        request: ansys.api.speos.part.v1.body_pb2.Create_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.body_pb2.Create_Response:
        """Create a new body"""
        pass

    @abc.abstractmethod
    def Read(self,
        request: ansys.api.speos.part.v1.body_pb2.Read_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.body_pb2.Read_Response:
        """Read a body"""
        pass

    @abc.abstractmethod
    def Update(self,
        request: ansys.api.speos.part.v1.body_pb2.Update_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.body_pb2.Update_Response:
        """Update a body"""
        pass

    @abc.abstractmethod
    def Delete(self,
        request: ansys.api.speos.part.v1.body_pb2.Delete_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.body_pb2.Delete_Response:
        """Delete a body"""
        pass

    @abc.abstractmethod
    def List(self,
        request: ansys.api.speos.part.v1.body_pb2.List_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.body_pb2.List_Response:
        """List all bodies in manager"""
        pass

    @abc.abstractmethod
    def ReadAll(self,
        request: ansys.api.speos.part.v1.body_pb2.ReadAll_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.part.v1.body_pb2.ReadAll_Response:
        """Read the whole database, use a field mask in message grpc request metadata (key = read_masks) to only get needed fields.
        i.e.: bodies.*.name -> would only return the names of the bodies in the message
        """
        pass


def add_BodiesManagerServicer_to_server(servicer: BodiesManagerServicer, server: grpc.Server) -> None: ...

class BodyActionsStub:
    """Actions available on a body"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    pass


class BodyActionsServicer(metaclass=abc.ABCMeta):
    """Actions available on a body"""
    pass


def add_BodyActionsServicer_to_server(servicer: BodyActionsServicer, server: grpc.Server) -> None: ...
