"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Face(google.protobuf.message.Message):
    """Face definition with meshing information"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class MeshData(google.protobuf.message.Message):
        """Store named data on meshed"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        NAME_FIELD_NUMBER: builtins.int
        DATA_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        """Identifier name (uv, temperature...)"""

        @property
        def data(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
            """Raw data for each mesh"""
            pass
        def __init__(self,
            *,
            name : typing.Text = ...,
            data : typing.Optional[typing.Iterable[builtins.float]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["data",b"data","name",b"name"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    VERTICES_FIELD_NUMBER: builtins.int
    FACETS_FIELD_NUMBER: builtins.int
    NORMALS_FIELD_NUMBER: builtins.int
    VERTICES_DATA_FIELD_NUMBER: builtins.int
    FACETS_DATA_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    description: typing.Text = ...
    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """user defined metadata"""
        pass
    @property
    def vertices(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """coordinates of all points (p1x p1y p1z p2x p2y p2z ...)"""
        pass
    @property
    def facets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """indexes of points for all triangles (t1_1 t1_2 t1_3 t2_1 t2_2 t2_3 ...)"""
        pass
    @property
    def normals(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """normal vector for all points (n1x n1y n1z n2x n2y n2z ...)"""
        pass
    @property
    def vertices_data(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Face.MeshData]:
        """List of data applied to vertices (like texture coordinates uv)"""
        pass
    @property
    def facets_data(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Face.MeshData]:
        """List of data applied to facets (like temperature)"""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        description : typing.Text = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        vertices : typing.Optional[typing.Iterable[builtins.float]] = ...,
        facets : typing.Optional[typing.Iterable[builtins.int]] = ...,
        normals : typing.Optional[typing.Iterable[builtins.float]] = ...,
        vertices_data : typing.Optional[typing.Iterable[global___Face.MeshData]] = ...,
        facets_data : typing.Optional[typing.Iterable[global___Face.MeshData]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","facets",b"facets","facets_data",b"facets_data","metadata",b"metadata","name",b"name","normals",b"normals","vertices",b"vertices","vertices_data",b"vertices_data"]) -> None: ...
global___Face = Face

class Create_Request(google.protobuf.message.Message):
    """Request to create a face"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FACE_FIELD_NUMBER: builtins.int
    @property
    def face(self) -> global___Face:
        """face to create"""
        pass
    def __init__(self,
        *,
        face : typing.Optional[global___Face] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["face",b"face"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["face",b"face"]) -> None: ...
global___Create_Request = Create_Request

class Create_Response(google.protobuf.message.Message):
    """Response to create a face"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the created face"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Create_Response = Create_Response

class Read_Request(google.protobuf.message.Message):
    """Request to read a face"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the face to be read"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Read_Request = Read_Request

class Read_Response(google.protobuf.message.Message):
    """Response to read a face"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FACE_FIELD_NUMBER: builtins.int
    @property
    def face(self) -> global___Face:
        """face corresponding to the guid given in Read_Request"""
        pass
    def __init__(self,
        *,
        face : typing.Optional[global___Face] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["face",b"face"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["face",b"face"]) -> None: ...
global___Read_Response = Read_Response

class Update_Request(google.protobuf.message.Message):
    """Request to update a face"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    FACE_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the face to be updated"""

    @property
    def face(self) -> global___Face:
        """New face that will be used for the update"""
        pass
    def __init__(self,
        *,
        guid : typing.Text = ...,
        face : typing.Optional[global___Face] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["face",b"face"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["face",b"face","guid",b"guid"]) -> None: ...
global___Update_Request = Update_Request

class Update_Response(google.protobuf.message.Message):
    """Response to update a face"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Update_Response = Update_Response

class Delete_Request(google.protobuf.message.Message):
    """Request to delete a face"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the face to be deleted"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Delete_Request = Delete_Request

class Delete_Response(google.protobuf.message.Message):
    """Response to delete a face"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Delete_Response = Delete_Response

class List_Request(google.protobuf.message.Message):
    """Request to list all faces"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___List_Request = List_Request

class List_Response(google.protobuf.message.Message):
    """Response to list all faces"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUIDS_FIELD_NUMBER: builtins.int
    @property
    def guids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Guids of all faces"""
        pass
    def __init__(self,
        *,
        guids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guids",b"guids"]) -> None: ...
global___List_Response = List_Response

class Chunk(google.protobuf.message.Message):
    """Chunk of a Face"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class FaceHeader(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class MetadataEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            value: typing.Text = ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        GUID_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        METADATA_FIELD_NUMBER: builtins.int
        SIZES_FIELD_NUMBER: builtins.int
        guid: typing.Text = ...
        """Guid of a FacesManager element - Used for FaceActions.Upload rpc"""

        name: typing.Text = ...
        description: typing.Text = ...
        @property
        def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]: ...
        @property
        def sizes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """vectors sizes in Face: (vertices_normals_size, facets_size, vertices_data_size, facets_data_size) - vertices and normals vectors have same size, therefore they are grouped in vertices_normals_size"""
            pass
        def __init__(self,
            *,
            guid : typing.Text = ...,
            name : typing.Text = ...,
            description : typing.Text = ...,
            metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
            sizes : typing.Optional[typing.Iterable[builtins.int]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["description",b"description","guid",b"guid","metadata",b"metadata","name",b"name","sizes",b"sizes"]) -> None: ...

    class Vertices(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        DATA_FIELD_NUMBER: builtins.int
        @property
        def data(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        def __init__(self,
            *,
            data : typing.Optional[typing.Iterable[builtins.float]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["data",b"data"]) -> None: ...

    class Facets(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        DATA_FIELD_NUMBER: builtins.int
        @property
        def data(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
        def __init__(self,
            *,
            data : typing.Optional[typing.Iterable[builtins.int]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["data",b"data"]) -> None: ...

    class Normals(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        DATA_FIELD_NUMBER: builtins.int
        @property
        def data(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        def __init__(self,
            *,
            data : typing.Optional[typing.Iterable[builtins.float]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["data",b"data"]) -> None: ...

    class VerticesData(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        NEW_LAYER_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        SIZE_FIELD_NUMBER: builtins.int
        DATA_FIELD_NUMBER: builtins.int
        new_layer: builtins.bool = ...
        """Boolean to express a new layer (MeshData) for vertices_data."""

        name: typing.Text = ...
        """Identifier name (uv, temperature...)"""

        size: builtins.int = ...
        """Total size for vector in MeshData: data_size"""

        @property
        def data(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
            """Raw data for each vertice"""
            pass
        def __init__(self,
            *,
            new_layer : builtins.bool = ...,
            name : typing.Text = ...,
            size : builtins.int = ...,
            data : typing.Optional[typing.Iterable[builtins.float]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["data",b"data","name",b"name","new_layer",b"new_layer","size",b"size"]) -> None: ...

    class FacetsData(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        NEW_LAYER_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        SIZE_FIELD_NUMBER: builtins.int
        DATA_FIELD_NUMBER: builtins.int
        new_layer: builtins.bool = ...
        """Boolean to express a new layer (MeshData) for facets_data."""

        name: typing.Text = ...
        """Identifier name (uv, temperature...)"""

        size: builtins.int = ...
        """Total size for vector in MeshData: data_size"""

        @property
        def data(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
            """Raw data for each facet"""
            pass
        def __init__(self,
            *,
            new_layer : builtins.bool = ...,
            name : typing.Text = ...,
            size : builtins.int = ...,
            data : typing.Optional[typing.Iterable[builtins.float]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["data",b"data","name",b"name","new_layer",b"new_layer","size",b"size"]) -> None: ...

    FACE_HEADER_FIELD_NUMBER: builtins.int
    VERTICES_FIELD_NUMBER: builtins.int
    FACETS_FIELD_NUMBER: builtins.int
    NORMALS_FIELD_NUMBER: builtins.int
    VERTICES_DATA_FIELD_NUMBER: builtins.int
    FACETS_DATA_FIELD_NUMBER: builtins.int
    @property
    def face_header(self) -> global___Chunk.FaceHeader:
        """Common face data - Field used only in first Chunk (to take advantage of vectors sizes) - If several faces are uploaded/downloaded, then this message determines the start of a new face streaming."""
        pass
    @property
    def vertices(self) -> global___Chunk.Vertices:
        """coordinates of all points (p1x p1y p1z p2x p2y p2z ...)"""
        pass
    @property
    def facets(self) -> global___Chunk.Facets:
        """indexes of points for all triangles (t1_1 t1_2 t1_3 t2_1 t2_2 t2_3 ...)"""
        pass
    @property
    def normals(self) -> global___Chunk.Normals:
        """normal vector for all points (n1x n1y n1z n2x n2y n2z ...)"""
        pass
    @property
    def vertices_data(self) -> global___Chunk.VerticesData:
        """List of data applied to vertices (like texture coordinates uv)"""
        pass
    @property
    def facets_data(self) -> global___Chunk.FacetsData:
        """List of data applied to facets (like temperature)"""
        pass
    def __init__(self,
        *,
        face_header : typing.Optional[global___Chunk.FaceHeader] = ...,
        vertices : typing.Optional[global___Chunk.Vertices] = ...,
        facets : typing.Optional[global___Chunk.Facets] = ...,
        normals : typing.Optional[global___Chunk.Normals] = ...,
        vertices_data : typing.Optional[global___Chunk.VerticesData] = ...,
        facets_data : typing.Optional[global___Chunk.FacetsData] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data",b"data","face_header",b"face_header","facets",b"facets","facets_data",b"facets_data","normals",b"normals","vertices",b"vertices","vertices_data",b"vertices_data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["data",b"data","face_header",b"face_header","facets",b"facets","facets_data",b"facets_data","normals",b"normals","vertices",b"vertices","vertices_data",b"vertices_data"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["data",b"data"]) -> typing.Optional[typing_extensions.Literal["face_header","vertices","facets","normals","vertices_data","facets_data"]]: ...
global___Chunk = Chunk

class Upload_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Upload_Response = Upload_Response

class Download_Request(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    GUIDS_FIELD_NUMBER: builtins.int
    ONLY_FACE_HEADER_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of a FacesManager element"""

    @property
    def guids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Guids of FacesManager elements to download."""
        pass
    only_face_header: builtins.bool = ...
    """If this optional boolean is set to true, only the FaceHeader will be returned in answer stream."""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        guids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        only_face_header : typing.Optional[builtins.bool] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_only_face_header",b"_only_face_header","only_face_header",b"only_face_header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_only_face_header",b"_only_face_header","guid",b"guid","guids",b"guids","only_face_header",b"only_face_header"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_only_face_header",b"_only_face_header"]) -> typing.Optional[typing_extensions.Literal["only_face_header"]]: ...
global___Download_Request = Download_Request

class ReserveFace_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUIDS_FIELD_NUMBER: builtins.int
    @property
    def guids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """guids of the created faces, in the order sent"""
        pass
    def __init__(self,
        *,
        guids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guids",b"guids"]) -> None: ...
global___ReserveFace_Response = ReserveFace_Response

class ReserveFace_Request(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FACES_FIELD_NUMBER: builtins.int
    @property
    def faces(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Face]:
        """repeated face headers"""
        pass
    def __init__(self,
        *,
        faces : typing.Optional[typing.Iterable[global___Face]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["faces",b"faces"]) -> None: ...
global___ReserveFace_Request = ReserveFace_Request
