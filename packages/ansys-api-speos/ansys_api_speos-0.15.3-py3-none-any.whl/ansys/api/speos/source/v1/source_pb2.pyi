"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import ansys.api.speos.common.v1.data_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class SourceTemplate(google.protobuf.message.Message):
    """Source template with its basic characteristics"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class FromIntensityFile(google.protobuf.message.Message):
        """Take flux from intensity file provided"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class Luminous(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        LUMINOUS_VALUE_FIELD_NUMBER: builtins.int
        luminous_value: builtins.float = ...
        """Luminous flux in lumens"""

        def __init__(self,
            *,
            luminous_value : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["luminous_value",b"luminous_value"]) -> None: ...

    class Radiant(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        RADIANT_VALUE_FIELD_NUMBER: builtins.int
        radiant_value: builtins.float = ...
        """Radiant flux in watts"""

        def __init__(self,
            *,
            radiant_value : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["radiant_value",b"radiant_value"]) -> None: ...

    class LuminousIntensity(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        LUMINOUS_INTENSITY_VALUE_FIELD_NUMBER: builtins.int
        luminous_intensity_value: builtins.float = ...
        """Luminous intensity in candelas"""

        def __init__(self,
            *,
            luminous_intensity_value : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["luminous_intensity_value",b"luminous_intensity_value"]) -> None: ...

    class FromRayFile(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    class Surface(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class ExitanceVariable(google.protobuf.message.Message):
            """Exitance messages"""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            EXITANCE_XMP_FILE_URI_FIELD_NUMBER: builtins.int
            exitance_xmp_file_uri: typing.Text = ...
            """XMP file describing exitance, if spectral, spectrum is not needed in source definition"""

            def __init__(self,
                *,
                exitance_xmp_file_uri : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["exitance_xmp_file_uri",b"exitance_xmp_file_uri"]) -> None: ...

        class ExitanceConstant(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        class SpectrumFromXMPFile(google.protobuf.message.Message):
            """Take spectrum from xmp file provided"""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        FLUX_FROM_INTENSITY_FILE_FIELD_NUMBER: builtins.int
        LUMINOUS_FLUX_FIELD_NUMBER: builtins.int
        RADIANT_FLUX_FIELD_NUMBER: builtins.int
        LUMINOUS_INTENSITY_FLUX_FIELD_NUMBER: builtins.int
        INTENSITY_GUID_FIELD_NUMBER: builtins.int
        EXITANCE_CONSTANT_FIELD_NUMBER: builtins.int
        EXITANCE_VARIABLE_FIELD_NUMBER: builtins.int
        SPECTRUM_FROM_XMP_FILE_FIELD_NUMBER: builtins.int
        SPECTRUM_GUID_FIELD_NUMBER: builtins.int
        @property
        def flux_from_intensity_file(self) -> global___SourceTemplate.FromIntensityFile:
            """Take flux from intensity file provided"""
            pass
        @property
        def luminous_flux(self) -> global___SourceTemplate.Luminous:
            """Luminous flux in lumens"""
            pass
        @property
        def radiant_flux(self) -> global___SourceTemplate.Radiant:
            """Radiant flux in watts"""
            pass
        @property
        def luminous_intensity_flux(self) -> global___SourceTemplate.LuminousIntensity:
            """Luminous intensity in candelas"""
            pass
        intensity_guid: typing.Text = ...
        """Intensity guid in intensity manager"""

        @property
        def exitance_constant(self) -> global___SourceTemplate.Surface.ExitanceConstant:
            """Constant"""
            pass
        @property
        def exitance_variable(self) -> global___SourceTemplate.Surface.ExitanceVariable:
            """Taken from XMP map"""
            pass
        @property
        def spectrum_from_xmp_file(self) -> global___SourceTemplate.Surface.SpectrumFromXMPFile:
            """Take spectrum from xmp file provided"""
            pass
        spectrum_guid: typing.Text = ...
        """Spectrum guid in spectrum manager"""

        def __init__(self,
            *,
            flux_from_intensity_file : typing.Optional[global___SourceTemplate.FromIntensityFile] = ...,
            luminous_flux : typing.Optional[global___SourceTemplate.Luminous] = ...,
            radiant_flux : typing.Optional[global___SourceTemplate.Radiant] = ...,
            luminous_intensity_flux : typing.Optional[global___SourceTemplate.LuminousIntensity] = ...,
            intensity_guid : typing.Text = ...,
            exitance_constant : typing.Optional[global___SourceTemplate.Surface.ExitanceConstant] = ...,
            exitance_variable : typing.Optional[global___SourceTemplate.Surface.ExitanceVariable] = ...,
            spectrum_from_xmp_file : typing.Optional[global___SourceTemplate.Surface.SpectrumFromXMPFile] = ...,
            spectrum_guid : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["exitance",b"exitance","exitance_constant",b"exitance_constant","exitance_variable",b"exitance_variable","flux",b"flux","flux_from_intensity_file",b"flux_from_intensity_file","luminous_flux",b"luminous_flux","luminous_intensity_flux",b"luminous_intensity_flux","radiant_flux",b"radiant_flux","spectrum",b"spectrum","spectrum_from_xmp_file",b"spectrum_from_xmp_file","spectrum_guid",b"spectrum_guid"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["exitance",b"exitance","exitance_constant",b"exitance_constant","exitance_variable",b"exitance_variable","flux",b"flux","flux_from_intensity_file",b"flux_from_intensity_file","intensity_guid",b"intensity_guid","luminous_flux",b"luminous_flux","luminous_intensity_flux",b"luminous_intensity_flux","radiant_flux",b"radiant_flux","spectrum",b"spectrum","spectrum_from_xmp_file",b"spectrum_from_xmp_file","spectrum_guid",b"spectrum_guid"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["exitance",b"exitance"]) -> typing.Optional[typing_extensions.Literal["exitance_constant","exitance_variable"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["flux",b"flux"]) -> typing.Optional[typing_extensions.Literal["flux_from_intensity_file","luminous_flux","radiant_flux","luminous_intensity_flux"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["spectrum",b"spectrum"]) -> typing.Optional[typing_extensions.Literal["spectrum_from_xmp_file","spectrum_guid"]]: ...

    class Luminaire(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FLUX_FROM_INTENSITY_FILE_FIELD_NUMBER: builtins.int
        LUMINOUS_FLUX_FIELD_NUMBER: builtins.int
        RADIANT_FLUX_FIELD_NUMBER: builtins.int
        INTENSITY_FILE_URI_FIELD_NUMBER: builtins.int
        SPECTRUM_GUID_FIELD_NUMBER: builtins.int
        @property
        def flux_from_intensity_file(self) -> global___SourceTemplate.FromIntensityFile:
            """Take flux from intensity file provided"""
            pass
        @property
        def luminous_flux(self) -> global___SourceTemplate.Luminous:
            """Luminous flux in lumens, value >=0"""
            pass
        @property
        def radiant_flux(self) -> global___SourceTemplate.Radiant:
            """Radiant flux in watts, value >=0"""
            pass
        intensity_file_uri: typing.Text = ...
        """IES or EULUMDAT format file uri"""

        spectrum_guid: typing.Text = ...
        """Spectrum guid in spectrum manager"""

        def __init__(self,
            *,
            flux_from_intensity_file : typing.Optional[global___SourceTemplate.FromIntensityFile] = ...,
            luminous_flux : typing.Optional[global___SourceTemplate.Luminous] = ...,
            radiant_flux : typing.Optional[global___SourceTemplate.Radiant] = ...,
            intensity_file_uri : typing.Text = ...,
            spectrum_guid : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["flux",b"flux","flux_from_intensity_file",b"flux_from_intensity_file","luminous_flux",b"luminous_flux","radiant_flux",b"radiant_flux"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["flux",b"flux","flux_from_intensity_file",b"flux_from_intensity_file","intensity_file_uri",b"intensity_file_uri","luminous_flux",b"luminous_flux","radiant_flux",b"radiant_flux","spectrum_guid",b"spectrum_guid"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["flux",b"flux"]) -> typing.Optional[typing_extensions.Literal["flux_from_intensity_file","luminous_flux","radiant_flux"]]: ...

    class RayFile(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class SpectrumFromRayFile(google.protobuf.message.Message):
            """Spectrum messages"""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        RAY_FILE_URI_FIELD_NUMBER: builtins.int
        FLUX_FROM_RAY_FILE_FIELD_NUMBER: builtins.int
        LUMINOUS_FLUX_FIELD_NUMBER: builtins.int
        RADIANT_FLUX_FIELD_NUMBER: builtins.int
        SPECTRUM_FROM_RAY_FILE_FIELD_NUMBER: builtins.int
        SPECTRUM_GUID_FIELD_NUMBER: builtins.int
        ray_file_uri: typing.Text = ...
        """Rayfile format file uri (.ray or .tm25ray files expected)"""

        @property
        def flux_from_ray_file(self) -> global___SourceTemplate.FromRayFile:
            """Take flux from ray file provided"""
            pass
        @property
        def luminous_flux(self) -> global___SourceTemplate.Luminous:
            """Luminous flux in lumens, value >=0"""
            pass
        @property
        def radiant_flux(self) -> global___SourceTemplate.Radiant:
            """Radiant flux in watts, value >=0"""
            pass
        @property
        def spectrum_from_ray_file(self) -> global___SourceTemplate.RayFile.SpectrumFromRayFile:
            """Take spectrum from ray file provided"""
            pass
        spectrum_guid: typing.Text = ...
        """Spectrum guid in spectrum manager"""

        def __init__(self,
            *,
            ray_file_uri : typing.Text = ...,
            flux_from_ray_file : typing.Optional[global___SourceTemplate.FromRayFile] = ...,
            luminous_flux : typing.Optional[global___SourceTemplate.Luminous] = ...,
            radiant_flux : typing.Optional[global___SourceTemplate.Radiant] = ...,
            spectrum_from_ray_file : typing.Optional[global___SourceTemplate.RayFile.SpectrumFromRayFile] = ...,
            spectrum_guid : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["flux",b"flux","flux_from_ray_file",b"flux_from_ray_file","luminous_flux",b"luminous_flux","radiant_flux",b"radiant_flux","spectrum",b"spectrum","spectrum_from_ray_file",b"spectrum_from_ray_file","spectrum_guid",b"spectrum_guid"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["flux",b"flux","flux_from_ray_file",b"flux_from_ray_file","luminous_flux",b"luminous_flux","radiant_flux",b"radiant_flux","ray_file_uri",b"ray_file_uri","spectrum",b"spectrum","spectrum_from_ray_file",b"spectrum_from_ray_file","spectrum_guid",b"spectrum_guid"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["flux",b"flux"]) -> typing.Optional[typing_extensions.Literal["flux_from_ray_file","luminous_flux","radiant_flux"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["spectrum",b"spectrum"]) -> typing.Optional[typing_extensions.Literal["spectrum_from_ray_file","spectrum_guid"]]: ...

    class Thermic(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class EmissiveFaces(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            TEMPERATURE_FIELD_NUMBER: builtins.int
            temperature: builtins.float = ...
            """the temperature in Kelvin of the blackbody (Kirchhoff's law) for every face"""

            def __init__(self,
                *,
                temperature : builtins.float = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["temperature",b"temperature"]) -> None: ...

        class TemperatureField(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            TEMPERATURE_FIELD_URI_FIELD_NUMBER: builtins.int
            SOP_GUID_FIELD_NUMBER: builtins.int
            temperature_field_uri: typing.Text = ...
            """file with meshed data and temperature for each triangle"""

            sop_guid: typing.Text = ...
            """SOP for geometry, must have absorption, required with temperature field"""

            def __init__(self,
                *,
                temperature_field_uri : typing.Text = ...,
                sop_guid : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["sop_guid",b"sop_guid","temperature_field_uri",b"temperature_field_uri"]) -> None: ...

        EMISSIVES_FACES_FIELD_NUMBER: builtins.int
        TEMPERATURE_FIELD_FIELD_NUMBER: builtins.int
        INTENSITY_GUID_FIELD_NUMBER: builtins.int
        @property
        def emissives_faces(self) -> global___SourceTemplate.Thermic.EmissiveFaces:
            """black body with temperature on each face"""
            pass
        @property
        def temperature_field(self) -> global___SourceTemplate.Thermic.TemperatureField:
            """file with meshed data and triangle temperature"""
            pass
        intensity_guid: typing.Text = ...
        """Intensity guid in intensity manager Lambertian or cos only"""

        def __init__(self,
            *,
            emissives_faces : typing.Optional[global___SourceTemplate.Thermic.EmissiveFaces] = ...,
            temperature_field : typing.Optional[global___SourceTemplate.Thermic.TemperatureField] = ...,
            intensity_guid : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["emissives_faces",b"emissives_faces","exitance",b"exitance","temperature_field",b"temperature_field"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["emissives_faces",b"emissives_faces","exitance",b"exitance","intensity_guid",b"intensity_guid","temperature_field",b"temperature_field"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["exitance",b"exitance"]) -> typing.Optional[typing_extensions.Literal["emissives_faces","temperature_field"]]: ...

    class PredefinedWhitePoint(google.protobuf.message.Message):
        """color space can be used for both ambient sources and display sources"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _WhitePointType:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _WhitePointTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_WhitePointType.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            C: SourceTemplate.PredefinedWhitePoint.WhitePointType.ValueType = ...  # 0
            """average daylight illuminant"""

            D50: SourceTemplate.PredefinedWhitePoint.WhitePointType.ValueType = ...  # 1
            """natural horizon light"""

            D65: SourceTemplate.PredefinedWhitePoint.WhitePointType.ValueType = ...  # 2
            """standard daylight illuminant"""

            E: SourceTemplate.PredefinedWhitePoint.WhitePointType.ValueType = ...  # 3
            """illuminant that gives equal weight to all wavelengths"""

        class WhitePointType(_WhitePointType, metaclass=_WhitePointTypeEnumTypeWrapper):
            pass

        C: SourceTemplate.PredefinedWhitePoint.WhitePointType.ValueType = ...  # 0
        """average daylight illuminant"""

        D50: SourceTemplate.PredefinedWhitePoint.WhitePointType.ValueType = ...  # 1
        """natural horizon light"""

        D65: SourceTemplate.PredefinedWhitePoint.WhitePointType.ValueType = ...  # 2
        """standard daylight illuminant"""

        E: SourceTemplate.PredefinedWhitePoint.WhitePointType.ValueType = ...  # 3
        """illuminant that gives equal weight to all wavelengths"""


        WHITE_POINT_TYPE_FIELD_NUMBER: builtins.int
        white_point_type: global___SourceTemplate.PredefinedWhitePoint.WhitePointType.ValueType = ...
        """pre-defined white point type"""

        def __init__(self,
            *,
            white_point_type : global___SourceTemplate.PredefinedWhitePoint.WhitePointType.ValueType = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["white_point_type",b"white_point_type"]) -> None: ...

    class UserDefinedWhitePoint(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        WHITE_POINT_FIELD_NUMBER: builtins.int
        @property
        def white_point(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
            """X and Y coordinates of the white point."""
            pass
        def __init__(self,
            *,
            white_point : typing.Optional[typing.Iterable[builtins.float]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["white_point",b"white_point"]) -> None: ...

    class UserDefinedRGBSpace(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        PRE_DEFINED_WHITE_POINT_FIELD_NUMBER: builtins.int
        USER_DEFINED_WHITE_POINT_FIELD_NUMBER: builtins.int
        RED_SPECTRUM_GUID_FIELD_NUMBER: builtins.int
        GREEN_SPECTRUM_GUID_FIELD_NUMBER: builtins.int
        BLUE_SPECTRUM_GUID_FIELD_NUMBER: builtins.int
        @property
        def pre_defined_white_point(self) -> global___SourceTemplate.PredefinedWhitePoint:
            """pre-defined white point"""
            pass
        @property
        def user_defined_white_point(self) -> global___SourceTemplate.UserDefinedWhitePoint:
            """custom Y and X white point coordinates"""
            pass
        red_spectrum_guid: typing.Text = ...
        """red Spectrum guid in spectrum manager"""

        green_spectrum_guid: typing.Text = ...
        """green Spectrum guid in spectrum manager"""

        blue_spectrum_guid: typing.Text = ...
        """blue Spectrum guid in spectrum manager"""

        def __init__(self,
            *,
            pre_defined_white_point : typing.Optional[global___SourceTemplate.PredefinedWhitePoint] = ...,
            user_defined_white_point : typing.Optional[global___SourceTemplate.UserDefinedWhitePoint] = ...,
            red_spectrum_guid : typing.Text = ...,
            green_spectrum_guid : typing.Text = ...,
            blue_spectrum_guid : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["White_point_type",b"White_point_type","pre_defined_white_point",b"pre_defined_white_point","user_defined_white_point",b"user_defined_white_point"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["White_point_type",b"White_point_type","blue_spectrum_guid",b"blue_spectrum_guid","green_spectrum_guid",b"green_spectrum_guid","pre_defined_white_point",b"pre_defined_white_point","red_spectrum_guid",b"red_spectrum_guid","user_defined_white_point",b"user_defined_white_point"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["White_point_type",b"White_point_type"]) -> typing.Optional[typing_extensions.Literal["pre_defined_white_point","user_defined_white_point"]]: ...

    class PredefinedColorSpace(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class _ColorSpaceType:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _ColorSpaceTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ColorSpaceType.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
            sRGB: SourceTemplate.PredefinedColorSpace.ColorSpaceType.ValueType = ...  # 0
            """standard and most commonly used model"""

            AdobeRGB: SourceTemplate.PredefinedColorSpace.ColorSpaceType.ValueType = ...  # 1
            """larger gamut"""

        class ColorSpaceType(_ColorSpaceType, metaclass=_ColorSpaceTypeEnumTypeWrapper):
            pass

        sRGB: SourceTemplate.PredefinedColorSpace.ColorSpaceType.ValueType = ...  # 0
        """standard and most commonly used model"""

        AdobeRGB: SourceTemplate.PredefinedColorSpace.ColorSpaceType.ValueType = ...  # 1
        """larger gamut"""


        COLOR_SPACE_TYPE_FIELD_NUMBER: builtins.int
        color_space_type: global___SourceTemplate.PredefinedColorSpace.ColorSpaceType.ValueType = ...
        """pre-defined color space type"""

        def __init__(self,
            *,
            color_space_type : global___SourceTemplate.PredefinedColorSpace.ColorSpaceType.ValueType = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["color_space_type",b"color_space_type"]) -> None: ...

    class SourceDimensions(google.protobuf.message.Message):
        """source dimensions"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        X_START_FIELD_NUMBER: builtins.int
        X_END_FIELD_NUMBER: builtins.int
        Y_START_FIELD_NUMBER: builtins.int
        Y_END_FIELD_NUMBER: builtins.int
        x_start: builtins.float = ...
        """(mm)"""

        x_end: builtins.float = ...
        """(mm)"""

        y_start: builtins.float = ...
        """(mm)"""

        y_end: builtins.float = ...
        """(mm)"""

        def __init__(self,
            *,
            x_start : builtins.float = ...,
            x_end : builtins.float = ...,
            y_start : builtins.float = ...,
            y_end : builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["x_end",b"x_end","x_start",b"x_start","y_end",b"y_end","y_start",b"y_start"]) -> None: ...

    class Display(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        IMAGE_FILE_URI_FIELD_NUMBER: builtins.int
        SOURCE_DIMENSIONS_FIELD_NUMBER: builtins.int
        LUMINOUS_FLUX_FIELD_NUMBER: builtins.int
        CONTRAST_RATIO_FIELD_NUMBER: builtins.int
        INTENSITY_GUID_FIELD_NUMBER: builtins.int
        PRE_DEFINED_COLOR_SPACE_FIELD_NUMBER: builtins.int
        USER_DEFINED_RBG_SPACE_FIELD_NUMBER: builtins.int
        image_file_uri: typing.Text = ...
        """png,jpeg,bmp,tiff or rgb format file uri"""

        @property
        def source_dimensions(self) -> global___SourceTemplate.SourceDimensions:
            """horizontal and vertical dimensions (mm)"""
            pass
        luminous_flux: builtins.float = ...
        """luminace in cd/m2"""

        contrast_ratio: builtins.int = ...
        """Contrast ratio, infitine if not defined"""

        intensity_guid: typing.Text = ...
        """Intensity guid in intensity manager"""

        @property
        def pre_defined_color_space(self) -> global___SourceTemplate.PredefinedColorSpace:
            """pre-defined color space"""
            pass
        @property
        def user_defined_rbg_space(self) -> global___SourceTemplate.UserDefinedRGBSpace:
            """custom rgb color space with pre-defined or custom withe point"""
            pass
        def __init__(self,
            *,
            image_file_uri : typing.Text = ...,
            source_dimensions : typing.Optional[global___SourceTemplate.SourceDimensions] = ...,
            luminous_flux : builtins.float = ...,
            contrast_ratio : typing.Optional[builtins.int] = ...,
            intensity_guid : typing.Text = ...,
            pre_defined_color_space : typing.Optional[global___SourceTemplate.PredefinedColorSpace] = ...,
            user_defined_rbg_space : typing.Optional[global___SourceTemplate.UserDefinedRGBSpace] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["_contrast_ratio",b"_contrast_ratio","color_space",b"color_space","contrast_ratio",b"contrast_ratio","pre_defined_color_space",b"pre_defined_color_space","source_dimensions",b"source_dimensions","user_defined_rbg_space",b"user_defined_rbg_space"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["_contrast_ratio",b"_contrast_ratio","color_space",b"color_space","contrast_ratio",b"contrast_ratio","image_file_uri",b"image_file_uri","intensity_guid",b"intensity_guid","luminous_flux",b"luminous_flux","pre_defined_color_space",b"pre_defined_color_space","source_dimensions",b"source_dimensions","user_defined_rbg_space",b"user_defined_rbg_space"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_contrast_ratio",b"_contrast_ratio"]) -> typing.Optional[typing_extensions.Literal["contrast_ratio"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["color_space",b"color_space"]) -> typing.Optional[typing_extensions.Literal["pre_defined_color_space","user_defined_rbg_space"]]: ...

    class Ambient(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class UniformAmbient(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            LUMINANCE_FIELD_NUMBER: builtins.int
            MIRRORED_EXTENT_FIELD_NUMBER: builtins.int
            SPECTRUM_GUID_FIELD_NUMBER: builtins.int
            luminance: builtins.float = ...
            """Luminance in cd per squared meter"""

            mirrored_extent: builtins.bool = ...
            """if true then the ambient light covers all space, if false only covers the upper half space"""

            spectrum_guid: typing.Text = ...
            """blackbody or library spectra only"""

            def __init__(self,
                *,
                luminance : builtins.float = ...,
                mirrored_extent : builtins.bool = ...,
                spectrum_guid : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["luminance",b"luminance","mirrored_extent",b"mirrored_extent","spectrum_guid",b"spectrum_guid"]) -> None: ...

        class CieOvercast(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            LUMINANCE_FIELD_NUMBER: builtins.int
            SPECTRUM_GUID_FIELD_NUMBER: builtins.int
            luminance: builtins.float = ...
            """Luminance in cd per squared meter"""

            spectrum_guid: typing.Text = ...
            """blackbody or library spectra only"""

            def __init__(self,
                *,
                luminance : builtins.float = ...,
                spectrum_guid : typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["luminance",b"luminance","spectrum_guid",b"spectrum_guid"]) -> None: ...

        class CieGeneral(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class _CieType:
                ValueType = typing.NewType('ValueType', builtins.int)
                V: typing_extensions.TypeAlias = ValueType
            class _CieTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CieType.ValueType], builtins.type):
                DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
                standard_overcast: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 0
                overcast_steep_gradation: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 1
                overcast_azimuthal_uniformity: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 2
                overcast_slight_brightening: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 3
                uniform_luminance: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 4
                cloudy_slight_brightening: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 5
                cloudy_nogradation_circumsolar: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 6
                cloudy_solar_corona: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 7
                cloudy_obscured_sun: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 8
                cloudy_circumsolar_region: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 9
                white_blue_distinct: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 10
                standard_low_luminance: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 11
                standard_polluted_atmosphere: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 12
                cloudless_turbid_corona: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 13
                white_blue_broad: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 14
            class CieType(_CieType, metaclass=_CieTypeEnumTypeWrapper):
                pass

            standard_overcast: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 0
            overcast_steep_gradation: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 1
            overcast_azimuthal_uniformity: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 2
            overcast_slight_brightening: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 3
            uniform_luminance: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 4
            cloudy_slight_brightening: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 5
            cloudy_nogradation_circumsolar: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 6
            cloudy_solar_corona: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 7
            cloudy_obscured_sun: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 8
            cloudy_circumsolar_region: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 9
            white_blue_distinct: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 10
            standard_low_luminance: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 11
            standard_polluted_atmosphere: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 12
            cloudless_turbid_corona: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 13
            white_blue_broad: SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...  # 14

            LUMINANCE_FIELD_NUMBER: builtins.int
            CIE_TYPE_FIELD_NUMBER: builtins.int
            luminance: builtins.float = ...
            """Luminance in cd per squared meter"""

            cie_type: global___SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...
            """sky model"""

            def __init__(self,
                *,
                luminance : builtins.float = ...,
                cie_type : global___SourceTemplate.Ambient.CieGeneral.CieType.ValueType = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["cie_type",b"cie_type","luminance",b"luminance"]) -> None: ...

        class NaturalLight(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            TURBIDITY_FIELD_NUMBER: builtins.int
            WITH_SKY_FIELD_NUMBER: builtins.int
            turbidity: builtins.float = ...
            """cloudiness of the environment. The lower the value the clearer the environment. Varies between 1.9 and 9.9"""

            with_sky: builtins.bool = ...
            """if false, only the sun is used in the simulation. If true, both ambient sky model and sun are used in the simulation"""

            def __init__(self,
                *,
                turbidity : builtins.float = ...,
                with_sky : builtins.bool = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["turbidity",b"turbidity","with_sky",b"with_sky"]) -> None: ...

        class UsStandard(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        class EnvironmentMap(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            LUMINANCE_FIELD_NUMBER: builtins.int
            IMAGE_URI_FIELD_NUMBER: builtins.int
            PREDEFINED_COLOR_SPACE_FIELD_NUMBER: builtins.int
            USER_DEFINED_RGB_SPACE_FIELD_NUMBER: builtins.int
            luminance: builtins.float = ...
            """Luminance in cd per squared meter"""

            image_uri: typing.Text = ...
            """image file or HDRI. HDRIs have relative luminance values, so the lumiance value will be applied to the (1,1,1) pixels and all other colors will be defined relatively"""

            @property
            def predefined_color_space(self) -> global___SourceTemplate.PredefinedColorSpace:
                """pre-defined color space"""
                pass
            @property
            def user_defined_rgb_space(self) -> global___SourceTemplate.UserDefinedRGBSpace:
                """custom RGB space with either pre-defined or custom white point"""
                pass
            def __init__(self,
                *,
                luminance : builtins.float = ...,
                image_uri : typing.Text = ...,
                predefined_color_space : typing.Optional[global___SourceTemplate.PredefinedColorSpace] = ...,
                user_defined_rgb_space : typing.Optional[global___SourceTemplate.UserDefinedRGBSpace] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["color_space",b"color_space","predefined_color_space",b"predefined_color_space","user_defined_rgb_space",b"user_defined_rgb_space"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["color_space",b"color_space","image_uri",b"image_uri","luminance",b"luminance","predefined_color_space",b"predefined_color_space","user_defined_rgb_space",b"user_defined_rgb_space"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["color_space",b"color_space"]) -> typing.Optional[typing_extensions.Literal["predefined_color_space","user_defined_rgb_space"]]: ...

        UNIFORM_AMBIENT_FIELD_NUMBER: builtins.int
        CIE_OVERCAST_FIELD_NUMBER: builtins.int
        CIE_GENERAL_FIELD_NUMBER: builtins.int
        NATURAL_LIGHT_FIELD_NUMBER: builtins.int
        US_STANDARD_FIELD_NUMBER: builtins.int
        ENVIRONMENT_MAP_FIELD_NUMBER: builtins.int
        @property
        def uniform_ambient(self) -> global___SourceTemplate.Ambient.UniformAmbient:
            """sets a specific and common luminance for the entire sky without any contribution of the sun. The sun has a specific value calculated according to its position"""
            pass
        @property
        def cie_overcast(self) -> global___SourceTemplate.Ambient.CieOvercast:
            """generates a specific distribution for the sky according to a luminance value and CIE standard overcast model"""
            pass
        @property
        def cie_general(self) -> global___SourceTemplate.Ambient.CieGeneral:
            """generates a specific distribution for the sky according to a luminance value and sky model"""
            pass
        @property
        def natural_light(self) -> global___SourceTemplate.Ambient.NaturalLight:
            """generates natural lighting based on a day time or night time model"""
            pass
        @property
        def us_standard(self) -> global___SourceTemplate.Ambient.UsStandard:
            """The U.S. Standard Atmosphere Ambient Source follows a specific atmospheric model to simulate a sky radiation ranging from 280nm into ultraviolet to 4μm into infrared."""
            pass
        @property
        def environment_map(self) -> global___SourceTemplate.Ambient.EnvironmentMap:
            """creates a background using an image file"""
            pass
        def __init__(self,
            *,
            uniform_ambient : typing.Optional[global___SourceTemplate.Ambient.UniformAmbient] = ...,
            cie_overcast : typing.Optional[global___SourceTemplate.Ambient.CieOvercast] = ...,
            cie_general : typing.Optional[global___SourceTemplate.Ambient.CieGeneral] = ...,
            natural_light : typing.Optional[global___SourceTemplate.Ambient.NaturalLight] = ...,
            us_standard : typing.Optional[global___SourceTemplate.Ambient.UsStandard] = ...,
            environment_map : typing.Optional[global___SourceTemplate.Ambient.EnvironmentMap] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["cie_general",b"cie_general","cie_overcast",b"cie_overcast","environment_map",b"environment_map","natural_light",b"natural_light","source",b"source","uniform_ambient",b"uniform_ambient","us_standard",b"us_standard"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["cie_general",b"cie_general","cie_overcast",b"cie_overcast","environment_map",b"environment_map","natural_light",b"natural_light","source",b"source","uniform_ambient",b"uniform_ambient","us_standard",b"us_standard"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["uniform_ambient","cie_overcast","cie_general","natural_light","us_standard","environment_map"]]: ...

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    LUMINAIRE_FIELD_NUMBER: builtins.int
    SURFACE_FIELD_NUMBER: builtins.int
    RAYFILE_FIELD_NUMBER: builtins.int
    THERMIC_FIELD_NUMBER: builtins.int
    DISPLAY_FIELD_NUMBER: builtins.int
    AMBIENT_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """SourceTemplate name"""

    description: typing.Text = ...
    """SourceTemplate description"""

    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """User defined metadata"""
        pass
    @property
    def luminaire(self) -> global___SourceTemplate.Luminaire: ...
    @property
    def surface(self) -> global___SourceTemplate.Surface: ...
    @property
    def rayfile(self) -> global___SourceTemplate.RayFile: ...
    @property
    def thermic(self) -> global___SourceTemplate.Thermic: ...
    @property
    def display(self) -> global___SourceTemplate.Display: ...
    @property
    def ambient(self) -> global___SourceTemplate.Ambient: ...
    def __init__(self,
        *,
        name : typing.Text = ...,
        description : typing.Text = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        luminaire : typing.Optional[global___SourceTemplate.Luminaire] = ...,
        surface : typing.Optional[global___SourceTemplate.Surface] = ...,
        rayfile : typing.Optional[global___SourceTemplate.RayFile] = ...,
        thermic : typing.Optional[global___SourceTemplate.Thermic] = ...,
        display : typing.Optional[global___SourceTemplate.Display] = ...,
        ambient : typing.Optional[global___SourceTemplate.Ambient] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["ambient",b"ambient","display",b"display","luminaire",b"luminaire","rayfile",b"rayfile","source",b"source","surface",b"surface","thermic",b"thermic"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ambient",b"ambient","description",b"description","display",b"display","luminaire",b"luminaire","metadata",b"metadata","name",b"name","rayfile",b"rayfile","source",b"source","surface",b"surface","thermic",b"thermic"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["luminaire","surface","rayfile","thermic","display","ambient"]]: ...
global___SourceTemplate = SourceTemplate

class Create_Request(google.protobuf.message.Message):
    """Request to create a SourceTemplate in SourceTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SOURCE_TEMPLATE_FIELD_NUMBER: builtins.int
    @property
    def source_template(self) -> global___SourceTemplate:
        """SourceTemplate containing its basic characteristics"""
        pass
    def __init__(self,
        *,
        source_template : typing.Optional[global___SourceTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source_template",b"source_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["source_template",b"source_template"]) -> None: ...
global___Create_Request = Create_Request

class Create_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SourceTemplate created in SourceTemplatesManager"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Create_Response = Create_Response

class Read_Request(google.protobuf.message.Message):
    """Request to read a SourceTemplate in SourceTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SourceTemplate to be read"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Read_Request = Read_Request

class Read_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SOURCE_TEMPLATE_FIELD_NUMBER: builtins.int
    @property
    def source_template(self) -> global___SourceTemplate:
        """SourceTemplate corresponding to the guid given in Read_Request"""
        pass
    def __init__(self,
        *,
        source_template : typing.Optional[global___SourceTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source_template",b"source_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["source_template",b"source_template"]) -> None: ...
global___Read_Response = Read_Response

class Update_Request(google.protobuf.message.Message):
    """Request to update a SourceTemplate in SourceTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    SOURCE_TEMPLATE_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SourceTemplate to be updated"""

    @property
    def source_template(self) -> global___SourceTemplate:
        """SourceTemplate that will be used for the update"""
        pass
    def __init__(self,
        *,
        guid : typing.Text = ...,
        source_template : typing.Optional[global___SourceTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source_template",b"source_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid","source_template",b"source_template"]) -> None: ...
global___Update_Request = Update_Request

class Update_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Update_Response = Update_Response

class Delete_Request(google.protobuf.message.Message):
    """Request to delete a SourceTemplate in SourceTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SourceTemplate to be deleted"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Delete_Request = Delete_Request

class Delete_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Delete_Response = Delete_Response

class List_Request(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___List_Request = List_Request

class List_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUIDS_FIELD_NUMBER: builtins.int
    @property
    def guids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Guids of the SourceTemplates in SourceTemplatesManager"""
        pass
    def __init__(self,
        *,
        guids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guids",b"guids"]) -> None: ...
global___List_Response = List_Response

class GetRayFileInfo_Request(google.protobuf.message.Message):
    """Request of GetRayFileInfo"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SourceTemplate to get information about ray file (example: flux). Only for SourceTemplate of type RayFile."""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___GetRayFileInfo_Request = GetRayFileInfo_Request

class GetRayFileInfo_Response(google.protobuf.message.Message):
    """Response of GetRayFileInfo"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FLUX_FIELD_NUMBER: builtins.int
    HAS_SPECTRAL_DATA_FIELD_NUMBER: builtins.int
    @property
    def flux(self) -> ansys.api.speos.common.v1.data_pb2.DataDoubles:
        """Flux of the ray file"""
        pass
    has_spectral_data: builtins.bool = ...
    """The ray file contains Spectrum information"""

    def __init__(self,
        *,
        flux : typing.Optional[ansys.api.speos.common.v1.data_pb2.DataDoubles] = ...,
        has_spectral_data : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["flux",b"flux"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["flux",b"flux","has_spectral_data",b"has_spectral_data"]) -> None: ...
global___GetRayFileInfo_Response = GetRayFileInfo_Response
