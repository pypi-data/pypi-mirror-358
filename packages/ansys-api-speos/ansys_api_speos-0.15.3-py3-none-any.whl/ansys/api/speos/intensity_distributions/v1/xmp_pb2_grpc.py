# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ansys.api.speos.intensity_distributions.v1 import xmp_pb2 as ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2


class XmpIntensityServiceStub(object):
    """service to manage XMP files
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Load = channel.unary_unary(
                '/ansys.api.speos.intensity_distributions.v1.xmp.XmpIntensityService/Load',
                request_serializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Load_Request.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Load_Response.FromString,
                )
        self.Save = channel.unary_unary(
                '/ansys.api.speos.intensity_distributions.v1.xmp.XmpIntensityService/Save',
                request_serializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Save_Request.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Save_Response.FromString,
                )
        self.Import = channel.unary_unary(
                '/ansys.api.speos.intensity_distributions.v1.xmp.XmpIntensityService/Import',
                request_serializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.XmpDistribution.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Import_Response.FromString,
                )
        self.Export = channel.unary_unary(
                '/ansys.api.speos.intensity_distributions.v1.xmp.XmpIntensityService/Export',
                request_serializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Export_Request.SerializeToString,
                response_deserializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.XmpDistribution.FromString,
                )


class XmpIntensityServiceServicer(object):
    """service to manage XMP files
    """

    def Load(self, request, context):
        """Load XMP intensity distributions from file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Save(self, request, context):
        """Save XMP intensity distributions to file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Import(self, request, context):
        """import XmpDistribution to COptisMap
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Export(self, request, context):
        """export COPtisMap to XmpDistribution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_XmpIntensityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Load_Request.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Load_Response.SerializeToString,
            ),
            'Save': grpc.unary_unary_rpc_method_handler(
                    servicer.Save,
                    request_deserializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Save_Request.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Save_Response.SerializeToString,
            ),
            'Import': grpc.unary_unary_rpc_method_handler(
                    servicer.Import,
                    request_deserializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.XmpDistribution.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Import_Response.SerializeToString,
            ),
            'Export': grpc.unary_unary_rpc_method_handler(
                    servicer.Export,
                    request_deserializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Export_Request.FromString,
                    response_serializer=ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.XmpDistribution.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ansys.api.speos.intensity_distributions.v1.xmp.XmpIntensityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class XmpIntensityService(object):
    """service to manage XMP files
    """

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.intensity_distributions.v1.xmp.XmpIntensityService/Load',
            ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Load_Request.SerializeToString,
            ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Load_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.intensity_distributions.v1.xmp.XmpIntensityService/Save',
            ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Save_Request.SerializeToString,
            ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Save_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Import(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.intensity_distributions.v1.xmp.XmpIntensityService/Import',
            ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.XmpDistribution.SerializeToString,
            ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Import_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Export(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ansys.api.speos.intensity_distributions.v1.xmp.XmpIntensityService/Export',
            ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.Export_Request.SerializeToString,
            ansys_dot_api_dot_speos_dot_intensity__distributions_dot_v1_dot_xmp__pb2.XmpDistribution.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
