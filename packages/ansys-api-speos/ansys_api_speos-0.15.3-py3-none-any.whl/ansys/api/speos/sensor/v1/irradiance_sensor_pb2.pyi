"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import ansys.api.speos.sensor.v1.common_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class IrradianceSensorTemplate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SENSOR_TYPE_PHOTOMETRIC_FIELD_NUMBER: builtins.int
    SENSOR_TYPE_COLORIMETRIC_FIELD_NUMBER: builtins.int
    SENSOR_TYPE_RADIOMETRIC_FIELD_NUMBER: builtins.int
    SENSOR_TYPE_SPECTRAL_FIELD_NUMBER: builtins.int
    ILLUMINANCE_TYPE_PLANAR_FIELD_NUMBER: builtins.int
    ILLUMINANCE_TYPE_RADIAL_FIELD_NUMBER: builtins.int
    ILLUMINANCE_TYPE_HEMISPHERICAL_FIELD_NUMBER: builtins.int
    ILLUMINANCE_TYPE_CYLINDRICAL_FIELD_NUMBER: builtins.int
    ILLUMINANCE_TYPE_SEMI_CYLINDRICAL_FIELD_NUMBER: builtins.int
    DIMENSIONS_FIELD_NUMBER: builtins.int
    @property
    def sensor_type_photometric(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypePhotometric:
        """Sensor type : Photometric"""
        pass
    @property
    def sensor_type_colorimetric(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric:
        """ Sensor type : Colorimetric"""
        pass
    @property
    def sensor_type_radiometric(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypeRadiometric:
        """ Sensor type : Radiometric"""
        pass
    @property
    def sensor_type_spectral(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral:
        """Sensor type : Spectral"""
        pass
    @property
    def illuminance_type_planar(self) -> ansys.api.speos.sensor.v1.common_pb2.IlluminanceTypePlanar:
        """Illuminance type : Planar"""
        pass
    @property
    def illuminance_type_radial(self) -> ansys.api.speos.sensor.v1.common_pb2.IlluminanceTypeRadial:
        """Illuminance type : Radial"""
        pass
    @property
    def illuminance_type_hemispherical(self) -> ansys.api.speos.sensor.v1.common_pb2.IlluminanceTypeHemispherical:
        """Illuminance type : Hemispherical"""
        pass
    @property
    def illuminance_type_cylindrical(self) -> ansys.api.speos.sensor.v1.common_pb2.IlluminanceTypeCylindrical:
        """Illuminance type : Cylindrical"""
        pass
    @property
    def illuminance_type_semi_cylindrical(self) -> ansys.api.speos.sensor.v1.common_pb2.IlluminanceTypeSemiCylindrical:
        """Illuminance type : SemiCylindrical"""
        pass
    @property
    def dimensions(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorDimensions:
        """Dimensions of the sensor"""
        pass
    def __init__(self,
        *,
        sensor_type_photometric : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypePhotometric] = ...,
        sensor_type_colorimetric : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric] = ...,
        sensor_type_radiometric : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypeRadiometric] = ...,
        sensor_type_spectral : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral] = ...,
        illuminance_type_planar : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.IlluminanceTypePlanar] = ...,
        illuminance_type_radial : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.IlluminanceTypeRadial] = ...,
        illuminance_type_hemispherical : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.IlluminanceTypeHemispherical] = ...,
        illuminance_type_cylindrical : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.IlluminanceTypeCylindrical] = ...,
        illuminance_type_semi_cylindrical : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.IlluminanceTypeSemiCylindrical] = ...,
        dimensions : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorDimensions] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dimensions",b"dimensions","illuminance_type",b"illuminance_type","illuminance_type_cylindrical",b"illuminance_type_cylindrical","illuminance_type_hemispherical",b"illuminance_type_hemispherical","illuminance_type_planar",b"illuminance_type_planar","illuminance_type_radial",b"illuminance_type_radial","illuminance_type_semi_cylindrical",b"illuminance_type_semi_cylindrical","sensor_type",b"sensor_type","sensor_type_colorimetric",b"sensor_type_colorimetric","sensor_type_photometric",b"sensor_type_photometric","sensor_type_radiometric",b"sensor_type_radiometric","sensor_type_spectral",b"sensor_type_spectral"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimensions",b"dimensions","illuminance_type",b"illuminance_type","illuminance_type_cylindrical",b"illuminance_type_cylindrical","illuminance_type_hemispherical",b"illuminance_type_hemispherical","illuminance_type_planar",b"illuminance_type_planar","illuminance_type_radial",b"illuminance_type_radial","illuminance_type_semi_cylindrical",b"illuminance_type_semi_cylindrical","sensor_type",b"sensor_type","sensor_type_colorimetric",b"sensor_type_colorimetric","sensor_type_photometric",b"sensor_type_photometric","sensor_type_radiometric",b"sensor_type_radiometric","sensor_type_spectral",b"sensor_type_spectral"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["illuminance_type",b"illuminance_type"]) -> typing.Optional[typing_extensions.Literal["illuminance_type_planar","illuminance_type_radial","illuminance_type_hemispherical","illuminance_type_cylindrical","illuminance_type_semi_cylindrical"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["sensor_type",b"sensor_type"]) -> typing.Optional[typing_extensions.Literal["sensor_type_photometric","sensor_type_colorimetric","sensor_type_radiometric","sensor_type_spectral"]]: ...
global___IrradianceSensorTemplate = IrradianceSensorTemplate
