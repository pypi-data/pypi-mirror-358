"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import ansys.api.speos.sensor.v1.common_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _EnumSensorCameraPNGBits:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _EnumSensorCameraPNGBitsEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EnumSensorCameraPNGBits.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    PNG_08: EnumSensorCameraPNGBits.ValueType = ...  # 0
    PNG_10: EnumSensorCameraPNGBits.ValueType = ...  # 1
    PNG_12: EnumSensorCameraPNGBits.ValueType = ...  # 2
    PNG_16: EnumSensorCameraPNGBits.ValueType = ...  # 3
class EnumSensorCameraPNGBits(_EnumSensorCameraPNGBits, metaclass=_EnumSensorCameraPNGBitsEnumTypeWrapper):
    pass

PNG_08: EnumSensorCameraPNGBits.ValueType = ...  # 0
PNG_10: EnumSensorCameraPNGBits.ValueType = ...  # 1
PNG_12: EnumSensorCameraPNGBits.ValueType = ...  # 2
PNG_16: EnumSensorCameraPNGBits.ValueType = ...  # 3
global___EnumSensorCameraPNGBits = EnumSensorCameraPNGBits


class SensorCameraBalanceModeNone(google.protobuf.message.Message):
    """The spectral transmittance of the optical system and the spectral sensitivity for each channel are applied to the detected spectral image before the conversion in a three-channel result. This method is referred to as the basic conversion."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___SensorCameraBalanceModeNone = SensorCameraBalanceModeNone

class SensorCameraBalanceModeGreyworld(google.protobuf.message.Message):
    """The grey world assumption states that the content of the image is grey on average. This method converts spectral results in a three-channel result with the basic conversion. Then it computes and applies coefficients to the red, green and blue images to make sure their averages are equal."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___SensorCameraBalanceModeGreyworld = SensorCameraBalanceModeGreyworld

class SensorCameraBalanceModeUserwhite(google.protobuf.message.Message):
    """In addition to the basic treatment, it allows you to apply your own coefficients to the red, green, blue images."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RED_GAIN_FIELD_NUMBER: builtins.int
    GREEN_GAIN_FIELD_NUMBER: builtins.int
    BLUE_GAIN_FIELD_NUMBER: builtins.int
    red_gain: builtins.float = ...
    green_gain: builtins.float = ...
    blue_gain: builtins.float = ...
    def __init__(self,
        *,
        red_gain : builtins.float = ...,
        green_gain : builtins.float = ...,
        blue_gain : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["blue_gain",b"blue_gain","green_gain",b"green_gain","red_gain",b"red_gain"]) -> None: ...
global___SensorCameraBalanceModeUserwhite = SensorCameraBalanceModeUserwhite

class SensorCameraBalanceModeDisplay(google.protobuf.message.Message):
    """Spectral results are converted in a three-channel result. Then a post-treatment is realized to take the distortion induced by the display devices into account. With this method, displayed results are similar to what the camera really gets."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RED_DISPLAY_FILE_URI_FIELD_NUMBER: builtins.int
    GREEN_DISPLAY_FILE_URI_FIELD_NUMBER: builtins.int
    BLUE_DISPLAY_FILE_URI_FIELD_NUMBER: builtins.int
    red_display_file_uri: typing.Text = ...
    green_display_file_uri: typing.Text = ...
    blue_display_file_uri: typing.Text = ...
    def __init__(self,
        *,
        red_display_file_uri : typing.Text = ...,
        green_display_file_uri : typing.Text = ...,
        blue_display_file_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["blue_display_file_uri",b"blue_display_file_uri","green_display_file_uri",b"green_display_file_uri","red_display_file_uri",b"red_display_file_uri"]) -> None: ...
global___SensorCameraBalanceModeDisplay = SensorCameraBalanceModeDisplay

class SensorCameraColorModeColor(google.protobuf.message.Message):
    """Simulation results are available in color according to the White Balance mode."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RED_SPECTRUM_FILE_URI_FIELD_NUMBER: builtins.int
    GREEN_SPECTRUM_FILE_URI_FIELD_NUMBER: builtins.int
    BLUE_SPECTRUM_FILE_URI_FIELD_NUMBER: builtins.int
    BALANCE_MODE_NONE_FIELD_NUMBER: builtins.int
    BALANCE_MODE_GREYWORLD_FIELD_NUMBER: builtins.int
    BALANCE_MODE_USERWHITE_FIELD_NUMBER: builtins.int
    BALANCE_MODE_DISPLAY_FIELD_NUMBER: builtins.int
    red_spectrum_file_uri: typing.Text = ...
    green_spectrum_file_uri: typing.Text = ...
    blue_spectrum_file_uri: typing.Text = ...
    @property
    def balance_mode_none(self) -> global___SensorCameraBalanceModeNone:
        """Balance mode : None"""
        pass
    @property
    def balance_mode_greyworld(self) -> global___SensorCameraBalanceModeGreyworld:
        """Balance mode : Greyworld"""
        pass
    @property
    def balance_mode_userwhite(self) -> global___SensorCameraBalanceModeUserwhite:
        """Balance mode : Userwhite"""
        pass
    @property
    def balance_mode_display(self) -> global___SensorCameraBalanceModeDisplay:
        """Balance mode : Display"""
        pass
    def __init__(self,
        *,
        red_spectrum_file_uri : typing.Text = ...,
        green_spectrum_file_uri : typing.Text = ...,
        blue_spectrum_file_uri : typing.Text = ...,
        balance_mode_none : typing.Optional[global___SensorCameraBalanceModeNone] = ...,
        balance_mode_greyworld : typing.Optional[global___SensorCameraBalanceModeGreyworld] = ...,
        balance_mode_userwhite : typing.Optional[global___SensorCameraBalanceModeUserwhite] = ...,
        balance_mode_display : typing.Optional[global___SensorCameraBalanceModeDisplay] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["balance_mode",b"balance_mode","balance_mode_display",b"balance_mode_display","balance_mode_greyworld",b"balance_mode_greyworld","balance_mode_none",b"balance_mode_none","balance_mode_userwhite",b"balance_mode_userwhite"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["balance_mode",b"balance_mode","balance_mode_display",b"balance_mode_display","balance_mode_greyworld",b"balance_mode_greyworld","balance_mode_none",b"balance_mode_none","balance_mode_userwhite",b"balance_mode_userwhite","blue_spectrum_file_uri",b"blue_spectrum_file_uri","green_spectrum_file_uri",b"green_spectrum_file_uri","red_spectrum_file_uri",b"red_spectrum_file_uri"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["balance_mode",b"balance_mode"]) -> typing.Optional[typing_extensions.Literal["balance_mode_none","balance_mode_greyworld","balance_mode_userwhite","balance_mode_display"]]: ...
global___SensorCameraColorModeColor = SensorCameraColorModeColor

class SensorCameraColorModeMonochromatic(google.protobuf.message.Message):
    """Simulation results are available in grey scale."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SPECTRUM_FILE_URI_FIELD_NUMBER: builtins.int
    spectrum_file_uri: typing.Text = ...
    def __init__(self,
        *,
        spectrum_file_uri : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["spectrum_file_uri",b"spectrum_file_uri"]) -> None: ...
global___SensorCameraColorModeMonochromatic = SensorCameraColorModeMonochromatic

class SensorCameraModeGeometric(google.protobuf.message.Message):
    """Simplified version of the Camera Sensor definition parameters"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___SensorCameraModeGeometric = SensorCameraModeGeometric

class SensorCameraModePhotometric(google.protobuf.message.Message):
    """Allows to set every Camera Sensor parameters, including the photometric definition parameters"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ACQUISITION_INTEGRATION_FIELD_NUMBER: builtins.int
    ACQUISITION_LAG_TIME_FIELD_NUMBER: builtins.int
    TRANSMITTANCE_FILE_URI_FIELD_NUMBER: builtins.int
    GAMMA_CORRECTION_FIELD_NUMBER: builtins.int
    PNG_BITS_FIELD_NUMBER: builtins.int
    COLOR_MODE_COLOR_FIELD_NUMBER: builtins.int
    COLOR_MODE_MONOCHROMATIC_FIELD_NUMBER: builtins.int
    WAVELENGTHS_RANGE_FIELD_NUMBER: builtins.int
    acquisition_integration: builtins.float = ...
    """Acquisition integration in s"""

    acquisition_lag_time: builtins.float = ...
    """Acquisition lag time in s"""

    transmittance_file_uri: typing.Text = ...
    """Amount of light of the source that passes through the lens and reaches the sensor. The transmittance is expressed in a .spectrum file."""

    gamma_correction: builtins.float = ...
    """Compensation of the curve before the display on the screen."""

    png_bits: global___EnumSensorCameraPNGBits.ValueType = ...
    """Choose between 8, 10, 12 and 16-bit."""

    @property
    def color_mode_color(self) -> global___SensorCameraColorModeColor:
        """Color mode : Color"""
        pass
    @property
    def color_mode_monochromatic(self) -> global___SensorCameraColorModeMonochromatic:
        """Color mode : Monochromatic"""
        pass
    @property
    def wavelengths_range(self) -> ansys.api.speos.sensor.v1.common_pb2.WavelengthsRange:
        """Spectral excursion to use for simulation"""
        pass
    def __init__(self,
        *,
        acquisition_integration : builtins.float = ...,
        acquisition_lag_time : builtins.float = ...,
        transmittance_file_uri : typing.Text = ...,
        gamma_correction : builtins.float = ...,
        png_bits : global___EnumSensorCameraPNGBits.ValueType = ...,
        color_mode_color : typing.Optional[global___SensorCameraColorModeColor] = ...,
        color_mode_monochromatic : typing.Optional[global___SensorCameraColorModeMonochromatic] = ...,
        wavelengths_range : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.WavelengthsRange] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["color_mode",b"color_mode","color_mode_color",b"color_mode_color","color_mode_monochromatic",b"color_mode_monochromatic","wavelengths_range",b"wavelengths_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["acquisition_integration",b"acquisition_integration","acquisition_lag_time",b"acquisition_lag_time","color_mode",b"color_mode","color_mode_color",b"color_mode_color","color_mode_monochromatic",b"color_mode_monochromatic","gamma_correction",b"gamma_correction","png_bits",b"png_bits","transmittance_file_uri",b"transmittance_file_uri","wavelengths_range",b"wavelengths_range"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["color_mode",b"color_mode"]) -> typing.Optional[typing_extensions.Literal["color_mode_color","color_mode_monochromatic"]]: ...
global___SensorCameraModePhotometric = SensorCameraModePhotometric

class CameraSensorTemplate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SENSOR_MODE_GEOMETRIC_FIELD_NUMBER: builtins.int
    SENSOR_MODE_PHOTOMETRIC_FIELD_NUMBER: builtins.int
    FOCAL_LENGTH_FIELD_NUMBER: builtins.int
    IMAGER_DISTANCE_FIELD_NUMBER: builtins.int
    F_NUMBER_FIELD_NUMBER: builtins.int
    DISTORSION_FILE_URI_FIELD_NUMBER: builtins.int
    DISTORTION_FILE_URI_FIELD_NUMBER: builtins.int
    HORZ_PIXEL_FIELD_NUMBER: builtins.int
    VERT_PIXEL_FIELD_NUMBER: builtins.int
    WIDTH_FIELD_NUMBER: builtins.int
    HEIGHT_FIELD_NUMBER: builtins.int
    @property
    def sensor_mode_geometric(self) -> global___SensorCameraModeGeometric:
        """Sensor mode : Geometric"""
        pass
    @property
    def sensor_mode_photometric(self) -> global___SensorCameraModePhotometric:
        """Sensor mode : Photometric"""
        pass
    focal_length: builtins.float = ...
    """Distance between the center of the optical system and the focus. (mm)"""

    imager_distance: builtins.float = ...
    """Imager distance in mm, the imager is located at the focal point. The Imager distance has no impact on the result."""

    f_number: builtins.float = ...
    """F-number represents the aperture of the front lens. F number has no impact on the result."""

    distorsion_file_uri: typing.Text = ...
    """Will be deprecated soon due to typo error - better use distortion_file_uri"""

    distortion_file_uri: typing.Text = ...
    """Optical aberration that deforms and bends straight lines. The distortion is expressed in a .OPTDistortion file."""

    horz_pixel: builtins.int = ...
    """Defines the horizontal pixels number corresponding to the camera resolution."""

    vert_pixel: builtins.int = ...
    """Defines the vertical pixels number corresponding to the camera resolution."""

    width: builtins.float = ...
    """Defines the sensor's width in mm."""

    height: builtins.float = ...
    """Defines the sensor's height in mm."""

    def __init__(self,
        *,
        sensor_mode_geometric : typing.Optional[global___SensorCameraModeGeometric] = ...,
        sensor_mode_photometric : typing.Optional[global___SensorCameraModePhotometric] = ...,
        focal_length : builtins.float = ...,
        imager_distance : builtins.float = ...,
        f_number : builtins.float = ...,
        distorsion_file_uri : typing.Text = ...,
        distortion_file_uri : typing.Text = ...,
        horz_pixel : builtins.int = ...,
        vert_pixel : builtins.int = ...,
        width : builtins.float = ...,
        height : builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["sensor_mode",b"sensor_mode","sensor_mode_geometric",b"sensor_mode_geometric","sensor_mode_photometric",b"sensor_mode_photometric"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["distorsion_file_uri",b"distorsion_file_uri","distortion_file_uri",b"distortion_file_uri","f_number",b"f_number","focal_length",b"focal_length","height",b"height","horz_pixel",b"horz_pixel","imager_distance",b"imager_distance","sensor_mode",b"sensor_mode","sensor_mode_geometric",b"sensor_mode_geometric","sensor_mode_photometric",b"sensor_mode_photometric","vert_pixel",b"vert_pixel","width",b"width"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["sensor_mode",b"sensor_mode"]) -> typing.Optional[typing_extensions.Literal["sensor_mode_geometric","sensor_mode_photometric"]]: ...
global___CameraSensorTemplate = CameraSensorTemplate
