"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.speos.sensor.v1.sensor_pb2
import grpc

class SensorTemplatesManagerStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.sensor.v1.sensor_pb2.Create_Request,
        ansys.api.speos.sensor.v1.sensor_pb2.Create_Response] = ...
    """Create a SensorTemplate"""

    Read: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.sensor.v1.sensor_pb2.Read_Request,
        ansys.api.speos.sensor.v1.sensor_pb2.Read_Response] = ...
    """Read a SensorTemplate"""

    Update: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.sensor.v1.sensor_pb2.Update_Request,
        ansys.api.speos.sensor.v1.sensor_pb2.Update_Response] = ...
    """Update a SensorTemplate"""

    Delete: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.sensor.v1.sensor_pb2.Delete_Request,
        ansys.api.speos.sensor.v1.sensor_pb2.Delete_Response] = ...
    """Delete a SensorTemplate"""

    List: grpc.UnaryUnaryMultiCallable[
        ansys.api.speos.sensor.v1.sensor_pb2.List_Request,
        ansys.api.speos.sensor.v1.sensor_pb2.List_Response] = ...
    """List all SensorTemplates in manager"""


class SensorTemplatesManagerServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Create(self,
        request: ansys.api.speos.sensor.v1.sensor_pb2.Create_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.sensor.v1.sensor_pb2.Create_Response:
        """Create a SensorTemplate"""
        pass

    @abc.abstractmethod
    def Read(self,
        request: ansys.api.speos.sensor.v1.sensor_pb2.Read_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.sensor.v1.sensor_pb2.Read_Response:
        """Read a SensorTemplate"""
        pass

    @abc.abstractmethod
    def Update(self,
        request: ansys.api.speos.sensor.v1.sensor_pb2.Update_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.sensor.v1.sensor_pb2.Update_Response:
        """Update a SensorTemplate"""
        pass

    @abc.abstractmethod
    def Delete(self,
        request: ansys.api.speos.sensor.v1.sensor_pb2.Delete_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.sensor.v1.sensor_pb2.Delete_Response:
        """Delete a SensorTemplate"""
        pass

    @abc.abstractmethod
    def List(self,
        request: ansys.api.speos.sensor.v1.sensor_pb2.List_Request,
        context: grpc.ServicerContext,
    ) -> ansys.api.speos.sensor.v1.sensor_pb2.List_Response:
        """List all SensorTemplates in manager"""
        pass


def add_SensorTemplatesManagerServicer_to_server(servicer: SensorTemplatesManagerServicer, server: grpc.Server) -> None: ...
