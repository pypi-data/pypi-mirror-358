"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import ansys.api.speos.sensor.v1.camera_sensor_pb2
import ansys.api.speos.sensor.v1.common_pb2
import ansys.api.speos.sensor.v1.irradiance_sensor_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class SensorTemplate(google.protobuf.message.Message):
    """Sensor template with its basic characteristics"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class Radiance(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        SENSOR_TYPE_PHOTOMETRIC_FIELD_NUMBER: builtins.int
        SENSOR_TYPE_COLORIMETRIC_FIELD_NUMBER: builtins.int
        SENSOR_TYPE_RADIOMETRIC_FIELD_NUMBER: builtins.int
        SENSOR_TYPE_SPECTRAL_FIELD_NUMBER: builtins.int
        FOCAL_FIELD_NUMBER: builtins.int
        INTEGRATION_ANGLE_FIELD_NUMBER: builtins.int
        DIMENSIONS_FIELD_NUMBER: builtins.int
        @property
        def sensor_type_photometric(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypePhotometric:
            """Sensor type : Photometric"""
            pass
        @property
        def sensor_type_colorimetric(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric:
            """ Sensor type : Colorimetric"""
            pass
        @property
        def sensor_type_radiometric(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypeRadiometric:
            """ Sensor type : Radiometric"""
            pass
        @property
        def sensor_type_spectral(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral:
            """Sensor type : Spectral"""
            pass
        focal: builtins.float = ...
        """Observer type : focal (mm)"""

        integration_angle: builtins.float = ...
        """Integration angle, in degree"""

        @property
        def dimensions(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorDimensions:
            """Dimensions of the sensor"""
            pass
        def __init__(self,
            *,
            sensor_type_photometric : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypePhotometric] = ...,
            sensor_type_colorimetric : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric] = ...,
            sensor_type_radiometric : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypeRadiometric] = ...,
            sensor_type_spectral : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral] = ...,
            focal : builtins.float = ...,
            integration_angle : builtins.float = ...,
            dimensions : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorDimensions] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["dimensions",b"dimensions","sensor_type",b"sensor_type","sensor_type_colorimetric",b"sensor_type_colorimetric","sensor_type_photometric",b"sensor_type_photometric","sensor_type_radiometric",b"sensor_type_radiometric","sensor_type_spectral",b"sensor_type_spectral"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["dimensions",b"dimensions","focal",b"focal","integration_angle",b"integration_angle","sensor_type",b"sensor_type","sensor_type_colorimetric",b"sensor_type_colorimetric","sensor_type_photometric",b"sensor_type_photometric","sensor_type_radiometric",b"sensor_type_radiometric","sensor_type_spectral",b"sensor_type_spectral"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["sensor_type",b"sensor_type"]) -> typing.Optional[typing_extensions.Literal["sensor_type_photometric","sensor_type_colorimetric","sensor_type_radiometric","sensor_type_spectral"]]: ...

    class Intensity(google.protobuf.message.Message):
        """Carthesian intensity sensor, generating a XMP result"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        SENSOR_TYPE_PHOTOMETRIC_FIELD_NUMBER: builtins.int
        SENSOR_TYPE_COLORIMETRIC_FIELD_NUMBER: builtins.int
        SENSOR_TYPE_RADIOMETRIC_FIELD_NUMBER: builtins.int
        SENSOR_TYPE_SPECTRAL_FIELD_NUMBER: builtins.int
        INTENSITY_ORIENTATION_X_AS_MERIDIAN_FIELD_NUMBER: builtins.int
        INTENSITY_ORIENTATION_X_AS_PARALLEL_FIELD_NUMBER: builtins.int
        INTENSITY_ORIENTATION_CONOSCOPIC_FIELD_NUMBER: builtins.int
        NEAR_FIELD_FIELD_NUMBER: builtins.int
        FROM_SOURCE_LOOKING_AT_SENSOR_FIELD_NUMBER: builtins.int
        FROM_SENSOR_LOOKING_AT_SOURCE_FIELD_NUMBER: builtins.int
        @property
        def sensor_type_photometric(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypePhotometric:
            """Sensor type: Photometric"""
            pass
        @property
        def sensor_type_colorimetric(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric:
            """Sensor type: Colorimetric"""
            pass
        @property
        def sensor_type_radiometric(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypeRadiometric:
            """Sensor type: Radiometric"""
            pass
        @property
        def sensor_type_spectral(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral:
            """Sensor type: Spectral"""
            pass
        @property
        def intensity_orientation_x_as_meridian(self) -> ansys.api.speos.sensor.v1.common_pb2.IntensityOrientationXAsMeridian:
            """Orientation type: X As Meridian, Y as Parallel"""
            pass
        @property
        def intensity_orientation_x_as_parallel(self) -> ansys.api.speos.sensor.v1.common_pb2.IntensityOrientationXAsParallel:
            """Orientation type: X As Parallel, Y as Meridian"""
            pass
        @property
        def intensity_orientation_conoscopic(self) -> ansys.api.speos.sensor.v1.common_pb2.IntensityOrientationConoscopic:
            """Orientation type: Conoscopic"""
            pass
        @property
        def near_field(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorNearField:
            """Activates Near field. When not set, near field is disabled for the sensor"""
            pass
        @property
        def from_source_looking_at_sensor(self) -> ansys.api.speos.sensor.v1.common_pb2.FromSourceLookingAtSensor:
            """Viewing direction from source looking at sensor"""
            pass
        @property
        def from_sensor_looking_at_source(self) -> ansys.api.speos.sensor.v1.common_pb2.FromSensorLookingAtSource:
            """Viewing direction from sensor looking at source"""
            pass
        def __init__(self,
            *,
            sensor_type_photometric : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypePhotometric] = ...,
            sensor_type_colorimetric : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypeColorimetric] = ...,
            sensor_type_radiometric : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypeRadiometric] = ...,
            sensor_type_spectral : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorTypeSpectral] = ...,
            intensity_orientation_x_as_meridian : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.IntensityOrientationXAsMeridian] = ...,
            intensity_orientation_x_as_parallel : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.IntensityOrientationXAsParallel] = ...,
            intensity_orientation_conoscopic : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.IntensityOrientationConoscopic] = ...,
            near_field : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorNearField] = ...,
            from_source_looking_at_sensor : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.FromSourceLookingAtSensor] = ...,
            from_sensor_looking_at_source : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.FromSensorLookingAtSource] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["from_sensor_looking_at_source",b"from_sensor_looking_at_source","from_source_looking_at_sensor",b"from_source_looking_at_sensor","intensity_orientation_conoscopic",b"intensity_orientation_conoscopic","intensity_orientation_x_as_meridian",b"intensity_orientation_x_as_meridian","intensity_orientation_x_as_parallel",b"intensity_orientation_x_as_parallel","near_field",b"near_field","orientation",b"orientation","sensor_type",b"sensor_type","sensor_type_colorimetric",b"sensor_type_colorimetric","sensor_type_photometric",b"sensor_type_photometric","sensor_type_radiometric",b"sensor_type_radiometric","sensor_type_spectral",b"sensor_type_spectral","viewing_direction",b"viewing_direction"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["from_sensor_looking_at_source",b"from_sensor_looking_at_source","from_source_looking_at_sensor",b"from_source_looking_at_sensor","intensity_orientation_conoscopic",b"intensity_orientation_conoscopic","intensity_orientation_x_as_meridian",b"intensity_orientation_x_as_meridian","intensity_orientation_x_as_parallel",b"intensity_orientation_x_as_parallel","near_field",b"near_field","orientation",b"orientation","sensor_type",b"sensor_type","sensor_type_colorimetric",b"sensor_type_colorimetric","sensor_type_photometric",b"sensor_type_photometric","sensor_type_radiometric",b"sensor_type_radiometric","sensor_type_spectral",b"sensor_type_spectral","viewing_direction",b"viewing_direction"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["orientation",b"orientation"]) -> typing.Optional[typing_extensions.Literal["intensity_orientation_x_as_meridian","intensity_orientation_x_as_parallel","intensity_orientation_conoscopic"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["sensor_type",b"sensor_type"]) -> typing.Optional[typing_extensions.Literal["sensor_type_photometric","sensor_type_colorimetric","sensor_type_radiometric","sensor_type_spectral"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["viewing_direction",b"viewing_direction"]) -> typing.Optional[typing_extensions.Literal["from_source_looking_at_sensor","from_sensor_looking_at_source"]]: ...

    class PolarIntensity(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class SensorFarField(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            INTEGRATION_ANGLE_FIELD_NUMBER: builtins.int
            integration_angle: builtins.float = ...
            """Integration angle (deg)"""

            def __init__(self,
                *,
                integration_angle : builtins.float = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["integration_angle",b"integration_angle"]) -> None: ...

        IESNA_A_FIELD_NUMBER: builtins.int
        IESNA_B_FIELD_NUMBER: builtins.int
        IESNA_C_FIELD_NUMBER: builtins.int
        EULUMDAT_FIELD_NUMBER: builtins.int
        DIMENSIONS_FIELD_NUMBER: builtins.int
        ADAPTIVE_SAMPLING_URI_FIELD_NUMBER: builtins.int
        FAR_FIELD_FIELD_NUMBER: builtins.int
        NEAR_FIELD_FIELD_NUMBER: builtins.int
        @property
        def iesna_a(self) -> ansys.api.speos.sensor.v1.common_pb2.PolarIntensityIesnaA:
            """Sensor format: Iesna A type"""
            pass
        @property
        def iesna_b(self) -> ansys.api.speos.sensor.v1.common_pb2.PolarIntensityIesnaB:
            """Sensor format: Iesna B type"""
            pass
        @property
        def iesna_c(self) -> ansys.api.speos.sensor.v1.common_pb2.PolarIntensityIesnaC:
            """Sensor format: Iesna C type"""
            pass
        @property
        def eulumdat(self) -> ansys.api.speos.sensor.v1.common_pb2.PolarIntensityEulumdat:
            """Sensor format: Eulumdat"""
            pass
        @property
        def dimensions(self) -> ansys.api.speos.sensor.v1.common_pb2.PolarIntensityDimensions:
            """Horizontal and vertical samplings. Dimensions are fixed by the format or the adaptive sampling file"""
            pass
        adaptive_sampling_uri: typing.Text = ...
        """Path to the adaptive sampling file"""

        @property
        def far_field(self) -> global___SensorTemplate.PolarIntensity.SensorFarField:
            """Far field, only used when near field is disabled for the sensor. It permits to set the integration angle."""
            pass
        @property
        def near_field(self) -> ansys.api.speos.sensor.v1.common_pb2.SensorNearField:
            """Near field parameters: cell distance and diameter. Integration angle needs to be calculated from these parameters."""
            pass
        def __init__(self,
            *,
            iesna_a : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.PolarIntensityIesnaA] = ...,
            iesna_b : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.PolarIntensityIesnaB] = ...,
            iesna_c : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.PolarIntensityIesnaC] = ...,
            eulumdat : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.PolarIntensityEulumdat] = ...,
            dimensions : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.PolarIntensityDimensions] = ...,
            adaptive_sampling_uri : typing.Text = ...,
            far_field : typing.Optional[global___SensorTemplate.PolarIntensity.SensorFarField] = ...,
            near_field : typing.Optional[ansys.api.speos.sensor.v1.common_pb2.SensorNearField] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["adaptive_sampling_uri",b"adaptive_sampling_uri","dimensions",b"dimensions","eulumdat",b"eulumdat","far_field",b"far_field","field",b"field","format",b"format","iesna_a",b"iesna_a","iesna_b",b"iesna_b","iesna_c",b"iesna_c","near_field",b"near_field","sampling",b"sampling"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["adaptive_sampling_uri",b"adaptive_sampling_uri","dimensions",b"dimensions","eulumdat",b"eulumdat","far_field",b"far_field","field",b"field","format",b"format","iesna_a",b"iesna_a","iesna_b",b"iesna_b","iesna_c",b"iesna_c","near_field",b"near_field","sampling",b"sampling"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["field",b"field"]) -> typing.Optional[typing_extensions.Literal["far_field","near_field"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["format",b"format"]) -> typing.Optional[typing_extensions.Literal["iesna_a","iesna_b","iesna_c","eulumdat"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["sampling",b"sampling"]) -> typing.Optional[typing_extensions.Literal["dimensions","adaptive_sampling_uri"]]: ...

    class Irradiance3D(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class IntegrationTypePlanar(google.protobuf.message.Message):
            """Integration made orthogonally with the sensor plane."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            REFLECTION_FIELD_NUMBER: builtins.int
            TRANSMISSION_FIELD_NUMBER: builtins.int
            ABSORPTION_FIELD_NUMBER: builtins.int
            reflection: builtins.bool = ...
            """Reflection is taking into account for the integrating faces of the sensor."""

            transmission: builtins.bool = ...
            """Transmission is taking into account for the integrating faces of the sensor."""

            absorption: builtins.bool = ...
            """Absorption is taking into account for the integrating faces of the sensor."""

            def __init__(self,
                *,
                reflection : builtins.bool = ...,
                transmission : builtins.bool = ...,
                absorption : builtins.bool = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["absorption",b"absorption","reflection",b"reflection","transmission",b"transmission"]) -> None: ...

        class IntegrationTypeRadial(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            def __init__(self,
                ) -> None: ...

        class TypePhotometric(google.protobuf.message.Message):
            """The sensor considers the visible spectrum and gets the results in lm/m2 or lx."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            INTEGRATION_TYPE_RADIAL_FIELD_NUMBER: builtins.int
            INTEGRATION_TYPE_PLANAR_FIELD_NUMBER: builtins.int
            @property
            def integration_type_radial(self) -> global___SensorTemplate.Irradiance3D.IntegrationTypeRadial:
                """Integration type : Radial"""
                pass
            @property
            def integration_type_planar(self) -> global___SensorTemplate.Irradiance3D.IntegrationTypePlanar:
                """Integration type : Planar"""
                pass
            def __init__(self,
                *,
                integration_type_radial : typing.Optional[global___SensorTemplate.Irradiance3D.IntegrationTypeRadial] = ...,
                integration_type_planar : typing.Optional[global___SensorTemplate.Irradiance3D.IntegrationTypePlanar] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["integration_type",b"integration_type","integration_type_planar",b"integration_type_planar","integration_type_radial",b"integration_type_radial"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["integration_type",b"integration_type","integration_type_planar",b"integration_type_planar","integration_type_radial",b"integration_type_radial"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["integration_type",b"integration_type"]) -> typing.Optional[typing_extensions.Literal["integration_type_radial","integration_type_planar"]]: ...

        class TypeRadiometric(google.protobuf.message.Message):
            """The sensor considers the entire spectrum and gets the results in W/m2."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            INTEGRATION_TYPE_RADIAL_FIELD_NUMBER: builtins.int
            INTEGRATION_TYPE_PLANAR_FIELD_NUMBER: builtins.int
            @property
            def integration_type_radial(self) -> global___SensorTemplate.Irradiance3D.IntegrationTypeRadial:
                """Integration type : Radial"""
                pass
            @property
            def integration_type_planar(self) -> global___SensorTemplate.Irradiance3D.IntegrationTypePlanar:
                """Integration type : Planar"""
                pass
            def __init__(self,
                *,
                integration_type_radial : typing.Optional[global___SensorTemplate.Irradiance3D.IntegrationTypeRadial] = ...,
                integration_type_planar : typing.Optional[global___SensorTemplate.Irradiance3D.IntegrationTypePlanar] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["integration_type",b"integration_type","integration_type_planar",b"integration_type_planar","integration_type_radial",b"integration_type_radial"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["integration_type",b"integration_type","integration_type_planar",b"integration_type_planar","integration_type_radial",b"integration_type_radial"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["integration_type",b"integration_type"]) -> typing.Optional[typing_extensions.Literal["integration_type_radial","integration_type_planar"]]: ...

        class TypeColorimetric(google.protobuf.message.Message):
            """Color results without any spectral data or layer separation (in lx or W//m2)."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            class _IntegrationType:
                ValueType = typing.NewType('ValueType', builtins.int)
                V: typing_extensions.TypeAlias = ValueType
            class _IntegrationTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_IntegrationType.ValueType], builtins.type):
                DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
                Radial: SensorTemplate.Irradiance3D.TypeColorimetric.IntegrationType.ValueType = ...  # 0
                """Integration type : Radial"""

                Planar: SensorTemplate.Irradiance3D.TypeColorimetric.IntegrationType.ValueType = ...  # 1
                """Integration type : Planar"""

            class IntegrationType(_IntegrationType, metaclass=_IntegrationTypeEnumTypeWrapper):
                """Defines how the illuminance is integrated in the sensor"""
                pass

            Radial: SensorTemplate.Irradiance3D.TypeColorimetric.IntegrationType.ValueType = ...  # 0
            """Integration type : Radial"""

            Planar: SensorTemplate.Irradiance3D.TypeColorimetric.IntegrationType.ValueType = ...  # 1
            """Integration type : Planar"""


            WAVELENGTH_START_FIELD_NUMBER: builtins.int
            WAVELENGTH_END_FIELD_NUMBER: builtins.int
            INTEGRATION_TYPE_FIELD_NUMBER: builtins.int
            wavelength_start: builtins.float = ...
            """(nm)"""

            wavelength_end: builtins.float = ...
            """(nm)"""

            integration_type: global___SensorTemplate.Irradiance3D.TypeColorimetric.IntegrationType.ValueType = ...
            """will determine the integration type of the sensor between radial and planar"""

            def __init__(self,
                *,
                wavelength_start : builtins.float = ...,
                wavelength_end : builtins.float = ...,
                integration_type : global___SensorTemplate.Irradiance3D.TypeColorimetric.IntegrationType.ValueType = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["integration_type",b"integration_type","wavelength_end",b"wavelength_end","wavelength_start",b"wavelength_start"]) -> None: ...

        TYPE_PHOTOMETRIC_FIELD_NUMBER: builtins.int
        TYPE_COLORIMETRIC_FIELD_NUMBER: builtins.int
        TYPE_RADIOMETRIC_FIELD_NUMBER: builtins.int
        @property
        def type_photometric(self) -> global___SensorTemplate.Irradiance3D.TypePhotometric:
            """Sensor type : Photometric"""
            pass
        @property
        def type_colorimetric(self) -> global___SensorTemplate.Irradiance3D.TypeColorimetric:
            """ Sensor type : Colorimetric"""
            pass
        @property
        def type_radiometric(self) -> global___SensorTemplate.Irradiance3D.TypeRadiometric:
            """ Sensor type : Radiometric"""
            pass
        def __init__(self,
            *,
            type_photometric : typing.Optional[global___SensorTemplate.Irradiance3D.TypePhotometric] = ...,
            type_colorimetric : typing.Optional[global___SensorTemplate.Irradiance3D.TypeColorimetric] = ...,
            type_radiometric : typing.Optional[global___SensorTemplate.Irradiance3D.TypeRadiometric] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["sensor_type",b"sensor_type","type_colorimetric",b"type_colorimetric","type_photometric",b"type_photometric","type_radiometric",b"type_radiometric"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["sensor_type",b"sensor_type","type_colorimetric",b"type_colorimetric","type_photometric",b"type_photometric","type_radiometric",b"type_radiometric"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["sensor_type",b"sensor_type"]) -> typing.Optional[typing_extensions.Literal["type_photometric","type_colorimetric","type_radiometric"]]: ...

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    CAMERA_SENSOR_TEMPLATE_FIELD_NUMBER: builtins.int
    IRRADIANCE_SENSOR_TEMPLATE_FIELD_NUMBER: builtins.int
    RADIANCE_SENSOR_TEMPLATE_FIELD_NUMBER: builtins.int
    INTENSITY_SENSOR_TEMPLATE_FIELD_NUMBER: builtins.int
    POLAR_INTENSITY_SENSOR_TEMPLATE_FIELD_NUMBER: builtins.int
    IRRADIANCE_3D_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """SensorTemplate name"""

    description: typing.Text = ...
    """SensorTemplate description"""

    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """User defined metadata"""
        pass
    @property
    def camera_sensor_template(self) -> ansys.api.speos.sensor.v1.camera_sensor_pb2.CameraSensorTemplate: ...
    @property
    def irradiance_sensor_template(self) -> ansys.api.speos.sensor.v1.irradiance_sensor_pb2.IrradianceSensorTemplate: ...
    @property
    def radiance_sensor_template(self) -> global___SensorTemplate.Radiance: ...
    @property
    def intensity_sensor_template(self) -> global___SensorTemplate.Intensity: ...
    @property
    def polar_intensity_sensor_template(self) -> global___SensorTemplate.PolarIntensity: ...
    @property
    def irradiance_3d(self) -> global___SensorTemplate.Irradiance3D: ...
    def __init__(self,
        *,
        name : typing.Text = ...,
        description : typing.Text = ...,
        metadata : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        camera_sensor_template : typing.Optional[ansys.api.speos.sensor.v1.camera_sensor_pb2.CameraSensorTemplate] = ...,
        irradiance_sensor_template : typing.Optional[ansys.api.speos.sensor.v1.irradiance_sensor_pb2.IrradianceSensorTemplate] = ...,
        radiance_sensor_template : typing.Optional[global___SensorTemplate.Radiance] = ...,
        intensity_sensor_template : typing.Optional[global___SensorTemplate.Intensity] = ...,
        polar_intensity_sensor_template : typing.Optional[global___SensorTemplate.PolarIntensity] = ...,
        irradiance_3d : typing.Optional[global___SensorTemplate.Irradiance3D] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["camera_sensor_template",b"camera_sensor_template","intensity_sensor_template",b"intensity_sensor_template","irradiance_3d",b"irradiance_3d","irradiance_sensor_template",b"irradiance_sensor_template","polar_intensity_sensor_template",b"polar_intensity_sensor_template","radiance_sensor_template",b"radiance_sensor_template","sensor_template",b"sensor_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["camera_sensor_template",b"camera_sensor_template","description",b"description","intensity_sensor_template",b"intensity_sensor_template","irradiance_3d",b"irradiance_3d","irradiance_sensor_template",b"irradiance_sensor_template","metadata",b"metadata","name",b"name","polar_intensity_sensor_template",b"polar_intensity_sensor_template","radiance_sensor_template",b"radiance_sensor_template","sensor_template",b"sensor_template"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["sensor_template",b"sensor_template"]) -> typing.Optional[typing_extensions.Literal["camera_sensor_template","irradiance_sensor_template","radiance_sensor_template","intensity_sensor_template","polar_intensity_sensor_template","irradiance_3d"]]: ...
global___SensorTemplate = SensorTemplate

class Create_Request(google.protobuf.message.Message):
    """Request to create a SensorTemplate in SensorTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SENSOR_TEMPLATE_FIELD_NUMBER: builtins.int
    @property
    def sensor_template(self) -> global___SensorTemplate:
        """SensorTemplate containing its basic characteristics"""
        pass
    def __init__(self,
        *,
        sensor_template : typing.Optional[global___SensorTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["sensor_template",b"sensor_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["sensor_template",b"sensor_template"]) -> None: ...
global___Create_Request = Create_Request

class Create_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SensorTemplate created in SensorTemplatesManager"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Create_Response = Create_Response

class Read_Request(google.protobuf.message.Message):
    """Request to read a SensorTemplate in SensorTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SensorTemplate to be read"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Read_Request = Read_Request

class Read_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SENSOR_TEMPLATE_FIELD_NUMBER: builtins.int
    @property
    def sensor_template(self) -> global___SensorTemplate:
        """SensorTemplate corresponding to the guid given in Read_Request"""
        pass
    def __init__(self,
        *,
        sensor_template : typing.Optional[global___SensorTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["sensor_template",b"sensor_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["sensor_template",b"sensor_template"]) -> None: ...
global___Read_Response = Read_Response

class Update_Request(google.protobuf.message.Message):
    """Request to update a SensorTemplate in SensorTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    SENSOR_TEMPLATE_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SensorTemplate to be updated"""

    @property
    def sensor_template(self) -> global___SensorTemplate:
        """SensorTemplate that will be used for the update"""
        pass
    def __init__(self,
        *,
        guid : typing.Text = ...,
        sensor_template : typing.Optional[global___SensorTemplate] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["sensor_template",b"sensor_template"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid","sensor_template",b"sensor_template"]) -> None: ...
global___Update_Request = Update_Request

class Update_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Update_Response = Update_Response

class Delete_Request(google.protobuf.message.Message):
    """Request to delete a SensorTemplate in SensorTemplatesManager"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUID_FIELD_NUMBER: builtins.int
    guid: typing.Text = ...
    """Guid of the SensorTemplate to be deleted"""

    def __init__(self,
        *,
        guid : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guid",b"guid"]) -> None: ...
global___Delete_Request = Delete_Request

class Delete_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Delete_Response = Delete_Response

class List_Request(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___List_Request = List_Request

class List_Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    GUIDS_FIELD_NUMBER: builtins.int
    @property
    def guids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Guids of the SensorTemplates in SensorTemplatesManager"""
        pass
    def __init__(self,
        *,
        guids : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["guids",b"guids"]) -> None: ...
global___List_Response = List_Response
