"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class IlluminanceTypePlanar(google.protobuf.message.Message):
    """Integration made orthogonally with the sensor plane."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___IlluminanceTypePlanar = IlluminanceTypePlanar

class IlluminanceTypeRadial(google.protobuf.message.Message):
    """Illuminance sensor with radial integration type."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___IlluminanceTypeRadial = IlluminanceTypeRadial

class IlluminanceTypeHemispherical(google.protobuf.message.Message):
    """Illuminance sensor with hemispherical integration type."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___IlluminanceTypeHemispherical = IlluminanceTypeHemispherical

class IlluminanceTypeCylindrical(google.protobuf.message.Message):
    """Illuminance sensor with cylindrical integration type."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___IlluminanceTypeCylindrical = IlluminanceTypeCylindrical

class IlluminanceTypeSemiCylindrical(google.protobuf.message.Message):
    """Illuminance sensor with semi cylindrical integration type."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___IlluminanceTypeSemiCylindrical = IlluminanceTypeSemiCylindrical

class WavelengthsRange(google.protobuf.message.Message):
    """Spectral range to use for simulation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    W_START_FIELD_NUMBER: builtins.int
    W_END_FIELD_NUMBER: builtins.int
    W_SAMPLING_FIELD_NUMBER: builtins.int
    w_start: builtins.float = ...
    """Defines the minimum wavelength. (nm)"""

    w_end: builtins.float = ...
    """Defines the maximum wavelength. (nm)"""

    w_sampling: builtins.int = ...
    """Defines the number of wavelengths to be taken into account between the minimum and maximum wavelengths set."""

    def __init__(self,
        *,
        w_start : builtins.float = ...,
        w_end : builtins.float = ...,
        w_sampling : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["w_end",b"w_end","w_sampling",b"w_sampling","w_start",b"w_start"]) -> None: ...
global___WavelengthsRange = WavelengthsRange

class SensorDimensions(google.protobuf.message.Message):
    """Dimensions of the sensor"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    X_START_FIELD_NUMBER: builtins.int
    X_END_FIELD_NUMBER: builtins.int
    X_SAMPLING_FIELD_NUMBER: builtins.int
    Y_START_FIELD_NUMBER: builtins.int
    Y_END_FIELD_NUMBER: builtins.int
    Y_SAMPLING_FIELD_NUMBER: builtins.int
    x_start: builtins.float = ...
    """Start distance from center along X direction (mm)."""

    x_end: builtins.float = ...
    """End distance from center along X direction (mm)."""

    x_sampling: builtins.int = ...
    """Number of pixels along X direction."""

    y_start: builtins.float = ...
    """Start distance from center along Y direction (mm)."""

    y_end: builtins.float = ...
    """End distance from center along Y direction (mm)."""

    y_sampling: builtins.int = ...
    """Number of pixels along Y direction."""

    def __init__(self,
        *,
        x_start : builtins.float = ...,
        x_end : builtins.float = ...,
        x_sampling : builtins.int = ...,
        y_start : builtins.float = ...,
        y_end : builtins.float = ...,
        y_sampling : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["x_end",b"x_end","x_sampling",b"x_sampling","x_start",b"x_start","y_end",b"y_end","y_sampling",b"y_sampling","y_start",b"y_start"]) -> None: ...
global___SensorDimensions = SensorDimensions

class SensorTypePhotometric(google.protobuf.message.Message):
    """The sensor considers the visible spectrum and gets the results."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___SensorTypePhotometric = SensorTypePhotometric

class SensorTypeColorimetric(google.protobuf.message.Message):
    """Color results without any spectral data or layer separation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    WAVELENGTHS_RANGE_FIELD_NUMBER: builtins.int
    @property
    def wavelengths_range(self) -> global___WavelengthsRange:
        """Spectral excursion to use for simulation"""
        pass
    def __init__(self,
        *,
        wavelengths_range : typing.Optional[global___WavelengthsRange] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["wavelengths_range",b"wavelengths_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["wavelengths_range",b"wavelengths_range"]) -> None: ...
global___SensorTypeColorimetric = SensorTypeColorimetric

class SensorTypeRadiometric(google.protobuf.message.Message):
    """The sensor considers the entire spectrum and gets the results."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___SensorTypeRadiometric = SensorTypeRadiometric

class SensorTypeSpectral(google.protobuf.message.Message):
    """Color results and spectral data separated by wavelength."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    WAVELENGTHS_RANGE_FIELD_NUMBER: builtins.int
    @property
    def wavelengths_range(self) -> global___WavelengthsRange:
        """Spectral excursion to use for simulation"""
        pass
    def __init__(self,
        *,
        wavelengths_range : typing.Optional[global___WavelengthsRange] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["wavelengths_range",b"wavelengths_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["wavelengths_range",b"wavelengths_range"]) -> None: ...
global___SensorTypeSpectral = SensorTypeSpectral

class IntensityDimensions(google.protobuf.message.Message):
    """Dimensions of the non conoscopic intensity sensor"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    X_START_FIELD_NUMBER: builtins.int
    X_END_FIELD_NUMBER: builtins.int
    X_SAMPLING_FIELD_NUMBER: builtins.int
    Y_START_FIELD_NUMBER: builtins.int
    Y_END_FIELD_NUMBER: builtins.int
    Y_SAMPLING_FIELD_NUMBER: builtins.int
    x_start: builtins.float = ...
    """Start angle along X direction (deg)."""

    x_end: builtins.float = ...
    """End angle along X direction (deg)."""

    x_sampling: builtins.int = ...
    """Number of pixels along X direction."""

    y_start: builtins.float = ...
    """Start angle along Y direction (deg)."""

    y_end: builtins.float = ...
    """End angle along Y direction (deg)."""

    y_sampling: builtins.int = ...
    """Number of pixels along Y direction."""

    def __init__(self,
        *,
        x_start : builtins.float = ...,
        x_end : builtins.float = ...,
        x_sampling : builtins.int = ...,
        y_start : builtins.float = ...,
        y_end : builtins.float = ...,
        y_sampling : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["x_end",b"x_end","x_sampling",b"x_sampling","x_start",b"x_start","y_end",b"y_end","y_sampling",b"y_sampling","y_start",b"y_start"]) -> None: ...
global___IntensityDimensions = IntensityDimensions

class ConoscopicIntensityDimensions(google.protobuf.message.Message):
    """Dimensions of the conoscopic intensity sensor"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    THETA_MAX_FIELD_NUMBER: builtins.int
    SAMPLING_FIELD_NUMBER: builtins.int
    theta_max: builtins.float = ...
    """Maximum theta angle (deg)."""

    sampling: builtins.int = ...
    """Number of pixels along Theta."""

    def __init__(self,
        *,
        theta_max : builtins.float = ...,
        sampling : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["sampling",b"sampling","theta_max",b"theta_max"]) -> None: ...
global___ConoscopicIntensityDimensions = ConoscopicIntensityDimensions

class IntensityOrientationXAsMeridian(google.protobuf.message.Message):
    """The sensor considers X direction as meridian and Y direction as parallel."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INTENSITY_DIMENSIONS_FIELD_NUMBER: builtins.int
    @property
    def intensity_dimensions(self) -> global___IntensityDimensions:
        """Dimensions for non conoscopic sensor"""
        pass
    def __init__(self,
        *,
        intensity_dimensions : typing.Optional[global___IntensityDimensions] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["intensity_dimensions",b"intensity_dimensions"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["intensity_dimensions",b"intensity_dimensions"]) -> None: ...
global___IntensityOrientationXAsMeridian = IntensityOrientationXAsMeridian

class IntensityOrientationXAsParallel(google.protobuf.message.Message):
    """The sensor considers X direction as parallel and Y direction as meridian."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    INTENSITY_DIMENSIONS_FIELD_NUMBER: builtins.int
    @property
    def intensity_dimensions(self) -> global___IntensityDimensions:
        """Dimensions for non conoscopic sensor"""
        pass
    def __init__(self,
        *,
        intensity_dimensions : typing.Optional[global___IntensityDimensions] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["intensity_dimensions",b"intensity_dimensions"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["intensity_dimensions",b"intensity_dimensions"]) -> None: ...
global___IntensityOrientationXAsParallel = IntensityOrientationXAsParallel

class IntensityOrientationConoscopic(google.protobuf.message.Message):
    """The sensor considers conoscopic orientation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONOSCOPIC_INTENSITY_DIMENSIONS_FIELD_NUMBER: builtins.int
    @property
    def conoscopic_intensity_dimensions(self) -> global___ConoscopicIntensityDimensions:
        """Dimensions for non conoscopic sensor"""
        pass
    def __init__(self,
        *,
        conoscopic_intensity_dimensions : typing.Optional[global___ConoscopicIntensityDimensions] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["conoscopic_intensity_dimensions",b"conoscopic_intensity_dimensions"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["conoscopic_intensity_dimensions",b"conoscopic_intensity_dimensions"]) -> None: ...
global___IntensityOrientationConoscopic = IntensityOrientationConoscopic

class PolarIntensityIesnaA(google.protobuf.message.Message):
    """The polar intensity sensor generates an Iesna A type file."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___PolarIntensityIesnaA = PolarIntensityIesnaA

class PolarIntensityIesnaB(google.protobuf.message.Message):
    """The polar intensity sensor generates an Iesna B type file."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___PolarIntensityIesnaB = PolarIntensityIesnaB

class PolarIntensityIesnaC(google.protobuf.message.Message):
    """The polar intensity sensor generates an Iesna C type file."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___PolarIntensityIesnaC = PolarIntensityIesnaC

class PolarIntensityEulumdat(google.protobuf.message.Message):
    """The polar intensity sensor generates an Eulumdat file."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___PolarIntensityEulumdat = PolarIntensityEulumdat

class SensorNearField(google.protobuf.message.Message):
    """Near field intensity or polar intensity sensor"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CELL_DISTANCE_FIELD_NUMBER: builtins.int
    CELL_INTEGRATION_ANGLE_FIELD_NUMBER: builtins.int
    cell_distance: builtins.float = ...
    """Distance of the cell from the center of the intensity sensor (mm)."""

    cell_integration_angle: builtins.float = ...
    """Integration angle of the cell (deg). Used with cell_distance to calculate the cell diameter."""

    def __init__(self,
        *,
        cell_distance : builtins.float = ...,
        cell_integration_angle : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cell_distance",b"cell_distance","cell_integration_angle",b"cell_integration_angle"]) -> None: ...
global___SensorNearField = SensorNearField

class FromSourceLookingAtSensor(google.protobuf.message.Message):
    """Intensity result viewing direction"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___FromSourceLookingAtSensor = FromSourceLookingAtSensor

class FromSensorLookingAtSource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___FromSensorLookingAtSource = FromSensorLookingAtSource

class PolarIntensityDimensions(google.protobuf.message.Message):
    """Dimensions of the conoscopic intensity sensor"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    HORIZONTAL_SAMPLING_FIELD_NUMBER: builtins.int
    VERTICAL_SAMPLING_FIELD_NUMBER: builtins.int
    horizontal_sampling: builtins.int = ...
    """Number of horizontal samples of the intensity file (IESNA or EULUMDAT)."""

    vertical_sampling: builtins.int = ...
    """Number of vertical samples of the intensity file (IESNA or EULUMDAT)."""

    def __init__(self,
        *,
        horizontal_sampling : builtins.int = ...,
        vertical_sampling : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["horizontal_sampling",b"horizontal_sampling","vertical_sampling",b"vertical_sampling"]) -> None: ...
global___PolarIntensityDimensions = PolarIntensityDimensions
