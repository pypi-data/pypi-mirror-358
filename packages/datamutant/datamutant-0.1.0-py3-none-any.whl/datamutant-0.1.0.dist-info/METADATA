Metadata-Version: 2.4
Name: datamutant
Version: 0.1.0
Summary: A Python library for advanced data analysis algorithms
Home-page: https://github.com/Gman-Superfly/datamutant
Author: Oscar Goldman
Author-email: Oscar Goldman <dev@memoir.id>
License: MIT License
        
        Copyright (c) 2025 Monotonicity Tools
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE. 
Project-URL: Homepage, https://github.com/Gman-Superfly/datamutant
Project-URL: Repository, https://github.com/Gman-Superfly/datamutant.git
Project-URL: Issues, https://github.com/Gman-Superfly/datamutant/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch>=1.9.0
Requires-Dist: numpy>=1.19.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# DataMutant

A Python library for advanced data analysis algorithms with a modular architecture that supports multiple specialized tools.

## 🧬 What is DataMutant?

DataMutant is designed to be a comprehensive toolkit for data scientists and researchers, providing efficient implementations of advanced algorithms for data analysis, pattern recognition, and machine learning. Each algorithm is organized as a separate module with its own examples and documentation.

## 🚀 Features

* **Modular Architecture**: Each algorithm is self-contained with examples and detailed documentation
* **High Performance**: Optimized implementations using PyTorch
* **Comprehensive Testing**: Full test coverage for all algorithms
* **Type Safety**: Complete type hints and validation
* **Extensible Design**: Easy to add new algorithms

## 📦 Available Algorithms

### 1. Sublinear Monotonicity Score
- **Location**: `datamutant.monotonicity_score`
- **Purpose**: Measure how close sequences are to being monotonically increasing
- **Complexity**: O((1/ε) log n) - sublinear sampling algorithm
- **Documentation**: [View detailed docs](./datamutant/monotonicity_score/README.md)

## 📚 Installation

```bash
pip install datamutant
```

For development:
```bash
pip install datamutant[dev]
```

## 🔥 Quick Start

```python
import torch
from datamutant.monotonicity_score import sublinear_monotonicity_score

# Analyze sequence monotonicity
sequence = torch.tensor([1.0, 2.0, 3.0, 2.5, 4.0])
score = sublinear_monotonicity_score(sequence)
print(f"Monotonicity score: {score}")  # ~0.8
```

## 🏗️ Project Structure

```
datamutant/
├── datamutant/                          # Main package
│   ├── __init__.py                      # Package exports
│   └── monotonicity_score/              # Monotonicity algorithm
│       ├── __init__.py                  # Module exports
│       ├── sublinear.py                 # Core algorithm implementation
│       ├── models.py                    # Neural network models
│       ├── README.md                    # Algorithm documentation
│       └── examples/                    # Usage examples
│           ├── basic_usage.py
│           └── model_training.py
├── tests/                               # Comprehensive tests
│   └── monotonicity_score/
│       ├── test_core.py
│       └── test_models.py
├── setup.py                             # Package setup
├── pyproject.toml                       # Modern packaging
└── README.md                            # This file
```

## 📖 Algorithm Documentation

Each algorithm has its own detailed documentation:

- **Sublinear Monotonicity Score**: [./datamutant/monotonicity_score/README.md](./datamutant/monotonicity_score/README.md)

## 🎯 Examples

Each algorithm includes comprehensive examples in its own directory:

```bash
# Run monotonicity score examples
python -m datamutant.monotonicity_score.examples.basic_usage
python -m datamutant.monotonicity_score.examples.model_training
```

## 🧪 Testing

Run all tests:
```bash
pytest
```

Run tests for specific algorithms:
```bash
pytest tests/monotonicity_score/
```

## 🤝 Contributing

1. Each new algorithm should be in its own module under `datamutant/`
2. Include comprehensive documentation in the algorithm's README.md
3. Provide examples in the `examples/` subdirectory
4. Add tests in the corresponding `tests/` directory
5. Update this main README with a short description

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. 
