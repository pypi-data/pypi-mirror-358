name: CI-CD

# only run on pushes to main or pull requests
on:
    push:
        # push to any branch *
        branches: [main]
    pull_request:
        branches: [main, development]

jobs:
    ################################################################################################
    # Unit-Tests: Run unit tests using pytest
    ################################################################################################
    Unit-Tests:
        runs-on: ${{ matrix.os }}
        timeout-minutes: 15 # Consider increasing timeout
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest, macos-14, windows-latest]
                env: ["py313", "py311", "py312"]

        steps:
            - uses: actions/checkout@v4

            - name: Install Pixi
              uses: prefix-dev/setup-pixi@v0.8.10
              with:
                  environments: ${{ matrix.env }}
                  pixi-version: v0.48.1
                  cache: true
                  locked: true # wont be the same because of the tag

            - name: Run pytest
              run: |
                  pixi run -e ${{ matrix.env }} test

    #         - name: Use Codecov to track coverage
    #           uses: codecov/codecov-action@v3
    #           with:
    #             token: ${{ secrets.CODECOV_TOKEN }}
    #             files: ./coverage-report/coverage.xml
    #             fail_ci_if_error: true
    #             verbose: true
    #             name: codecov-umbrella

    # ################################################################################################
    # Ruff: Run ruff linter
    ################################################################################################
    Ruff:
        runs-on: ubuntu-latest
        env:
            PIXI_ENV: "style"
        strategy:
            matrix:
                os: [ubuntu-latest]

        steps:
            - uses: actions/checkout@v4
            - name: Install Pixi
              uses: prefix-dev/setup-pixi@v0.8.10
              with:
                  environments: ${{ env.PIXI_ENV }}
                  pixi-version: v0.48.1
                  cache: true
                  locked: true
                  # cache-key: pixi-ENV_${{ env.PIXI_ENV }}-

            - name: Run Ruff
              run: pixi run --environment style lint --exit-zero

    ################################################################################################
    # Docs: Build and deploy mkdocs documentation
    ################################################################################################
    Docs:
        runs-on: ubuntu-latest
        env:
            PIXI_ENV: "dev"

        permissions:
            # Need to give the action permission to write to the repository to deploy the docs
            contents: write

        strategy:
            matrix:
                os: [ubuntu-latest]

        steps:
            - name: Check-out repository
              uses: actions/checkout@v4

            - name: Configure Git Credentials
              run: |
                  git config user.name github-actions[bot]
                  git config user.email github-actions[bot]@users.noreply.github.com

            - name: Install Pixi
              uses: prefix-dev/setup-pixi@v0.8.0
              with:
                  environments: ${{ env.PIXI_ENV }}
                  pixi-version: v0.48.1
                  cache: true
                  locked: false # wont be the same because of the tag
                  # cache-key: pixi-ENV_${{ env.PIXI_ENV }}-

            - name: Build and deploy documentation
              run: pixi run doc-deploy

    ################################################################################################
    # Semantic-Release: Run semantic-release to automate versioning and publishing
    ################################################################################################
    Semantic-Release:
        permissions:
            # Read releases read-all
            contents: write
            packages: write
            issues: write
            pull-requests: write

        needs: [Unit-Tests, Ruff, Docs]

        # if pulling to main, deploy to PyPI
        if: github.ref == 'refs/heads/main'

        env:
            PIXI_ENV: "publish"

        strategy:
            matrix:
                os: [ubuntu-latest]
                python-version: ["3.12"]

        # Set up operating system
        runs-on: ${{ matrix.os }}

        # Concurrency is for preventing multiple runs of the same workflow
        concurrency: release

        outputs:
            released: ${{ steps.release.outputs.released }}
            version: ${{ steps.release.outputs.version }}
            tag: ${{ steps.release.outputs.tag }}

        # Define job steps
        steps:
            - name: Check-out repository
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Install Pixi
              uses: prefix-dev/setup-pixi@v0.8.0
              env:
                  RUNNER_DEBUG: true
              with:
                  environments: ${{ env.PIXI_ENV }}
                  pixi-version: v0.48.1
                  cache: true
                  locked: false
                  # cache-key: pixi-ENV_${{ env.PIXI_ENV }}-

            - name: Run semantic-release
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              id: release
              run: pixi run release

    ################################################################################################
    # Publish-To-PyPi & Test-PyPi-Installation: Publish to PyPI and test installation
    ################################################################################################
    Publish-To-PyPi:
        needs: Semantic-Release
        env:
            PIXI_ENV: "publish"
        if: needs.Semantic-Release.outputs.released == 'true'
        strategy:
            matrix:
                os: [ubuntu-latest]

        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout the code with tag ${{ needs.Semantic-Release.outputs.tag }}
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.Semantic-Release.outputs.tag }}

            - name: Install Pixi
              uses: prefix-dev/setup-pixi@v0.8.0
              with:
                  environments: ${{ env.PIXI_ENV }}
                  pixi-version: v0.48.1
                  # cache-key: pixi-ENV_${{ env.PIXI_ENV }}-
                  cache: true
                  locked: false # wont be the same because of the tag

            - name: Publish to PyPI
              env:
                  HATCH_INDEX_USER: __token__
                  HATCH_INDEX_AUTH: ${{ secrets.PYPI_API_TOKEN }}
                  HATCH_INDEX_REPO: https://upload.pypi.org/legacy/
              run: |
                  pixi run publish-pypi

    # Test-PyPi-Installation:
    #     needs: Publish-To-PyPi
    #     runs-on: ${{ matrix.os }}
    #     strategy:
    #         matrix:
    #             os: [ubuntu-latest, macos-latest]
    #             python-version: ["3.12"]
    #             environments: [publish]

    #     steps:
    #         - name: Checkout the code with tag ${{ needs.Semantic-Release.outputs.tag }}
    #           uses: actions/checkout@v4
    #           with:
    #               ref: ${{ needs.Semantic-Release.outputs.tag }}

    #         - name: setup python ${{ matrix.python-version }}
    #           uses: actions/setup-python@v2
    #           with:
    #               python-version: ${{ matrix.python-version }}

    #         - name: Install using PyPI
    #           run: |
    #               pip install testmypixipkg
