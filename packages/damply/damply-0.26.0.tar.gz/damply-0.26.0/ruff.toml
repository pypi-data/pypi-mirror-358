###########################################################################
# RUFF CONFIGURATION
# Ruff is an extremely fast Python linter and code formatter, written in Rust.
# https://docs.astral.sh/ruff/settings/
# Show detailed output with rule codes and explanations
output-format = "full"
# Automatically fix issues when possible
fix = true
# Directories to exclude from all checks
extend-exclude = [
    "docs/*", # Skip documentation files
    "tests/*", # Skip test files

]
# Set the ruff cache directory
cache-dir = ".cache/ruff"

###########################################################################
# RUFF LINTING
# https://docs.astral.sh/ruff/linter/
[lint]
select = [
    ###########################################################################
    # TYPE ANNOTATIONS
    # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ANN", # Enforces type annotations for functions, improving code clarity and IDE support
    # https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "TCH", # Ensures consistent usage of typing constructs and validates type checking patterns
    ###########################################################################
    # IMPORTS
    # https://docs.astral.sh/ruff/rules/#isort-i
    "I", # Automatically sorts and formats imports according to PEP 8
    # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
    "ICN", # Standardizes import conventions, especially for commonly confused modules
    # https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid
    "TID", # Prevents banned imports and enforces consistent import patterns
    ###########################################################################
    # CODE QUALITY
    # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "B", # Catches common bugs and design problems before they cause issues
    # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "A", # Prevents naming conflicts with Python built-ins
    # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "COM", # Enforces consistent comma usage in multi-line structures
    # https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
    "T10", # Prevents committed debugging code like breakpoint() statements
    # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "T20", # Catches print statements that should be proper logging calls
    # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "EM", # Ensures exception messages are properly formatted
    # https://docs.astral.sh/ruff/rules/#tryceratops-try
    "TRY", # Prevent try-except handling antipatterns https://blog.guilatrova.dev/handling-exceptions-in-python-like-a-pro
    # https://docs.astral.sh/ruff/rules/#refurb-furb
    "FURB", # refurbish and modernize codebases
    # https://docs.astral.sh/ruff/rules/#pandas-vet-pd
    "PD", # opinionated pandas code linting
    ###########################################################################
    # STANDARDS & STYLE
    # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "PTH", # Modernizes code by using pathlib instead of os.path
    # https://docs.astral.sh/ruff/rules/#pylint-pl
    "PL", # Applies Pylint's battle-tested code quality rules
    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SIM", # Identifies code that can be simplified or made more idiomatic
    # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "F", # Finds logical errors like undefined names and unused imports
    # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "N", # Enforces PEP 8 naming conventions for consistency

]
ignore = [
    "PLR0913", # Permits functions with many arguments when necessary
    "D100", # Allows modules without docstrings
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "COM812", # Avoids conflict with Ruff formatter trailing comma rules
    "D206",
    "A004", # allow rich print to be imported
    "PLR2004", # allow magic values to be used
    "N815", # allow mixed case
]

# https://docs.astral.sh/ruff/settings/#isort
[lint.isort]
# Define project-specific imports for better organization
known-first-party = ["{{ package_name }}"]

# https://docs.astral.sh/ruff/settings/#pydocstyle
[lint.pydocstyle]
# Use NumPy docstring convention for clear, structured documentation
convention = "numpy"

# https://docs.astral.sh/ruff/settings/#per-file-ignores
[lint.per-file-ignores]
# Allow assert statements in test files
"tests/*" = ["S101"]

# https://docs.astral.sh/ruff/settings/#mccabe
[lint.mccabe]
# Set maximum cyclomatic complexity to prevent overly complex functions
max-complexity = 10

###########################################################################
# FORMATTING
# https://docs.astral.sh/ruff/formatter/
[format]
# Use single quotes for string literals
quote-style = "single"
# Use tabs for indentation
indent-style = "tab"
# Format code blocks within docstrings
docstring-code-format = true
