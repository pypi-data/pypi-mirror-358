<style>
    .page-body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }

    .memory-bar {
        height: 6px;
        background: var(--tblr-border-color);
        border-radius: 3px;
        overflow: hidden;
    }

    .memory-bar-fill {
        height: 100%;
        background: linear-gradient(90deg, var(--tblr-primary), var(--tblr-purple));
        transition: width 0.3s ease;
    }

    .memory-item {
        transition: all 0.3s ease;
        border-left: 3px solid var(--tblr-primary);
    }

    .memory-item:hover {
        background-color: var(--tblr-bg-surface-secondary);
        transform: translateX(2px);
    }

    .connection-item {
        font-family: var(--tblr-font-monospace);
        font-size: 0.875rem;
        border-left: 3px solid var(--tblr-success);
    }

    .thread-item {
        border-left: 3px solid var(--tblr-warning);
    }

    .env-var {
        font-family: var(--tblr-font-monospace);
        font-size: 0.8rem;
        word-break: break-all;
    }

    .metric-large {
        font-size: 2rem;
        font-weight: 700;
        line-height: 1;
    }

    .tab-content-active {
        display: block;
    }

    .tab-content-inactive {
        display: none;
    }

    .card-hover:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
    }
</style>
</head>
<body>
<div class="page">
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col">
                    <div class="page-pretitle">Memory Analysis</div>
                    <h2 class="page-title">
                        <i class="ti ti-activity me-2"></i>
                        PSUtil Dashboard - rdm-back-admin
                    </h2>
                </div>
            </div>
        </div>
    </div>

    <div class="page-body">
        <div class="container-xl">
            <!-- Summary Cards -->
            <div class="row row-deck row-cards mb-4" id="summaryCards">
                <!-- Cards will be generated by JavaScript -->
            </div>

            <!-- Main Content -->
            <div class="card">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs" id="mainTabs">
                        <li class="nav-item">
                            <a class="nav-link active" href="#memory" onclick="showTab('memory')">
                                <i class="ti ti-cpu me-1"></i>Memory Analysis
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#connections" onclick="showTab('connections')">
                                <i class="ti ti-network me-1"></i>Network Connections
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#threads" onclick="showTab('threads')">
                                <i class="ti ti-brand-threading me-1"></i>Threads
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#environment" onclick="showTab('environment')">
                                <i class="ti ti-settings me-1"></i>Environment
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#process" onclick="showTab('process')">
                                <i class="ti ti-info-circle me-1"></i>Process Info
                            </a>
                        </li>
                    </ul>
                </div>

                <div class="card-body">
                    <!-- Memory Tab -->
                    <div id="memory" class="tab-content-active">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <input type="text" class="form-control" placeholder="Filter memory maps..."
                                       id="memoryFilter">
                            </div>
                            <div class="col-md-8">
                                <div class="btn-group">
                                    <button class="btn btn-primary" onclick="sortMemoryMaps('size')">
                                        <i class="ti ti-sort-descending me-1"></i>Sort by Size
                                    </button>
                                    <button class="btn btn-outline-primary" onclick="sortMemoryMaps('rss')">
                                        <i class="ti ti-sort-descending me-1"></i>Sort by RSS
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div id="memoryMaps"></div>
                    </div>

                    <!-- Connections Tab -->
                    <div id="connections" class="tab-content-inactive">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <input type="text" class="form-control" placeholder="Filter connections..."
                                       id="connectionFilter">
                            </div>
                        </div>
                        <div id="networkConnections"></div>
                    </div>

                    <!-- Threads Tab -->
                    <div id="threads" class="tab-content-inactive">
                        <div id="threadInfo"></div>
                    </div>

                    <!-- Environment Tab -->
                    <div id="environment" class="tab-content-inactive">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <input type="text" class="form-control" placeholder="Filter environment variables..."
                                       id="envFilter">
                            </div>
                        </div>
                        <div id="environmentVars"></div>
                    </div>

                    <!-- Process Tab -->
                    <div id="process" class="tab-content-inactive">
                        <div class="row" id="processInfo"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const psutilData = {{ widget.process|tojson }};

    let currentMemoryMaps = [];
    let sortDirection = 'desc';

    function formatBytes(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function parseMemoryInfo(memInfo) {
        const match = memInfo.match(/rss=(\d+), vms=(\d+), shared=(\d+)/);
        if (match) {
            return {
                rss: parseInt(match[1]),
                vms: parseInt(match[2]),
                shared: parseInt(match[3])
            };
        }
        return {rss: 0, vms: 0, shared: 0};
    }

    function parseMemoryFullInfo(memInfo) {
        const match = memInfo.match(/rss=(\d+), vms=(\d+), shared=(\d+), text=(\d+), lib=(\d+), data=(\d+), dirty=(\d+), uss=(\d+), pss=(\d+), swap=(\d+)/);
        if (match) {
            return {
                rss: parseInt(match[1]),
                vms: parseInt(match[2]),
                shared: parseInt(match[3]),
                text: parseInt(match[4]),
                lib: parseInt(match[5]),
                data: parseInt(match[6]),
                dirty: parseInt(match[7]),
                uss: parseInt(match[8]),
                pss: parseInt(match[9]),
                swap: parseInt(match[10])
            };
        }
        return {rss: 0, vms: 0, shared: 0, text: 0, lib: 0, data: 0, dirty: 0, uss: 0, pss: 0, swap: 0};
    }

    function createSummaryCards() {
        const memInfo = parseMemoryInfo(psutilData.memory_info);
        const fullMemInfo = parseMemoryFullInfo(psutilData.memory_full_info);

        const cards = [
            {
                title: 'RSS Memory',
                metric: formatBytes(memInfo.rss),
                subMetric: `${psutilData.memory_percent.toFixed(2)}% of system`,
                color: memInfo.rss > 500000000 ? 'red' : memInfo.rss > 200000000 ? 'yellow' : 'green',
                icon: 'ti-cpu'
            },
            {
                title: 'Virtual Memory',
                metric: formatBytes(memInfo.vms),
                subMetric: `Data: ${formatBytes(fullMemInfo.data)}`,
                color: 'blue',
                icon: 'ti-refresh'
            },
            {
                title: 'Threads',
                metric: psutilData.num_threads,
                subMetric: `${psutilData.threads.length} active threads`,
                color: psutilData.num_threads > 50 ? 'yellow' : 'green',
                icon: 'ti-brand-threading'
            },
            {
                title: 'Connections',
                metric: psutilData.net_connections.length,
                subMetric: `${psutilData.num_fds} file descriptors`,
                color: psutilData.net_connections.length > 20 ? 'yellow' : 'green',
                icon: 'ti-network'
            },
            {
                title: 'CPU Usage',
                metric: `${psutilData.cpu_percent}%`,
                subMetric: `${psutilData.cpu_num} cores available`,
                color: psutilData.cpu_percent > 80 ? 'red' : psutilData.cpu_percent > 50 ? 'yellow' : 'green',
                icon: 'ti-activity'
            },
            {
                title: 'Unique Memory (USS)',
                metric: formatBytes(fullMemInfo.uss),
                subMetric: `PSS: ${formatBytes(fullMemInfo.pss)}`,
                color: fullMemInfo.uss > 300000000 ? 'red' : fullMemInfo.uss > 150000000 ? 'yellow' : 'green',
                icon: 'ti-lock'
            }
        ];

        const container = document.getElementById('summaryCards');
        container.innerHTML = cards.map(card => `
                <div class="col-sm-6 col-lg-4">
                    <div class="card card-hover">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="subheader">${card.title}</div>
                                <div class="ms-auto">
                                    <div class="text-${card.color} d-inline-flex align-items-center lh-1">
                                        <i class="ti ${card.icon}"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="h1 mb-3 metric-large text-${card.color}">${card.metric}</div>
                            <div class="d-flex mb-2">
                                <div class="text-muted">${card.subMetric}</div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
    }

    function createMemoryMaps() {
        currentMemoryMaps = [...psutilData.memory_maps].sort((a, b) => b.rss - a.rss);
        renderMemoryMaps();
    }

    function renderMemoryMaps() {
        const maxRss = Math.max(...currentMemoryMaps.map(m => m.rss));
        const container = document.getElementById('memoryMaps');

        container.innerHTML = currentMemoryMaps.map(map => {
            const percentage = (map.rss / maxRss) * 100;
            const pathDisplay = map.path.length > 80 ? '...' + map.path.slice(-77) : map.path;

            return `
                    <div class="card mb-2 memory-item">
                        <div class="card-body py-2">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="fw-bold text-truncate" title="${map.path}">
                                        ${pathDisplay}
                                    </div>
                                    <div class="memory-bar mt-1">
                                        <div class="memory-bar-fill" style="width: ${percentage}%"></div>
                                    </div>
                                </div>
                                <div class="col-auto text-end">
                                    <div class="text-primary fw-bold">${formatBytes(map.rss)}</div>
                                    <div class="text-muted small">Size: ${formatBytes(map.size)}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
        }).join('');
    }

    function createNetworkConnections() {
        const container = document.getElementById('networkConnections');

        const connections = psutilData.net_connections.map(conn => {
            const match = conn.match(/fd=(\d+).*laddr=addr\(ip='([^']+)', port=(\d+)\).*raddr=addr\(ip='([^']*)', port=(\d*)\).*status='([^']+)'/);
            if (match) {
                return {
                    fd: match[1],
                    local_ip: match[2],
                    local_port: match[3],
                    remote_ip: match[4] || 'N/A',
                    remote_port: match[5] || 'N/A',
                    status: match[6]
                };
            }
            return null;
        }).filter(Boolean);

        container.innerHTML = connections.map(conn => `
                <div class="card mb-2 connection-item">
                    <div class="card-body py-2">
                        <div class="row align-items-center">
                            <div class="col-md-2">
                                <span class="badge bg-blue">FD ${conn.fd}</span>
                            </div>
                            <div class="col-md-3">
                                <div class="text-muted small">Local</div>
                                <div>${conn.local_ip}:${conn.local_port}</div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-muted small">Remote</div>
                                <div>${conn.remote_ip}:${conn.remote_port}</div>
                            </div>
                            <div class="col-md-2">
                                <span class="badge ${conn.status === 'ESTABLISHED' ? 'bg-green' : conn.status === 'LISTEN' ? 'bg-blue' : 'bg-yellow'}">${conn.status}</span>
                            </div>
                            <div class="col-md-2 text-end">
                                ${conn.remote_port === '5432' ? '<span class="badge bg-purple">PostgreSQL</span>' : ''}
                                ${conn.local_port === '5001' ? '<span class="badge bg-orange">App Server</span>' : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
    }

    function createThreadInfo() {
        const container = document.getElementById('threadInfo');
        const totalUserTime = psutilData.threads.reduce((sum, t) => sum + t.user_time, 0);
        const totalSystemTime = psutilData.threads.reduce((sum, t) => sum + t.system_time, 0);

        const threadsHtml = psutilData.threads
            .sort((a, b) => (b.user_time + b.system_time) - (a.user_time + a.system_time))
            .map(thread => {
                const totalTime = thread.user_time + thread.system_time;
                const percentage = totalUserTime > 0 ? (thread.user_time / totalUserTime) * 100 : 0;

                return `
                        <div class="card mb-2 thread-item">
                            <div class="card-body py-2">
                                <div class="row align-items-center">
                                    <div class="col-md-2">
                                        <span class="badge bg-yellow">TID ${thread.id}</span>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-muted small">User Time</div>
                                        <div class="fw-bold">${thread.user_time.toFixed(2)}s</div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-muted small">System Time</div>
                                        <div class="fw-bold">${thread.system_time.toFixed(2)}s</div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="text-muted small">Total</div>
                                        <div class="fw-bold">${totalTime.toFixed(2)}s</div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="progress">
                                            <div class="progress-bar" style="width: ${percentage}%"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
            }).join('');

        container.innerHTML = `
                <div class="row mb-3">
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body text-center">
                                <div class="text-muted">Total User Time</div>
                                <div class="h2 text-primary">${totalUserTime.toFixed(2)}s</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body text-center">
                                <div class="text-muted">Total System Time</div>
                                <div class="h2 text-warning">${totalSystemTime.toFixed(2)}s</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body text-center">
                                <div class="text-muted">Active Threads</div>
                                <div class="h2 text-success">${psutilData.num_threads}</div>
                            </div>
                        </div>
                    </div>
                </div>
                ${threadsHtml}
            `;
    }

    function createEnvironmentVars() {
        const container = document.getElementById('environmentVars');
        const envVars = Object.entries(psutilData.environ);

        container.innerHTML = envVars.map(([key, value]) => `
                <div class="card mb-1 env-var">
                    <div class="card-body py-2">
                        <div class="row">
                            <div class="col-md-3">
                                <span class="badge bg-blue text-truncate">${key}</span>
                            </div>
                            <div class="col-md-9">
                                <code class="text-muted">${value}</code>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
    }

    function createProcessInfo() {
        const container = document.getElementById('processInfo');
        const memInfo = parseMemoryInfo(psutilData.memory_info);
        const fullMemInfo = parseMemoryFullInfo(psutilData.memory_full_info);

        container.innerHTML = `
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title"><i class="ti ti-info-circle me-2"></i>Process Details</h3>
                        </div>
                        <div class="card-body">
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Process ID:</div>
                                <div class="col-7"><span class="badge bg-primary">${psutilData.pid}</span></div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Parent PID:</div>
                                <div class="col-7"><span class="badge bg-secondary">${psutilData.ppid}</span></div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Name:</div>
                                <div class="col-7"><code>${psutilData.name}</code></div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Executable:</div>
                                <div class="col-7"><code>${psutilData.exe}</code></div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Working Dir:</div>
                                <div class="col-7"><code>${psutilData.cwd}</code></div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Status:</div>
                                <div class="col-7"><span class="badge bg-success">${psutilData.status}</span></div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Username:</div>
                                <div class="col-7"><span class="badge bg-info">${psutilData.username}</span></div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Create Time:</div>
                                <div class="col-7">${new Date(psutilData.create_time * 1000).toLocaleString()}</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title"><i class="ti ti-cpu me-2"></i>Memory Breakdown</h3>
                        </div>
                        <div class="card-body">
                            <div class="row mb-2">
                                <div class="col-5 text-muted">RSS (Physical):</div>
                                <div class="col-7 fw-bold text-primary">${formatBytes(fullMemInfo.rss)}</div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">VMS (Virtual):</div>
                                <div class="col-7 fw-bold text-blue">${formatBytes(fullMemInfo.vms)}</div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">USS (Unique):</div>
                                <div class="col-7 fw-bold text-green">${formatBytes(fullMemInfo.uss)}</div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">PSS (Proportional):</div>
                                <div class="col-7 fw-bold text-orange">${formatBytes(fullMemInfo.pss)}</div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Shared:</div>
                                <div class="col-7 fw-bold text-purple">${formatBytes(fullMemInfo.shared)}</div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Data Segment:</div>
                                <div class="col-7 fw-bold text-red">${formatBytes(fullMemInfo.data)}</div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-5 text-muted">Memory %:</div>
                                <div class="col-7">
                                    <div class="progress">
                                        <div class="progress-bar" style="width: ${psutilData.memory_percent}%"></div>
                                    </div>
                                    <small class="text-muted">${psutilData.memory_percent.toFixed(2)}%</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-12 mt-3">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title"><i class="ti ti-terminal me-2"></i>Command Line</h3>
                        </div>
                        <div class="card-body">
                            <code class="d-block p-2 bg-light rounded">${psutilData.cmdline.join(' ')}</code>
                        </div>
                    </div>
                </div>
            `;
    }

    function sortMemoryMaps(criteria) {
        if (criteria === 'size') {
            currentMemoryMaps.sort((a, b) => sortDirection === 'desc' ? b.size - a.size : a.size - b.size);
        } else if (criteria === 'rss') {
            currentMemoryMaps.sort((a, b) => sortDirection === 'desc' ? b.rss - a.rss : a.rss - b.rss);
        }
        sortDirection = sortDirection === 'desc' ? 'asc' : 'desc';
        renderMemoryMaps();
    }

    function showTab(tabName) {
        // Hide all tabs
        document.querySelectorAll('.tab-content-active').forEach(tab => {
            tab.className = 'tab-content-inactive';
        });

        // Show selected tab
        const selectedTab = document.getElementById(tabName);
        if (selectedTab) {
            selectedTab.className = 'tab-content-active';
        }

        // Update nav links
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });

        document.querySelector(`[href="#${tabName}"]`).classList.add('active');
    }

    function setupFilters() {
        // Memory filter
        document.getElementById('memoryFilter').addEventListener('input', function (e) {
            const filter = e.target.value.toLowerCase();
            currentMemoryMaps = psutilData.memory_maps.filter(map =>
                map.path.toLowerCase().includes(filter)
            ).sort((a, b) => b.rss - a.rss);
            renderMemoryMaps();
        });

        // Connection filter
        document.getElementById('connectionFilter').addEventListener('input', function (e) {
            const filter = e.target.value.toLowerCase();
            const connections = document.querySelectorAll('.connection-item');
            connections.forEach(conn => {
                const text = conn.textContent.toLowerCase();
                conn.style.display = text.includes(filter) ? 'block' : 'none';
            });
        });

        // Environment filter
        document.getElementById('envFilter').addEventListener('input', function (e) {
            const filter = e.target.value.toLowerCase();
            const envVars = document.querySelectorAll('.env-var');
            envVars.forEach(env => {
                const text = env.textContent.toLowerCase();
                env.style.display = text.includes(filter) ? 'block' : 'none';
            });
        });
    }

    function analyzeMemoryUsage() {
        const memInfo = parseMemoryInfo(psutilData.memory_info);
        const fullMemInfo = parseMemoryFullInfo(psutilData.memory_full_info);

        console.log('🔍 Memory Analysis for your Python app:');
        console.log(`📊 RSS Memory: ${formatBytes(memInfo.rss)} (${psutilData.memory_percent.toFixed(2)}% of system)`);
        console.log(`📊 USS Memory: ${formatBytes(fullMemInfo.uss)} (unique to this process)`);

        // Find biggest memory consumers
        const topMemoryMaps = [...psutilData.memory_maps]
            .sort((a, b) => b.rss - a.rss)
            .slice(0, 5);

        console.log('\n🏆 Top 5 Memory Consumers:');
        topMemoryMaps.forEach((map, index) => {
            console.log(`${index + 1}. ${map.path}: ${formatBytes(map.rss)}`);
        });

        // Analyze connections
        const pgConnections = psutilData.net_connections.filter(conn =>
            conn.includes('port=5432')
        ).length;

        console.log(`\n🌐 Database Connections: ${pgConnections} to PostgreSQL`);

        if (memInfo.rss > 500000000) {
            console.log('\n⚠️  HIGH MEMORY USAGE DETECTED!');
            console.log('💡 Consider:');
            console.log('   - Reviewing NumPy/SciPy array sizes');
            console.log('   - Checking for memory leaks in data processing');
            console.log('   - Optimizing database connection pooling');
            console.log('   - Using memory profiling tools like memory_profiler');
        }
    }

    // Initialize the dashboard
    document.addEventListener('DOMContentLoaded', function () {
        createSummaryCards();
        createMemoryMaps();
        createNetworkConnections();
        createThreadInfo();
        createEnvironmentVars();
        createProcessInfo();
        setupFilters();
        analyzeMemoryUsage();
    });
</script>
