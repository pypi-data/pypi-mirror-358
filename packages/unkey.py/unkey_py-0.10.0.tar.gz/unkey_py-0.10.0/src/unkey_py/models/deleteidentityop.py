"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .httpmetadata import HTTPMetadata, HTTPMetadataTypedDict
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict
from unkey_py.types import BaseModel


class DeleteIdentityRequestBodyTypedDict(TypedDict):
    identity_id: str
    r"""The id of the identity to delete"""


class DeleteIdentityRequestBody(BaseModel):
    identity_id: Annotated[str, pydantic.Field(alias="identityId")]
    r"""The id of the identity to delete"""


class DeleteIdentityResponseBodyTypedDict(TypedDict):
    r"""The identity was successfully deleted, it may take up to 30s for this to take effect in all regions"""


class DeleteIdentityResponseBody(BaseModel):
    r"""The identity was successfully deleted, it may take up to 30s for this to take effect in all regions"""


class DeleteIdentityResponseTypedDict(TypedDict):
    http_meta: HTTPMetadataTypedDict
    object: NotRequired[DeleteIdentityResponseBodyTypedDict]
    r"""The identity was successfully deleted, it may take up to 30s for this to take effect in all regions"""


class DeleteIdentityResponse(BaseModel):
    http_meta: Annotated[Optional[HTTPMetadata], pydantic.Field(exclude=True)] = None

    object: Optional[DeleteIdentityResponseBody] = None
    r"""The identity was successfully deleted, it may take up to 30s for this to take effect in all regions"""
