"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .httpmetadata import HTTPMetadata, HTTPMetadataTypedDict
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict
from unkey_py.types import BaseModel


class ServicesTypedDict(TypedDict):
    metrics: str
    r"""The name of the connected metrics service"""
    logger: str
    r"""The name of the connected logger service"""
    ratelimit: str
    r"""The name of the connected ratelimit service"""
    usagelimit: str
    r"""The name of the connected usagelimit service"""


class Services(BaseModel):
    metrics: str
    r"""The name of the connected metrics service"""

    logger: str
    r"""The name of the connected logger service"""

    ratelimit: str
    r"""The name of the connected ratelimit service"""

    usagelimit: str
    r"""The name of the connected usagelimit service"""


class V1LivenessResponseBodyTypedDict(TypedDict):
    r"""The configured services and their status"""

    status: str
    r"""The status of the server"""
    services: ServicesTypedDict


class V1LivenessResponseBody(BaseModel):
    r"""The configured services and their status"""

    status: str
    r"""The status of the server"""

    services: Services


class V1LivenessResponseTypedDict(TypedDict):
    http_meta: HTTPMetadataTypedDict
    object: NotRequired[V1LivenessResponseBodyTypedDict]
    r"""The configured services and their status"""


class V1LivenessResponse(BaseModel):
    http_meta: Annotated[Optional[HTTPMetadata], pydantic.Field(exclude=True)] = None

    object: Optional[V1LivenessResponseBody] = None
    r"""The configured services and their status"""
