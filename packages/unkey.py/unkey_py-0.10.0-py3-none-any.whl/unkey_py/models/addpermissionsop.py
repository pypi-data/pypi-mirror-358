"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .httpmetadata import HTTPMetadata, HTTPMetadataTypedDict
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict
from unkey_py.types import BaseModel


class AddPermissionsPermissionsTypedDict(TypedDict):
    id: NotRequired[str]
    r"""The id of the permission. Provide either `id` or `name`. If both are provided `id` is used."""
    name: NotRequired[str]
    r"""Identify the permission via its name. Provide either `id` or `name`. If both are provided `id` is used."""
    create: NotRequired[bool]
    r"""Set to true to automatically create the permissions they do not exist yet. Only works when specifying `name`.
    Autocreating permissions requires your root key to have the `rbac.*.create_permission` permission, otherwise the request will get rejected
    """


class AddPermissionsPermissions(BaseModel):
    id: Optional[str] = None
    r"""The id of the permission. Provide either `id` or `name`. If both are provided `id` is used."""

    name: Optional[str] = None
    r"""Identify the permission via its name. Provide either `id` or `name`. If both are provided `id` is used."""

    create: Optional[bool] = None
    r"""Set to true to automatically create the permissions they do not exist yet. Only works when specifying `name`.
    Autocreating permissions requires your root key to have the `rbac.*.create_permission` permission, otherwise the request will get rejected
    """


class AddPermissionsRequestBodyTypedDict(TypedDict):
    key_id: str
    r"""The id of the key."""
    permissions: List[AddPermissionsPermissionsTypedDict]
    r"""The permissions you want to add to this key"""


class AddPermissionsRequestBody(BaseModel):
    key_id: Annotated[str, pydantic.Field(alias="keyId")]
    r"""The id of the key."""

    permissions: List[AddPermissionsPermissions]
    r"""The permissions you want to add to this key"""


class ResponseBodyTypedDict(TypedDict):
    id: str
    r"""The id of the permission. This is used internally"""
    name: str
    r"""The name of the permission"""


class ResponseBody(BaseModel):
    id: str
    r"""The id of the permission. This is used internally"""

    name: str
    r"""The name of the permission"""


class AddPermissionsResponseTypedDict(TypedDict):
    http_meta: HTTPMetadataTypedDict
    response_bodies: NotRequired[List[ResponseBodyTypedDict]]
    r"""All currently connected permissions"""


class AddPermissionsResponse(BaseModel):
    http_meta: Annotated[Optional[HTTPMetadata], pydantic.Field(exclude=True)] = None

    response_bodies: Optional[List[ResponseBody]] = None
    r"""All currently connected permissions"""
