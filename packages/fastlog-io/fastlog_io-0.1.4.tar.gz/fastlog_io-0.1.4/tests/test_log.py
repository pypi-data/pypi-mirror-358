def test_basic_logging_to_stderr(capfd):
    """
    By default, under configure(), logs at levels INFO and above should be written to stderr.
    """
    from fastlog import configure, log

    configure()
    log.info("hello stderr")

    out, err = capfd.readouterr()
    assert "hello stderr" in err
    assert out == ""


def test_name_binding_and_trace_id():
    """
    Entries generated by get_log("worker") must:
    * extra["name"] == "worker"
    * extra["trace_id"] field exists (auto-generated or inherited)
    """
    import fastlog.core as _core
    from fastlog import configure, get_log

    records: list[dict] = []

    def _collect(msg):
        records.append(msg.record)

    configure()
    _core.logger.add(_collect, enqueue=False)

    lg = get_log("worker")
    lg.info("with name")

    assert records, "logger sink didn't receive any records"
    r = records[0]
    assert r["extra"]["name"] == "worker"
    assert "trace_id" in r["extra"] and r["extra"]["trace_id"]


def test_start_metrics_server(monkeypatch):
    """
    start_metrics_server() should call prometheus_client.start_http_server.
    Use monkeypatch to replace the function to avoid actually opening the port.
    """
    from fastlog.metrics import start_metrics_server

    called = {}

    def fake_start_http_server(port):
        called["port"] = port

    monkeypatch.setattr("fastlog.metrics.start_http_server", fake_start_http_server, raising=True)

    start_metrics_server(9100)
    assert called.get("port") == 9100
