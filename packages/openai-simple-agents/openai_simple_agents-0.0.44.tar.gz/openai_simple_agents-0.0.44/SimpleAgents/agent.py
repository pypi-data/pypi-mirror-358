from typing import Optional, List  # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
from agents import Agent as BaseAgent, Runner, RunConfig  # –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã
import asyncio
from .memory_manager import MemoryManager  # –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏
import uuid
import re
import unicodedata
import logging  # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
global_metadata = {}
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID
def normalize_agent_id(name: str) -> str:
    ascii_name = unicodedata.normalize("NFKD", name).encode("ascii", "ignore").decode()
    cleaned = re.sub(r'[^a-zA-Z0-9._-]', '_', ascii_name)
    if not cleaned or not re.match(r'^[a-zA-Z0-9]', cleaned):
        cleaned = f"agent_{uuid.uuid4().hex[:8]}"
    return cleaned[:64]  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã ID

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞, —Ä–∞—Å—à–∏—Ä—è—é—â–∏–π –±–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
class Agent(BaseAgent):
    def __init__(
        self,
        name: str,
        *,
        openai_api_key: str = "...",
        ttl_seconds: Optional[int] = None,
        short_memory_max_pairs: int = 10,
        short_memory_ttl_minutes: int = 60,
        short_memory_cleanup_minutes: int = 10,
        max_turns: int = 5,
        **kwargs
    ):
        logger.debug(f"[Agent][__init__] –ø–æ–ª—É—á–µ–Ω–æ –∏–º—è –∞–≥–µ–Ω—Ç–∞: {name}")
        super().__init__(name=name, **kwargs)

        self.max_turns = max_turns  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ reasoning-–∏—Ç–µ—Ä–∞—Ü–∏–π
        normalized_id = normalize_agent_id(name)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID

        logger.debug(f"[Agent][__init__] –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID –∞–≥–µ–Ω—Ç–∞: {normalized_id}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏
        self.memory_manager = MemoryManager(
            agent_id=normalized_id,
            openai_api_key=openai_api_key,
            long_memory_ttl=ttl_seconds,
            short_memory_max_pairs=short_memory_max_pairs,
            short_memory_ttl_minutes=short_memory_ttl_minutes,
            short_memory_cleanup_minutes=short_memory_cleanup_minutes,
        )

        self._initialized = False  # –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    async def init(self):
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏
        if self._initialized:
            logger.debug("[Agent][init] —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        logger.debug("[Agent][init] –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é MemoryManager")
        await self.memory_manager.init()
        self._initialized = True
        logger.debug("[Agent][init] –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def message(
            self,
            input: str,
            *,
            context=None,
            tool_choice: Optional[str] = None,
            max_turns: Optional[int] = None,
            enable_tracing: bool = True,
            tags: Optional[List[str]] = None,
            user_id: Optional[str] = None,
            file_name: Optional[str] = None,
            file_path: Optional[str] = None,
    ):
        logger.debug(f"[Agent][message] –ø–æ–ª—É—á–µ–Ω –≤–≤–æ–¥: {input}")
        await self.init()

        max_turns = max_turns or self.max_turns

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        memory_context = await self.memory_manager.get_memory_context(user_id=user_id, input=input)

        # üîç –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π memory_context
        if memory_context:
            logger.debug(f"[Agent][message] –∏–∑–≤–ª–µ—á—ë–Ω memory_context:\n{memory_context}")
        else:
            logger.debug("[Agent][message] –ø–∞–º—è—Ç—å –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞")

        # –§–æ—Ä–º–∏—Ä—É–µ–º prompt —Å —É—á–µ—Ç–æ–º –ø–∞–º—è—Ç–∏
        if memory_context:
            augmented_input = (
                f"–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç, –≤–µ–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: {user_id}.\n"
                f"–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–≤—É–º —Ç–∏–ø–∞–º –ø–∞–º—è—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"1. üß† –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞.\n"
                f"2. üìö –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–Ω–∏—è –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π –æ–±–µ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
                f"{memory_context}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{input}"
            )
            logger.debug("[Agent][message] —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω prompt —Å –ø–∞–º—è—Ç—å—é")
        else:
            augmented_input = input
            logger.debug("[Agent][message] –ø–∞–º—è—Ç–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—ã—Ä–æ–π –≤–≤–æ–¥")

        # üîç –õ–æ–≥–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π prompt
        logger.debug(f"[Agent][message] —Ñ–∏–Ω–∞–ª—å–Ω—ã–π prompt:\n{augmented_input}")

        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        merged_metadata = {}
        if context and hasattr(context, "metadata") and context.metadata:
            merged_metadata.update(context.metadata)
        for k, v in (("user_id", user_id), ("file_name", file_name), ("file_path", file_path)):
            if v is not None:
                merged_metadata[k] = str(v)
                global_metadata[k] = str(v)

        if file_name is None or file_path is None:
            if global_metadata:
                for key_num, key in enumerate(global_metadata.keys()):
                    value = global_metadata[key]
                    merged_metadata[key] = str(value)
                global_metadata.clear()

        trace_meta = {}
        if tool_choice is not None:
            merged_metadata["tool_choice"] = tool_choice
            trace_meta["tool_choice"] = tool_choice
        if tags:
            merged_metadata["tags"] = tags
            trace_meta["tags"] = tags

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if context is None:
            context = type("Ctx", (), {})()
        context.metadata = merged_metadata or None

        logger.debug(f"[Agent][message] –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {merged_metadata}")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ reasoning-—Ü–µ–ø–æ—á–∫–∏
        run_cfg = RunConfig(
            tracing_disabled=not enable_tracing,
            trace_metadata=trace_meta if trace_meta else None,
            workflow_name=f"Workflow_{str(user_id)}"
        )

        logger.debug(f"[Agent][message] –∑–∞–ø—É—Å–∫–∞–µ–º Runner —Å max_turns={max_turns}")

        result = await Runner.run(
            starting_agent=self,
            input=augmented_input,
            context=context,
            max_turns=max_turns,
            run_config=run_cfg,
        )
        text_result = result.final_output

        logger.debug("[Agent][message] reasoning –∑–∞–≤–µ—Ä—à—ë–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–º—è—Ç—å")
        try:
            await self.memory_manager.record_interaction(user_id=user_id, input=input, output=text_result, file_name=file_name, file_path=file_path)
            logger.debug("[Agent][message] –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–º—è—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        except Exception as e:
            logger.debug(f"[Agent][message] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–º—è—Ç—å, –æ—à–∏–±–∫–∞: {e}")
        return text_result