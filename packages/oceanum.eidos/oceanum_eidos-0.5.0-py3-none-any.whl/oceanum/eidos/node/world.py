# generated by datamodel-codegen:
#   filename:  node/world.json
#   timestamp: 2025-06-27T21:09:39+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from oceanum.eidos._basemodel import EidosModel
from pydantic import ConfigDict, Field, RootModel

from .. import state as state_1
from .worldlayer import feature, gridded, label, scenegraph, sea_surface, track


class BaseLayerPreset(str, Enum):
    """
    Base layer type
    """

    oceanum = 'oceanum'
    terrain = 'terrain'


class ViewType(str, Enum):
    """
    Type of world view
    """

    map = 'map'
    globe = 'globe'


class View(EidosModel):
    """
    State of the map view
    """

    viewType: Optional[ViewType] = 'map'
    """
    Type of world view
    """
    longitude: float
    """
    Longitude of view center
    """
    latitude: float
    """
    Latitude of view center
    """
    pitch: Optional[float] = 0
    """
    Pitch angle of view
    """
    bearing: Optional[float] = 0
    """
    Bearing angle of view
    """
    maxZoom: Optional[float] = 20
    """
    Maximum zoom level
    """
    zoom: Optional[float] = 0
    """
    Zoom level
    """
    maxPitch: Optional[float] = 60
    """
    Maximum pitch angle
    """


class HoverInfo(EidosModel):
    """
    Properties for tooltip shown on hover
    """

    template: str
    """
    Tooltip as Handlebars template. The picked object is passed as the render context.
    """


class Type(str, Enum):
    """
    Control type
    """

    points = 'points'
    polygon = 'polygon'
    bbox = 'bbox'
    radius = 'radius'
    drop = 'drop'
    measure = 'measure'


class CursorOffset(EidosModel):
    """
    Cursor offset
    """

    x: Optional[float] = 0
    y: Optional[float] = 0


class Icon(EidosModel):
    """
    Icon URLs
    """

    default: str
    """
    Default icon URL
    """
    hover: Optional[str] = None
    """
    Active hover icon URL
    """
    dark: Optional[str] = None
    """
    Dark theme icon URL
    """
    cursorOffset: Optional[CursorOffset] = None
    """
    Cursor offset
    """


class Control(EidosModel):
    """
    Control properties
    """

    type: Type
    """
    Control type
    """
    id: str
    """
    Control id
    """
    active: Optional[bool] = None
    """
    Control active state
    """
    disabled: Optional[bool] = None
    """
    Control disabled state
    """
    state: Optional[Dict[str, Any]] = None
    """
    Control state
    """
    icon: Optional[Icon] = None
    """
    Icon URLs
    """
    tooltip: Optional[str] = None
    """
    Tooltip text
    """
    config: Optional[Dict[str, Any]] = None


class Orientation(str, Enum):
    horizontal = 'horizontal'
    vertical = 'vertical'


class ControlGroup(EidosModel):
    """
    Control group
    """

    id: str
    """
    Control group id
    """
    orientation: Optional[Orientation] = None
    controls: List[Control]
    """
    Control list
    """
    visible: Optional[bool] = True
    """
    Visibility of control group
    """


class LayerSelector(EidosModel):
    """
    Layer selector
    """

    open: Optional[bool] = True
    """
    Visibility of layer selector
    """


class Mode(str, Enum):
    nearest = 'nearest'
    exact = 'exact'
    range = 'range'


class Aggregate(str, Enum):
    """
    Aggregation method for time range
    """

    last = 'last'
    first = 'first'
    sum = 'sum'
    mean = 'mean'
    max = 'max'
    min = 'min'


class TimeSelect(EidosModel):
    mode: Mode
    toleration: Optional[str] = None
    """
    Time toleration duration for nearest time select
    """
    aggregate: Optional[Aggregate] = Field('last', title='Time aggregation')
    """
    Aggregation method for time range
    """
    groupby: Optional[str] = None
    """
    Data field to group by
    """


class BaseLayer(RootModel[Union[BaseLayerPreset, Dict[str, Any]]]):
    root: Union[BaseLayerPreset, Dict[str, Any]]


class World(EidosModel):
    """
    Specification for world view environmental interaction and display
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    id: str
    """
    Unique id of the node
    """
    nodeType: Literal['world'] = 'world'
    children: Optional[List[WorldLayer]] = None
    """
    Layers displayed on this map
    """
    baseLayer: Optional[BaseLayer] = None
    viewState: Optional[View] = None
    currentTime: Optional[state_1.CurrentTime] = None
    timeControl: Optional[state_1.TimeControl] = None
    layerSelector: Optional[Union[bool, LayerSelector]] = None
    mapControls: Optional[List[ControlGroup]] = None
    """
    Map controls
    """


class LayerSpec(
    RootModel[
        Union[
            feature.FeatureLayer,
            gridded.GriddedLayer,
            label.LabelLayer,
            scenegraph.ScenegraphLayer,
            sea_surface.SeaSurfaceLayer,
            track.TrackLayer,
        ]
    ]
):
    root: Union[
        feature.FeatureLayer,
        gridded.GriddedLayer,
        label.LabelLayer,
        scenegraph.ScenegraphLayer,
        sea_surface.SeaSurfaceLayer,
        track.TrackLayer,
    ]
    """
    Layer specification
    """


class WorldLayer(EidosModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str
    """
    Unique id of layer
    """
    name: Optional[str] = None
    """
    Human readable name of layer
    """
    nodeType: Literal['worldlayer']
    dataId: Optional[str] = None
    """
    Name of data
    """
    visible: Optional[bool] = True
    """
    Layer is visible
    """
    showWith: Optional[List] = []
    """
    Other layers than can be shown at same time as this layer
    """
    linked: Optional[str] = None
    """
    Linked layer id which controls this layer visibility
    """
    hoverInfo: Optional[HoverInfo] = None
    layerSpec: LayerSpec
    minZoom: Optional[float] = 0
    """
    Minimum zoom level at which layer is visible
    """
    maxZoom: Optional[float] = 20
    """
    Maximum zoom level at which layer is visible
    """
    timeSelect: Optional[TimeSelect] = None
    """
    Time selection criteria for layer
    """


World.model_rebuild()
