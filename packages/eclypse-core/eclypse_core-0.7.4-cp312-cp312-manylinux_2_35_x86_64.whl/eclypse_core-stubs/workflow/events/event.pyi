from typing import (
    Any,
    Literal,
)

from eclypse_core.simulation._simulator.local import Simulator
from eclypse_core.utils._logging import Logger
from eclypse_core.utils.types import EventType
from eclypse_core.workflow.triggers import Trigger

class EclypseEvent:
    """An event in the simulation."""

    def __init__(
        self,
        name: str,
        event_type: EventType | None = None,
        triggers: list[Trigger] | None = None,
        trigger_condition: Literal["any", "all"] = "any",
        max_triggers: int = ...,
        is_callback: bool = False,
        report: str | list[str] | None = None,
        remote: bool = False,
        verbose: bool = False,
    ) -> None:
        """Initialize the event.

        Args:
            name (str): The name of the event.
            event_type (EventType): The type of the event. Defaults to None.
            triggers (Optional[List[Trigger]]): A list of triggers that can trigger the
                event. Defaults to None.
            trigger_condition (Optional[str]): The condition for the triggers to fire the
                event. If "any", the event fires if any trigger is active. If "all",
                the event fires only if all triggers are active. Defaults to "any".
            max_triggers (Optional[int]): The maximum number of times the trigger can be
                called. Defaults to no limit (MAX_FLOAT).
            is_callback (bool): If True, the event is a callback and will be executed
                right after the event that triggered it. Defaults to False.
            report (Optional[Union[str, List[str]]]): The type of report to generate for
                the event. Defaults to DEFAULT_REPORT_TYPE.
            remote (bool): If True, the event will be executed remotely. Defaults to False.
            verbose (bool): If True, the event will log its firing. Defaults to False.

        Raises:
            ValueError: The event must have a name.
        """

    def __call__(self, *args, **kwargs) -> Any:
        """The event logic. Must be implemented by the user by either decorating a
        function or a class with a __call__ method, or by subclassing the EclypseEvent
        class and implementing the __call__ method.

        Raises:
            NotImplementedError: The event logic is not implemented.
        """

    @property
    def name(self) -> str:
        """The type of the event.

        Returns:
            EventType: The type of the event.
        """

    @property
    def n_calls(self) -> int:
        """Return the number of iterations of the simulation.

        Returns:
            int: The number of iterations.
        """

    @property
    def n_triggers(self) -> int:
        """Return the number of times the event has been triggered.

        Returns:
            int: The number of times the event has been triggered.
        """

    @property
    def triggers(self) -> list[Trigger]:
        """The triggers associated with the event.

        Returns:
            List[Trigger]: The triggers associated with the event.
        """

    @property
    def simulator(self) -> Simulator:
        """The simulator associated with the event.

        Returns:
            Simulator: The simulator associated with the event.
        """

    @property
    def data(self) -> dict[str, Any]:
        """The data generated by the event.

        Returns:
            Dict[str, Any]: The data generated by the event.
        """

    @property
    def remote(self) -> bool:
        """Whether the event must be executed by a remote service/node.

        Returns:
            bool: True if the event is remote, False otherwise.
        """

    @property
    def logger(self) -> Logger:
        """Get a logger for the graph, binding the graph id in the logs.

        Returns:
            Logger: The logger for the graph.
        """

    @property
    def report_types(self) -> list[str]:
        """Get the report types for the event.

        Returns:
            List[str]: The report types for the event.
        """
