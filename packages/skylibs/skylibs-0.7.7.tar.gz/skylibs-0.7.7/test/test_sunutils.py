import pytest
import numpy as np
from datetime import datetime as dt

from hdrtools import sunutils
from envmap.projections import latlong2world


# pytest [-s] [-k test_sunPosition_pySolar_XYZ]

@pytest.mark.parametrize("latitude,longitude,elevation,time,azimuth,altitude,expectedPosition_UV,envShape", 
    [
        #(latitude, longitude, elevation, time, azimuth, altitude, expectedPosition_UV, envShape)
        (46.778969, -71.274914, 125, "2016-07-11 14:55:03-04:00", 236.0342180792503, 54.738195890813465, (202, 1347), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 16:37:09-04:00", 261.48788303999396, 38.476585009805774, (295, 1486), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 18:11:15-04:00", 278.7179058813837, 22.440617313357762, (383, 1582), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 19:13:19-04:00", 289.2536012730952, 12.175347987926557, (432, 1639), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 14:59:02-04:00", 237.28376586581751, 54.1684484374844, (205, 1354), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 15:25:04-04:00", 244.80877604207072, 50.26812689923775, (228, 1396), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 16:31:06-04:00", 260.2533901025191, 39.49882765736283, (289, 1478), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 18:57:15-04:00", 286.52892194502806, 14.780838961049204, (421, 1625), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 15:35:05-04:00", 247.44434330174641, 48.70012523679931, (238, 1411), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 17:45:13-04:00", 274.2050868138487, 26.862260714722463, (359, 1557), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 14:57:03-04:00", 236.6651568371286, 54.453150605734265, (204, 1351), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 13:50:59-04:00", 211.324186709539, 62.36297164343926, (156, 1212), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 17:43:13-04:00", 273.85317844978465, 27.2034602696621, (356, 1554), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 14:12:57-04:00", 220.86582713099386, 60.14378307583763, (170, 1266), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 16:17:04-04:00", 257.2962617745477, 41.85445355912644, (276, 1464), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 14:05:00-04:00", 217.54924128918142, 61.0045783451481, (164, 1246), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 16:05:04-04:00", 254.64954763786534, 43.84699443623451, (265, 1449), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 18:17:15-04:00", 279.74423375929877, 21.42842020578881, (391, 1587), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 14:39:02-04:00", 230.7075145629071, 56.939376143025406, (189, 1318), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 19:03:18-04:00", 287.55365936964733, 13.794549384465714, (425, 1631), (1024, 2048, 3)),
    ]
)
def test_sunPosition_pySolar_XYZ(latitude,longitude,elevation,time,azimuth,altitude,expectedPosition_UV,envShape):
    'Implicitly tests sunPosition_pySolar_UV()'
    
    x,y,z = sunutils.sunPosition_pySolar_XYZ(latitude,longitude,dt.fromisoformat(time),elevation)

    # expectedPosition_UV is directly from findBrightestSpot()
    U, V = (expectedPosition_UV[1]+0.5) / envShape[1], \
         (expectedPosition_UV[0]+0.5) / envShape[0]

    # Convert UV to XYZ
    X,Y,Z, _ = latlong2world(U,V)
    assert x == pytest.approx(X, abs=1e-1)
    assert y == pytest.approx(Y, abs=1e-1)
    assert z == pytest.approx(Z, abs=1e-1)


@pytest.mark.parametrize("latitude,longitude,elevation,time,azimuth,altitude,expectedPosition_UV,envShape", 
    [
        #(latitude, longitude, elevation, time, azimuth, altitude, expectedPosition_UV, envShape)
        (46.778969, -71.274914, 125, "2016-07-11 14:55:03-04:00", 236.0342180792503, 54.738195890813465, (202, 1347), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 16:37:09-04:00", 261.48788303999396, 38.476585009805774, (295, 1486), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 18:11:15-04:00", 278.7179058813837, 22.440617313357762, (383, 1582), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 19:13:19-04:00", 289.2536012730952, 12.175347987926557, (432, 1639), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 14:59:02-04:00", 237.28376586581751, 54.1684484374844, (205, 1354), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 15:25:04-04:00", 244.80877604207072, 50.26812689923775, (228, 1396), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 16:31:06-04:00", 260.2533901025191, 39.49882765736283, (289, 1478), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 18:57:15-04:00", 286.52892194502806, 14.780838961049204, (421, 1625), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 15:35:05-04:00", 247.44434330174641, 48.70012523679931, (238, 1411), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 17:45:13-04:00", 274.2050868138487, 26.862260714722463, (359, 1557), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 14:57:03-04:00", 236.6651568371286, 54.453150605734265, (204, 1351), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 13:50:59-04:00", 211.324186709539, 62.36297164343926, (156, 1212), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 17:43:13-04:00", 273.85317844978465, 27.2034602696621, (356, 1554), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 19:55:22-04:00", 296.48810555162686, 5.617312205018568, (430, 1821), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 14:12:57-04:00", 220.86582713099386, 60.14378307583763, (170, 1266), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 16:17:04-04:00", 257.2962617745477, 41.85445355912644, (276, 1464), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 14:05:00-04:00", 217.54924128918142, 61.0045783451481, (164, 1246), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 16:05:04-04:00", 254.64954763786534, 43.84699443623451, (265, 1449), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 18:17:15-04:00", 279.74423375929877, 21.42842020578881, (391, 1587), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 14:39:02-04:00", 230.7075145629071, 56.939376143025406, (189, 1318), (1024, 2048, 3)),
        (46.778969, -71.274914, 125, "2016-07-11 19:03:18-04:00", 287.55365936964733, 13.794549384465714, (425, 1631), (1024, 2048, 3)),
    ]
)
def test_sunPosition_pySolar_zenithAzimuth(latitude,longitude,elevation,time,azimuth,altitude,expectedPosition_UV,envShape):

    # azimuth and altitude are directly from pySolar for the given time
    zenith_, azimuth_ = sunutils.sunPosition_pySolar_zenithAzimuth(latitude, longitude, dt.fromisoformat(time), elevation)
    assert np.deg2rad(90-altitude) == pytest.approx(zenith_, abs=1e-6)
    assert (np.pi/2) + np.deg2rad(-azimuth) == pytest.approx(azimuth_, abs=1e-6)
    elevation_ = np.pi/2 - zenith_

    # expectedPosition_UV is directly from findBrightestSpot()
    U, V = (expectedPosition_UV[1]+0.5) / envShape[1], \
         (expectedPosition_UV[0]+0.5) / envShape[0]

    # Fix orientation of azimuth
    azimuth_ = -(azimuth_ - (np.pi/2))

    # Convert azimuth to U
    u = (azimuth_ / (2*np.pi))
    assert u == pytest.approx(U, abs=1e-1)

    # Convert zenith to V
    v = zenith_/np.pi
    assert v == pytest.approx(V, abs=1e-1)
    v = (np.pi/2 - elevation_)/np.pi
    assert v == pytest.approx(V, abs=1e-1)

