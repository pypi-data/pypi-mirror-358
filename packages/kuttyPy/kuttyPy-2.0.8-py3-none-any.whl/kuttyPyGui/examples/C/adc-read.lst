
/home/jithin/Documents/CSpark/kuttypy-gui/examples/C/adc-read:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main>
  64:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay_us>:
    while(x)
        --x;
}

void delay_us(uint16_t k) // not correct
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <delay_us+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t x = k;
  76:	9a 83       	std	Y+2, r25	; 0x02
  78:	89 83       	std	Y+1, r24	; 0x01
    while(x)
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	9a 81       	ldd	r25, Y+2	; 0x02
  7e:	89 2b       	or	r24, r25
  80:	49 f0       	breq	.+18     	; 0x94 <delay_us+0x28>
        --x;
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	9a 81       	ldd	r25, Y+2	; 0x02
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	9a 83       	std	Y+2, r25	; 0x02
  8a:	89 83       	std	Y+1, r24	; 0x01
}

void delay_us(uint16_t k) // not correct
{
    volatile uint16_t x = k;
    while(x)
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	9a 81       	ldd	r25, Y+2	; 0x02
  90:	89 2b       	or	r24, r25
  92:	b9 f7       	brne	.-18     	; 0x82 <delay_us+0x16>
        --x;
}
  94:	0f 90       	pop	r0
  96:	0f 90       	pop	r0
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	08 95       	ret

0000009e <delay>:
  9e:	0c 94 36 00 	jmp	0x6c	; 0x6c <delay_us>

000000a2 <delay_100us>:


void delay_100us (uint16_t k)  	 // k* 100 usecs delay, valid only for 8MHz clock
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	00 d0       	rcall	.+0      	; 0xa8 <delay_100us+0x6>
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t x;
  while (k--) {x=52; while (x--);}
  ac:	64 e3       	ldi	r22, 0x34	; 52
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	68 f0       	brcs	.+26     	; 0xce <delay_100us+0x2c>
  b4:	7a 83       	std	Y+2, r23	; 0x02
  b6:	69 83       	std	Y+1, r22	; 0x01
  b8:	29 81       	ldd	r18, Y+1	; 0x01
  ba:	3a 81       	ldd	r19, Y+2	; 0x02
  bc:	a9 01       	movw	r20, r18
  be:	41 50       	subi	r20, 0x01	; 1
  c0:	51 09       	sbc	r21, r1
  c2:	5a 83       	std	Y+2, r21	; 0x02
  c4:	49 83       	std	Y+1, r20	; 0x01
  c6:	23 2b       	or	r18, r19
  c8:	b9 f7       	brne	.-18     	; 0xb8 <delay_100us+0x16>
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	98 f7       	brcc	.-26     	; 0xb4 <delay_100us+0x12>
}
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <delay_ms>:

void delay_ms (uint16_t k)  // idle for k milliseconds, only for 8MHz clock
    {
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <delay_ms+0x6>
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t x;
    while(k--) {x=532; while (x--);}
  e2:	64 e1       	ldi	r22, 0x14	; 20
  e4:	72 e0       	ldi	r23, 0x02	; 2
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	68 f0       	brcs	.+26     	; 0x104 <delay_ms+0x2c>
  ea:	7a 83       	std	Y+2, r23	; 0x02
  ec:	69 83       	std	Y+1, r22	; 0x01
  ee:	29 81       	ldd	r18, Y+1	; 0x01
  f0:	3a 81       	ldd	r19, Y+2	; 0x02
  f2:	a9 01       	movw	r20, r18
  f4:	41 50       	subi	r20, 0x01	; 1
  f6:	51 09       	sbc	r21, r1
  f8:	5a 83       	std	Y+2, r21	; 0x02
  fa:	49 83       	std	Y+1, r20	; 0x01
  fc:	23 2b       	or	r18, r19
  fe:	b9 f7       	brne	.-18     	; 0xee <delay_ms+0x16>
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	98 f7       	brcc	.-26     	; 0xea <delay_ms+0x12>
    }
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <b2a>:
    

// Converts an 8bit integer to 3 digit decimal form.
void b2a(int b, char* a)
{
 10e:	fb 01       	movw	r30, r22
uint8_t d1,d2,d3;
char *p = a;

d3 = 0;
while (b >= 100)
 110:	84 36       	cpi	r24, 0x64	; 100
 112:	91 05       	cpc	r25, r1
 114:	3c f1       	brlt	.+78     	; 0x164 <b2a+0x56>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	01 c0       	rjmp	.+2      	; 0x11c <b2a+0xe>
       {
	++d3;
 11a:	23 2f       	mov	r18, r19
 11c:	31 e0       	ldi	r19, 0x01	; 1
 11e:	32 0f       	add	r19, r18
	b -= 100;
 120:	84 56       	subi	r24, 0x64	; 100
 122:	91 09       	sbc	r25, r1
{
uint8_t d1,d2,d3;
char *p = a;

d3 = 0;
while (b >= 100)
 124:	84 36       	cpi	r24, 0x64	; 100
 126:	91 05       	cpc	r25, r1
 128:	c4 f7       	brge	.-16     	; 0x11a <b2a+0xc>
       {
	++d3;
	b -= 100;
	}
if (d3) *p++ = d3 + '0';
 12a:	33 23       	and	r19, r19
 12c:	d9 f0       	breq	.+54     	; 0x164 <b2a+0x56>
 12e:	df 01       	movw	r26, r30
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	2f 5c       	subi	r18, 0xCF	; 207
 134:	20 83       	st	Z, r18

d2 = 0;
while (b >= 10)
 136:	8a 30       	cpi	r24, 0x0A	; 10
 138:	91 05       	cpc	r25, r1
 13a:	dc f0       	brlt	.+54     	; 0x172 <b2a+0x64>

// Converts an 8bit integer to 3 digit decimal form.
void b2a(int b, char* a)
{
uint8_t d1,d2,d3;
char *p = a;
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	01 c0       	rjmp	.+2      	; 0x142 <b2a+0x34>
if (d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
       {
	++d2;
 140:	23 2f       	mov	r18, r19
 142:	31 e0       	ldi	r19, 0x01	; 1
 144:	32 0f       	add	r19, r18
	b -= 10;
 146:	0a 97       	sbiw	r24, 0x0a	; 10
	b -= 100;
	}
if (d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
 148:	8a 30       	cpi	r24, 0x0A	; 10
 14a:	91 05       	cpc	r25, r1
 14c:	cc f7       	brge	.-14     	; 0x140 <b2a+0x32>
 14e:	2f 5c       	subi	r18, 0xCF	; 207
       {
	++d2;
	b -= 10;
	}
if (d3 | d2) *p++ = d2 + '0';
 150:	fd 01       	movw	r30, r26
 152:	31 96       	adiw	r30, 0x01	; 1
 154:	2c 93       	st	X, r18

d1 = 0;
while (b > 0)
 156:	18 16       	cp	r1, r24
 158:	19 06       	cpc	r1, r25
 15a:	4c f4       	brge	.+18     	; 0x16e <b2a+0x60>
 15c:	80 5d       	subi	r24, 0xD0	; 208
       {
	++d1;
	b -= 1;
	}
*p++ =  d1 + '0';
 15e:	80 83       	st	Z, r24
*p = '\0';
 160:	11 82       	std	Z+1, r1	; 0x01
}
 162:	08 95       	ret
	b -= 100;
	}
if (d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
 164:	8a 30       	cpi	r24, 0x0A	; 10
 166:	91 05       	cpc	r25, r1
 168:	b4 f3       	brlt	.-20     	; 0x156 <b2a+0x48>

// Converts an 8bit integer to 3 digit decimal form.
void b2a(int b, char* a)
{
uint8_t d1,d2,d3;
char *p = a;
 16a:	df 01       	movw	r26, r30
 16c:	e7 cf       	rjmp	.-50     	; 0x13c <b2a+0x2e>
	b -= 10;
	}
if (d3 | d2) *p++ = d2 + '0';

d1 = 0;
while (b > 0)
 16e:	80 e3       	ldi	r24, 0x30	; 48
 170:	f6 cf       	rjmp	.-20     	; 0x15e <b2a+0x50>
	b -= 100;
	}
if (d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
 172:	20 e3       	ldi	r18, 0x30	; 48
 174:	ed cf       	rjmp	.-38     	; 0x150 <b2a+0x42>

00000176 <b2aa>:
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;

d5 = 0;
while (b >= 10000)
 176:	80 31       	cpi	r24, 0x10	; 16
 178:	27 e2       	ldi	r18, 0x27	; 39
 17a:	92 07       	cpc	r25, r18
 17c:	0c f4       	brge	.+2      	; 0x180 <b2aa+0xa>
 17e:	58 c0       	rjmp	.+176    	; 0x230 <b2aa+0xba>
       {
	++d5;
	b -= 10000;
 180:	9c 01       	movw	r18, r24
 182:	20 51       	subi	r18, 0x10	; 16
 184:	37 42       	sbci	r19, 0x27	; 39
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;

d5 = 0;
while (b >= 10000)
 186:	20 31       	cpi	r18, 0x10	; 16
 188:	47 e2       	ldi	r20, 0x27	; 39
 18a:	34 07       	cpc	r19, r20
 18c:	0c f4       	brge	.+2      	; 0x190 <b2aa+0x1a>
 18e:	5e c0       	rjmp	.+188    	; 0x24c <b2aa+0xd6>
       {
	++d5;
	b -= 10000;
 190:	20 51       	subi	r18, 0x10	; 16
 192:	37 42       	sbci	r19, 0x27	; 39
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;

d5 = 0;
while (b >= 10000)
 194:	20 31       	cpi	r18, 0x10	; 16
 196:	a7 e2       	ldi	r26, 0x27	; 39
 198:	3a 07       	cpc	r19, r26
 19a:	0c f4       	brge	.+2      	; 0x19e <b2aa+0x28>
 19c:	5a c0       	rjmp	.+180    	; 0x252 <b2aa+0xdc>
       {
	++d5;
	b -= 10000;
 19e:	80 53       	subi	r24, 0x30	; 48
 1a0:	95 47       	sbci	r25, 0x75	; 117
char *p = a;

d5 = 0;
while (b >= 10000)
       {
	++d5;
 1a2:	22 e0       	ldi	r18, 0x02	; 2
	b -= 10000;
	}
if(d5) *p++ = d5 + '0';
 1a4:	fb 01       	movw	r30, r22
 1a6:	31 96       	adiw	r30, 0x01	; 1
 1a8:	2f 5c       	subi	r18, 0xCF	; 207
 1aa:	db 01       	movw	r26, r22
 1ac:	2c 93       	st	X, r18

d4 = 0;
while (b >= 1000)
 1ae:	88 3e       	cpi	r24, 0xE8	; 232
 1b0:	b3 e0       	ldi	r27, 0x03	; 3
 1b2:	9b 07       	cpc	r25, r27
 1b4:	0c f4       	brge	.+2      	; 0x1b8 <b2aa+0x42>
 1b6:	53 c0       	rjmp	.+166    	; 0x25e <b2aa+0xe8>

// Converts an 16bit integer to 5 digit decimal form.
void b2aa(int b, char* a)
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <b2aa+0x48>
if(d5) *p++ = d5 + '0';

d4 = 0;
while (b >= 1000)
       {
	++d4;
 1bc:	23 2f       	mov	r18, r19
 1be:	31 e0       	ldi	r19, 0x01	; 1
 1c0:	32 0f       	add	r19, r18
	b -= 1000;
 1c2:	88 5e       	subi	r24, 0xE8	; 232
 1c4:	93 40       	sbci	r25, 0x03	; 3
	b -= 10000;
	}
if(d5) *p++ = d5 + '0';

d4 = 0;
while (b >= 1000)
 1c6:	88 3e       	cpi	r24, 0xE8	; 232
 1c8:	43 e0       	ldi	r20, 0x03	; 3
 1ca:	94 07       	cpc	r25, r20
 1cc:	bc f7       	brge	.-18     	; 0x1bc <b2aa+0x46>
 1ce:	2f 5c       	subi	r18, 0xCF	; 207
       {
	++d4;
	b -= 1000;
	}
if (d5 | d4) *p++ = d4 + '0';
 1d0:	bf 01       	movw	r22, r30
 1d2:	6f 5f       	subi	r22, 0xFF	; 255
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	20 83       	st	Z, r18

	
d3 = 0;
while (b >= 100)
 1d8:	84 36       	cpi	r24, 0x64	; 100
 1da:	91 05       	cpc	r25, r1
 1dc:	ec f1       	brlt	.+122    	; 0x258 <b2aa+0xe2>
	b -= 10000;
	}
if(d5) *p++ = d5 + '0';

d4 = 0;
while (b >= 1000)
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <b2aa+0x6e>

	
d3 = 0;
while (b >= 100)
       {
	++d3;
 1e2:	23 2f       	mov	r18, r19
 1e4:	31 e0       	ldi	r19, 0x01	; 1
 1e6:	32 0f       	add	r19, r18
	b -= 100;
 1e8:	84 56       	subi	r24, 0x64	; 100
 1ea:	91 09       	sbc	r25, r1
	}
if (d5 | d4) *p++ = d4 + '0';

	
d3 = 0;
while (b >= 100)
 1ec:	84 36       	cpi	r24, 0x64	; 100
 1ee:	91 05       	cpc	r25, r1
 1f0:	c4 f7       	brge	.-16     	; 0x1e2 <b2aa+0x6c>
 1f2:	2f 5c       	subi	r18, 0xCF	; 207
 1f4:	fb 01       	movw	r30, r22
       {
	++d3;
	b -= 100;
	}
if (d5 | d4 | d3) *p++ = d3 + '0';
 1f6:	6f 5f       	subi	r22, 0xFF	; 255
 1f8:	7f 4f       	sbci	r23, 0xFF	; 255
 1fa:	20 83       	st	Z, r18

d2 = 0;
while (b >= 10)
 1fc:	8a 30       	cpi	r24, 0x0A	; 10
 1fe:	91 05       	cpc	r25, r1
 200:	84 f1       	brlt	.+96     	; 0x262 <b2aa+0xec>
	}
if (d5 | d4) *p++ = d4 + '0';

	
d3 = 0;
while (b >= 100)
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	01 c0       	rjmp	.+2      	; 0x208 <b2aa+0x92>
if (d5 | d4 | d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
       {
	++d2;
 206:	23 2f       	mov	r18, r19
 208:	31 e0       	ldi	r19, 0x01	; 1
 20a:	32 0f       	add	r19, r18
	b -= 10;
 20c:	0a 97       	sbiw	r24, 0x0a	; 10
	b -= 100;
	}
if (d5 | d4 | d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
 20e:	8a 30       	cpi	r24, 0x0A	; 10
 210:	91 05       	cpc	r25, r1
 212:	cc f7       	brge	.-14     	; 0x206 <b2aa+0x90>
 214:	2f 5c       	subi	r18, 0xCF	; 207
       {
	++d2;
	b -= 10;
	}
if (d5 | d4 | d3 | d2) *p++ = d2 + '0';
 216:	fb 01       	movw	r30, r22
 218:	31 96       	adiw	r30, 0x01	; 1
 21a:	db 01       	movw	r26, r22
 21c:	2c 93       	st	X, r18

d1 = 0;
while (b > 0)
 21e:	18 16       	cp	r1, r24
 220:	19 06       	cpc	r1, r25
 222:	24 f4       	brge	.+8      	; 0x22c <b2aa+0xb6>
 224:	80 5d       	subi	r24, 0xD0	; 208
       {
	++d1;
	b -= 1;
	}
*p++ =  d1 + '0';
 226:	80 83       	st	Z, r24
*p = '\0';
 228:	11 82       	std	Z+1, r1	; 0x01
}
 22a:	08 95       	ret
	b -= 10;
	}
if (d5 | d4 | d3 | d2) *p++ = d2 + '0';

d1 = 0;
while (b > 0)
 22c:	80 e3       	ldi	r24, 0x30	; 48
 22e:	fb cf       	rjmp	.-10     	; 0x226 <b2aa+0xb0>
	b -= 10000;
	}
if(d5) *p++ = d5 + '0';

d4 = 0;
while (b >= 1000)
 230:	88 3e       	cpi	r24, 0xE8	; 232
 232:	b3 e0       	ldi	r27, 0x03	; 3
 234:	9b 07       	cpc	r25, r27
 236:	14 f0       	brlt	.+4      	; 0x23c <b2aa+0xc6>

// Converts an 16bit integer to 5 digit decimal form.
void b2aa(int b, char* a)
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;
 238:	fb 01       	movw	r30, r22
 23a:	be cf       	rjmp	.-132    	; 0x1b8 <b2aa+0x42>
	}
if (d5 | d4) *p++ = d4 + '0';

	
d3 = 0;
while (b >= 100)
 23c:	84 36       	cpi	r24, 0x64	; 100
 23e:	91 05       	cpc	r25, r1
 240:	74 f6       	brge	.-100    	; 0x1de <b2aa+0x68>
	b -= 100;
	}
if (d5 | d4 | d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
 242:	8a 30       	cpi	r24, 0x0A	; 10
 244:	91 05       	cpc	r25, r1
 246:	ec f6       	brge	.-70     	; 0x202 <b2aa+0x8c>
 248:	fb 01       	movw	r30, r22
 24a:	e9 cf       	rjmp	.-46     	; 0x21e <b2aa+0xa8>
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;

d5 = 0;
while (b >= 10000)
 24c:	c9 01       	movw	r24, r18
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	a9 cf       	rjmp	.-174    	; 0x1a4 <b2aa+0x2e>
 252:	c9 01       	movw	r24, r18
       {
	++d5;
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	a6 cf       	rjmp	.-180    	; 0x1a4 <b2aa+0x2e>
while (b >= 1000)
       {
	++d4;
	b -= 1000;
	}
if (d5 | d4) *p++ = d4 + '0';
 258:	fb 01       	movw	r30, r22

	
d3 = 0;
while (b >= 100)
 25a:	20 e3       	ldi	r18, 0x30	; 48
 25c:	cc cf       	rjmp	.-104    	; 0x1f6 <b2aa+0x80>
	b -= 10000;
	}
if(d5) *p++ = d5 + '0';

d4 = 0;
while (b >= 1000)
 25e:	20 e3       	ldi	r18, 0x30	; 48
 260:	b7 cf       	rjmp	.-146    	; 0x1d0 <b2aa+0x5a>
	b -= 100;
	}
if (d5 | d4 | d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
 262:	20 e3       	ldi	r18, 0x30	; 48
 264:	d8 cf       	rjmp	.-80     	; 0x216 <b2aa+0xa0>

00000266 <adc_enable>:
#define ADC_SPEED	7	    // ADCClk = (8 MHz/ 128) = 62.5 KHz =>208 usec


void adc_enable(void)	    // Also sets reference abd conversion speed
{
    SETBIT(ADCSRA, ADEN);	    // Enable the ADC
 266:	37 9a       	sbi	0x06, 7	; 6
    CLRBIT(ADMUX, REFS0);         // Clear refval bits
 268:	3e 98       	cbi	0x07, 6	; 7
    CLRBIT(ADMUX, REFS1);
 26a:	3f 98       	cbi	0x07, 7	; 7
    SETBIT(ADMUX, REFS0);         // Select AVCC by default
 26c:	3e 9a       	sbi	0x07, 6	; 7
    ADCSRA |= ADC_SPEED;	    // Set to the lowest speed
 26e:	86 b1       	in	r24, 0x06	; 6
 270:	87 60       	ori	r24, 0x07	; 7
 272:	86 b9       	out	0x06, r24	; 6
 274:	08 95       	ret

00000276 <adc_disable>:
}

void adc_disable(void)
{
	ADCSRA = 0;					// Disable the ADC
 276:	16 b8       	out	0x06, r1	; 6
 278:	08 95       	ret

0000027a <adc_set_ref>:
}


void adc_set_ref(uint8_t val)   // 0 : external, 1 : AVCC, 2 : Internal 2.56V
{
    CLRBIT(ADMUX, REFS0);               // Clear refval bits
 27a:	3e 98       	cbi	0x07, 6	; 7
    CLRBIT(ADMUX, REFS1);
 27c:	3f 98       	cbi	0x07, 7	; 7
    if (val == 1)
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	31 f0       	breq	.+12     	; 0x28e <adc_set_ref+0x14>
      ADMUX |= REF_AVCC;		// Use AVCC as reference
    else if (val == 2)
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	09 f0       	breq	.+2      	; 0x288 <adc_set_ref+0xe>
 286:	08 95       	ret
        {
        SETBIT(ADMUX, REFS0);               // Set both S0 and S1
 288:	3e 9a       	sbi	0x07, 6	; 7
        SETBIT(ADMUX, REFS1);
 28a:	3f 9a       	sbi	0x07, 7	; 7
 28c:	08 95       	ret
void adc_set_ref(uint8_t val)   // 0 : external, 1 : AVCC, 2 : Internal 2.56V
{
    CLRBIT(ADMUX, REFS0);               // Clear refval bits
    CLRBIT(ADMUX, REFS1);
    if (val == 1)
      ADMUX |= REF_AVCC;		// Use AVCC as reference
 28e:	3e 9a       	sbi	0x07, 6	; 7
 290:	08 95       	ret

00000292 <read_adc>:

uint16_t read_adc(uint8_t ch)	// Returns 10 bit number
{
	uint16_t res;

	if (ch > ADMAX) return 0;
 292:	88 30       	cpi	r24, 0x08	; 8
 294:	80 f4       	brcc	.+32     	; 0x2b6 <read_adc+0x24>
	ADMUX &= ~0x1F ;                        // Clear the channel bits
 296:	97 b1       	in	r25, 0x07	; 7
 298:	90 7e       	andi	r25, 0xE0	; 224
 29a:	97 b9       	out	0x07, r25	; 7
	ADMUX |=   ch;		          // Set the desired channel
 29c:	97 b1       	in	r25, 0x07	; 7
 29e:	89 2b       	or	r24, r25
 2a0:	87 b9       	out	0x07, r24	; 7
	CLRBIT(ADMUX, ADLAR);	          // Clear Left adjust  
 2a2:	3d 98       	cbi	0x07, 5	; 7
	SETBIT(ADCSRA, ADSC);	          // start conversion
 2a4:	36 9a       	sbi	0x06, 6	; 6
	while ( !(ADCSRA & (1<<ADIF)) ) ;	// wait for ADC conversion
 2a6:	34 9b       	sbis	0x06, 4	; 6
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <read_adc+0x14>
	ADCSRA |= ADIF;
 2aa:	32 9a       	sbi	0x06, 2	; 6
          res = ADCL;                             // ADCL must be read first
 2ac:	84 b1       	in	r24, 0x04	; 4
	return (ADCH << 8) | res;
 2ae:	25 b1       	in	r18, 0x05	; 5
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	92 2b       	or	r25, r18
 2b4:	08 95       	ret

uint16_t read_adc(uint8_t ch)	// Returns 10 bit number
{
	uint16_t res;

	if (ch > ADMAX) return 0;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
	SETBIT(ADCSRA, ADSC);	          // start conversion
	while ( !(ADCSRA & (1<<ADIF)) ) ;	// wait for ADC conversion
	ADCSRA |= ADIF;
          res = ADCL;                             // ADCL must be read first
	return (ADCH << 8) | res;
}
 2ba:	08 95       	ret

000002bc <read_adc_8bit>:

uint8_t read_adc_8bit(uint8_t ch)	// Returns 10 bit number
{

	if (ch > ADMAX) return 0;
 2bc:	88 30       	cpi	r24, 0x08	; 8
 2be:	68 f4       	brcc	.+26     	; 0x2da <read_adc_8bit+0x1e>
	ADMUX &= ~0x1F ;                 // Clear the channel bits
 2c0:	97 b1       	in	r25, 0x07	; 7
 2c2:	90 7e       	andi	r25, 0xE0	; 224
 2c4:	97 b9       	out	0x07, r25	; 7
	ADMUX |=   ch;					// Set the desired channel
 2c6:	97 b1       	in	r25, 0x07	; 7
 2c8:	89 2b       	or	r24, r25
 2ca:	87 b9       	out	0x07, r24	; 7
	SETBIT(ADMUX, ADLAR);		    // Select Left adjust  
 2cc:	3d 9a       	sbi	0x07, 5	; 7
	SETBIT(ADCSRA, ADSC);			// start conversion
 2ce:	36 9a       	sbi	0x06, 6	; 6
	while ( !(ADCSRA & (1<<ADIF)) ) ;	// wait for ADC conversion
 2d0:	34 9b       	sbis	0x06, 4	; 6
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <read_adc_8bit+0x14>
	ADCSRA |= ADIF;
 2d4:	32 9a       	sbi	0x06, 2	; 6
          return ADCH;
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	08 95       	ret
}

uint8_t read_adc_8bit(uint8_t ch)	// Returns 10 bit number
{

	if (ch > ADMAX) return 0;
 2da:	80 e0       	ldi	r24, 0x00	; 0
	SETBIT(ADMUX, ADLAR);		    // Select Left adjust  
	SETBIT(ADCSRA, ADSC);			// start conversion
	while ( !(ADCSRA & (1<<ADIF)) ) ;	// wait for ADC conversion
	ADCSRA |= ADIF;
          return ADCH;
}
 2dc:	08 95       	ret

000002de <uart_init>:
#define COMPUTE_BAUD(b) ((uint32_t)(CPU_CLOCK)/((uint32_t)(b)*16) - 1)


    //Initialise UART: format 8 data bits, No parity, 1 stop bit
void uart_init(uint16_t baud)
{
 2de:	9c 01       	movw	r18, r24
    UCSRB = (1 << TXEN) | (1 << RXEN);
 2e0:	88 e1       	ldi	r24, 0x18	; 24
 2e2:	8a b9       	out	0x0a, r24	; 10
    UBRRH = (COMPUTE_BAUD(baud) >> 8) & 0xff;
 2e4:	c9 01       	movw	r24, r18
 2e6:	a0 e0       	ldi	r26, 0x00	; 0
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	aa 1f       	adc	r26, r26
 2f0:	bb 1f       	adc	r27, r27
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	aa 1f       	adc	r26, r26
 2f8:	bb 1f       	adc	r27, r27
 2fa:	9c 01       	movw	r18, r24
 2fc:	ad 01       	movw	r20, r26
 2fe:	22 0f       	add	r18, r18
 300:	33 1f       	adc	r19, r19
 302:	44 1f       	adc	r20, r20
 304:	55 1f       	adc	r21, r21
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	44 1f       	adc	r20, r20
 30c:	55 1f       	adc	r21, r21
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	72 e1       	ldi	r23, 0x12	; 18
 312:	8a e7       	ldi	r24, 0x7A	; 122
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 08 02 	call	0x410	; 0x410 <__udivmodsi4>
 31a:	da 01       	movw	r26, r20
 31c:	c9 01       	movw	r24, r18
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	a1 09       	sbc	r26, r1
 322:	b1 09       	sbc	r27, r1
 324:	89 2f       	mov	r24, r25
 326:	9a 2f       	mov	r25, r26
 328:	ab 2f       	mov	r26, r27
 32a:	bb 27       	eor	r27, r27
 32c:	80 bd       	out	0x20, r24	; 32
    UBRRL = (COMPUTE_BAUD(baud)) & 0xff;
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	29 b9       	out	0x09, r18	; 9
    UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 332:	86 e8       	ldi	r24, 0x86	; 134
 334:	80 bd       	out	0x20, r24	; 32
 336:	08 95       	ret

00000338 <uart_recv_byte>:
}


uint8_t uart_recv_byte(void)
{
    while( !(UCSRA & (1 <<RXC)) );
 338:	5f 9b       	sbis	0x0b, 7	; 11
 33a:	fe cf       	rjmp	.-4      	; 0x338 <uart_recv_byte>
    return UDR;
 33c:	8c b1       	in	r24, 0x0c	; 12
}
 33e:	08 95       	ret

00000340 <uart_send_byte>:

void uart_send_byte(uint8_t c)
{
    while( !(UCSRA & (1 <<UDRE) ) );
 340:	5d 9b       	sbis	0x0b, 5	; 11
 342:	fe cf       	rjmp	.-4      	; 0x340 <uart_send_byte>
    UDR = c;
 344:	8c b9       	out	0x0c, r24	; 12
 346:	08 95       	ret

00000348 <uart_send_string>:
}


void uart_send_string(char *p)
{
 348:	fc 01       	movw	r30, r24
	while(*p) {
 34a:	90 81       	ld	r25, Z
 34c:	99 23       	and	r25, r25
 34e:	39 f0       	breq	.+14     	; 0x35e <uart_send_string+0x16>
 350:	31 96       	adiw	r30, 0x01	; 1
    return UDR;
}

void uart_send_byte(uint8_t c)
{
    while( !(UCSRA & (1 <<UDRE) ) );
 352:	5d 9b       	sbis	0x0b, 5	; 11
 354:	fe cf       	rjmp	.-4      	; 0x352 <uart_send_string+0xa>
    UDR = c;
 356:	9c b9       	out	0x0c, r25	; 12
}


void uart_send_string(char *p)
{
	while(*p) {
 358:	91 91       	ld	r25, Z+
 35a:	91 11       	cpse	r25, r1
 35c:	fa cf       	rjmp	.-12     	; 0x352 <uart_send_string+0xa>
 35e:	08 95       	ret

00000360 <uart_send_byte_ascii>:
		++p;
	}
}

void uart_send_byte_ascii(uint8_t val)
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	2a 97       	sbiw	r28, 0x0a	; 10
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 374:	4a e0       	ldi	r20, 0x0A	; 10
 376:	be 01       	movw	r22, r28
 378:	6f 5f       	subi	r22, 0xFF	; 255
 37a:	7f 4f       	sbci	r23, 0xFF	; 255
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 2a 02 	call	0x454	; 0x454 <__utoa_ncheck>
}


void uart_send_string(char *p)
{
	while(*p) {
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	88 23       	and	r24, r24
 386:	41 f0       	breq	.+16     	; 0x398 <uart_send_byte_ascii+0x38>
 388:	fe 01       	movw	r30, r28
 38a:	32 96       	adiw	r30, 0x02	; 2
    return UDR;
}

void uart_send_byte(uint8_t c)
{
    while( !(UCSRA & (1 <<UDRE) ) );
 38c:	5d 9b       	sbis	0x0b, 5	; 11
 38e:	fe cf       	rjmp	.-4      	; 0x38c <uart_send_byte_ascii+0x2c>
    UDR = c;
 390:	8c b9       	out	0x0c, r24	; 12
}


void uart_send_string(char *p)
{
	while(*p) {
 392:	81 91       	ld	r24, Z+
 394:	81 11       	cpse	r24, r1
 396:	fa cf       	rjmp	.-12     	; 0x38c <uart_send_byte_ascii+0x2c>
void uart_send_byte_ascii(uint8_t val)
{
     char a[10];
     utoa(val, a, 10);    // convert to ASCII string
     uart_send_string(a);
 398:	2a 96       	adiw	r28, 0x0a	; 10
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <main>:
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <main+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <main+0x8>
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <main+0xa>
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	87 bb       	out	0x17, r24	; 23
 3bc:	0e 94 33 01 	call	0x266	; 0x266 <adc_enable>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	96 e9       	ldi	r25, 0x96	; 150
 3c4:	0e 94 6f 01 	call	0x2de	; 0x2de <uart_init>
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 49 01 	call	0x292	; 0x292 <read_adc>
 3ce:	9c 01       	movw	r18, r24
 3d0:	36 95       	lsr	r19
 3d2:	27 95       	ror	r18
 3d4:	36 95       	lsr	r19
 3d6:	27 95       	ror	r18
 3d8:	28 bb       	out	0x18, r18	; 24
 3da:	4a e0       	ldi	r20, 0x0A	; 10
 3dc:	be 01       	movw	r22, r28
 3de:	6f 5f       	subi	r22, 0xFF	; 255
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	0e 94 2a 02 	call	0x454	; 0x454 <__utoa_ncheck>
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	88 23       	and	r24, r24
 3ea:	51 f0       	breq	.+20     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ec:	8e 01       	movw	r16, r28
 3ee:	0e 5f       	subi	r16, 0xFE	; 254
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
 3f2:	0e 94 a0 01 	call	0x340	; 0x340 <uart_send_byte>
 3f6:	f8 01       	movw	r30, r16
 3f8:	81 91       	ld	r24, Z+
 3fa:	8f 01       	movw	r16, r30
 3fc:	81 11       	cpse	r24, r1
 3fe:	f9 cf       	rjmp	.-14     	; 0x3f2 <main+0x48>
 400:	8a e0       	ldi	r24, 0x0A	; 10
 402:	0e 94 a0 01 	call	0x340	; 0x340 <uart_send_byte>
 406:	84 ef       	ldi	r24, 0xF4	; 244
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	0e 94 6c 00 	call	0xd8	; 0xd8 <delay_ms>
 40e:	dc cf       	rjmp	.-72     	; 0x3c8 <main+0x1e>

00000410 <__udivmodsi4>:
 410:	a1 e2       	ldi	r26, 0x21	; 33
 412:	1a 2e       	mov	r1, r26
 414:	aa 1b       	sub	r26, r26
 416:	bb 1b       	sub	r27, r27
 418:	fd 01       	movw	r30, r26
 41a:	0d c0       	rjmp	.+26     	; 0x436 <__udivmodsi4_ep>

0000041c <__udivmodsi4_loop>:
 41c:	aa 1f       	adc	r26, r26
 41e:	bb 1f       	adc	r27, r27
 420:	ee 1f       	adc	r30, r30
 422:	ff 1f       	adc	r31, r31
 424:	a2 17       	cp	r26, r18
 426:	b3 07       	cpc	r27, r19
 428:	e4 07       	cpc	r30, r20
 42a:	f5 07       	cpc	r31, r21
 42c:	20 f0       	brcs	.+8      	; 0x436 <__udivmodsi4_ep>
 42e:	a2 1b       	sub	r26, r18
 430:	b3 0b       	sbc	r27, r19
 432:	e4 0b       	sbc	r30, r20
 434:	f5 0b       	sbc	r31, r21

00000436 <__udivmodsi4_ep>:
 436:	66 1f       	adc	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	88 1f       	adc	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	1a 94       	dec	r1
 440:	69 f7       	brne	.-38     	; 0x41c <__udivmodsi4_loop>
 442:	60 95       	com	r22
 444:	70 95       	com	r23
 446:	80 95       	com	r24
 448:	90 95       	com	r25
 44a:	9b 01       	movw	r18, r22
 44c:	ac 01       	movw	r20, r24
 44e:	bd 01       	movw	r22, r26
 450:	cf 01       	movw	r24, r30
 452:	08 95       	ret

00000454 <__utoa_ncheck>:
 454:	bb 27       	eor	r27, r27

00000456 <__utoa_common>:
 456:	fb 01       	movw	r30, r22
 458:	55 27       	eor	r21, r21
 45a:	aa 27       	eor	r26, r26
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	aa 1f       	adc	r26, r26
 462:	a4 17       	cp	r26, r20
 464:	10 f0       	brcs	.+4      	; 0x46a <__utoa_common+0x14>
 466:	a4 1b       	sub	r26, r20
 468:	83 95       	inc	r24
 46a:	50 51       	subi	r21, 0x10	; 16
 46c:	b9 f7       	brne	.-18     	; 0x45c <__utoa_common+0x6>
 46e:	a0 5d       	subi	r26, 0xD0	; 208
 470:	aa 33       	cpi	r26, 0x3A	; 58
 472:	08 f0       	brcs	.+2      	; 0x476 <__utoa_common+0x20>
 474:	a9 5d       	subi	r26, 0xD9	; 217
 476:	a1 93       	st	Z+, r26
 478:	00 97       	sbiw	r24, 0x00	; 0
 47a:	79 f7       	brne	.-34     	; 0x45a <__utoa_common+0x4>
 47c:	b1 11       	cpse	r27, r1
 47e:	b1 93       	st	Z+, r27
 480:	11 92       	st	Z+, r1
 482:	cb 01       	movw	r24, r22
 484:	0c 94 44 02 	jmp	0x488	; 0x488 <strrev>

00000488 <strrev>:
 488:	dc 01       	movw	r26, r24
 48a:	fc 01       	movw	r30, r24
 48c:	67 2f       	mov	r22, r23
 48e:	71 91       	ld	r23, Z+
 490:	77 23       	and	r23, r23
 492:	e1 f7       	brne	.-8      	; 0x48c <strrev+0x4>
 494:	32 97       	sbiw	r30, 0x02	; 2
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <strrev+0x18>
 498:	7c 91       	ld	r23, X
 49a:	6d 93       	st	X+, r22
 49c:	70 83       	st	Z, r23
 49e:	62 91       	ld	r22, -Z
 4a0:	ae 17       	cp	r26, r30
 4a2:	bf 07       	cpc	r27, r31
 4a4:	c8 f3       	brcs	.-14     	; 0x498 <strrev+0x10>
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
