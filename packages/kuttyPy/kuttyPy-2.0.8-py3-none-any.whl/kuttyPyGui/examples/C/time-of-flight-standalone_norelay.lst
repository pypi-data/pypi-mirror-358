
/home/jithin/Documents/CSpark/kuttypy-gui/examples/C/time-of-flight-standalone_norelay:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 06 	call	0xc4c	; 0xc4c <main>
      8a:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay_us>:
    while(x)
        --x;
}

void delay_us(uint16_t k) // not correct
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <delay_us+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t x = k;
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
    while(x)
      a0:	89 81       	ldd	r24, Y+1	; 0x01
      a2:	9a 81       	ldd	r25, Y+2	; 0x02
      a4:	89 2b       	or	r24, r25
      a6:	49 f0       	breq	.+18     	; 0xba <delay_us+0x28>
        --x;
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	9a 81       	ldd	r25, Y+2	; 0x02
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	9a 83       	std	Y+2, r25	; 0x02
      b0:	89 83       	std	Y+1, r24	; 0x01
}

void delay_us(uint16_t k) // not correct
{
    volatile uint16_t x = k;
    while(x)
      b2:	89 81       	ldd	r24, Y+1	; 0x01
      b4:	9a 81       	ldd	r25, Y+2	; 0x02
      b6:	89 2b       	or	r24, r25
      b8:	b9 f7       	brne	.-18     	; 0xa8 <delay_us+0x16>
        --x;
}
      ba:	0f 90       	pop	r0
      bc:	0f 90       	pop	r0
      be:	df 91       	pop	r29
      c0:	cf 91       	pop	r28
      c2:	08 95       	ret

000000c4 <delay>:
      c4:	0c 94 49 00 	jmp	0x92	; 0x92 <delay_us>

000000c8 <delay_100us>:


void delay_100us (uint16_t k)  	 // k* 100 usecs delay, valid only for 8MHz clock
{
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	00 d0       	rcall	.+0      	; 0xce <delay_100us+0x6>
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t x;
  while (k--) {x=52; while (x--);}
      d2:	64 e3       	ldi	r22, 0x34	; 52
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	01 97       	sbiw	r24, 0x01	; 1
      d8:	68 f0       	brcs	.+26     	; 0xf4 <delay_100us+0x2c>
      da:	7a 83       	std	Y+2, r23	; 0x02
      dc:	69 83       	std	Y+1, r22	; 0x01
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	a9 01       	movw	r20, r18
      e4:	41 50       	subi	r20, 0x01	; 1
      e6:	51 09       	sbc	r21, r1
      e8:	5a 83       	std	Y+2, r21	; 0x02
      ea:	49 83       	std	Y+1, r20	; 0x01
      ec:	23 2b       	or	r18, r19
      ee:	b9 f7       	brne	.-18     	; 0xde <delay_100us+0x16>
      f0:	01 97       	sbiw	r24, 0x01	; 1
      f2:	98 f7       	brcc	.-26     	; 0xda <delay_100us+0x12>
}
      f4:	0f 90       	pop	r0
      f6:	0f 90       	pop	r0
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <delay_ms>:

void delay_ms (uint16_t k)  // idle for k milliseconds, only for 8MHz clock
    {
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	00 d0       	rcall	.+0      	; 0x104 <delay_ms+0x6>
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t x;
    while(k--) {x=532; while (x--);}
     108:	64 e1       	ldi	r22, 0x14	; 20
     10a:	72 e0       	ldi	r23, 0x02	; 2
     10c:	01 97       	sbiw	r24, 0x01	; 1
     10e:	68 f0       	brcs	.+26     	; 0x12a <delay_ms+0x2c>
     110:	7a 83       	std	Y+2, r23	; 0x02
     112:	69 83       	std	Y+1, r22	; 0x01
     114:	29 81       	ldd	r18, Y+1	; 0x01
     116:	3a 81       	ldd	r19, Y+2	; 0x02
     118:	a9 01       	movw	r20, r18
     11a:	41 50       	subi	r20, 0x01	; 1
     11c:	51 09       	sbc	r21, r1
     11e:	5a 83       	std	Y+2, r21	; 0x02
     120:	49 83       	std	Y+1, r20	; 0x01
     122:	23 2b       	or	r18, r19
     124:	b9 f7       	brne	.-18     	; 0x114 <delay_ms+0x16>
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	98 f7       	brcc	.-26     	; 0x110 <delay_ms+0x12>
    }
     12a:	0f 90       	pop	r0
     12c:	0f 90       	pop	r0
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <b2a>:
    

// Converts an 8bit integer to 3 digit decimal form.
void b2a(int b, char* a)
{
     134:	fb 01       	movw	r30, r22
uint8_t d1,d2,d3;
char *p = a;

d3 = 0;
while (b >= 100)
     136:	84 36       	cpi	r24, 0x64	; 100
     138:	91 05       	cpc	r25, r1
     13a:	3c f1       	brlt	.+78     	; 0x18a <b2a+0x56>
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	01 c0       	rjmp	.+2      	; 0x142 <b2a+0xe>
       {
	++d3;
     140:	23 2f       	mov	r18, r19
     142:	31 e0       	ldi	r19, 0x01	; 1
     144:	32 0f       	add	r19, r18
	b -= 100;
     146:	84 56       	subi	r24, 0x64	; 100
     148:	91 09       	sbc	r25, r1
{
uint8_t d1,d2,d3;
char *p = a;

d3 = 0;
while (b >= 100)
     14a:	84 36       	cpi	r24, 0x64	; 100
     14c:	91 05       	cpc	r25, r1
     14e:	c4 f7       	brge	.-16     	; 0x140 <b2a+0xc>
       {
	++d3;
	b -= 100;
	}
if (d3) *p++ = d3 + '0';
     150:	33 23       	and	r19, r19
     152:	d9 f0       	breq	.+54     	; 0x18a <b2a+0x56>
     154:	df 01       	movw	r26, r30
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	2f 5c       	subi	r18, 0xCF	; 207
     15a:	20 83       	st	Z, r18

d2 = 0;
while (b >= 10)
     15c:	8a 30       	cpi	r24, 0x0A	; 10
     15e:	91 05       	cpc	r25, r1
     160:	dc f0       	brlt	.+54     	; 0x198 <b2a+0x64>

// Converts an 8bit integer to 3 digit decimal form.
void b2a(int b, char* a)
{
uint8_t d1,d2,d3;
char *p = a;
     162:	20 e0       	ldi	r18, 0x00	; 0
     164:	01 c0       	rjmp	.+2      	; 0x168 <b2a+0x34>
if (d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
       {
	++d2;
     166:	23 2f       	mov	r18, r19
     168:	31 e0       	ldi	r19, 0x01	; 1
     16a:	32 0f       	add	r19, r18
	b -= 10;
     16c:	0a 97       	sbiw	r24, 0x0a	; 10
	b -= 100;
	}
if (d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
     16e:	8a 30       	cpi	r24, 0x0A	; 10
     170:	91 05       	cpc	r25, r1
     172:	cc f7       	brge	.-14     	; 0x166 <b2a+0x32>
     174:	2f 5c       	subi	r18, 0xCF	; 207
       {
	++d2;
	b -= 10;
	}
if (d3 | d2) *p++ = d2 + '0';
     176:	fd 01       	movw	r30, r26
     178:	31 96       	adiw	r30, 0x01	; 1
     17a:	2c 93       	st	X, r18

d1 = 0;
while (b > 0)
     17c:	18 16       	cp	r1, r24
     17e:	19 06       	cpc	r1, r25
     180:	4c f4       	brge	.+18     	; 0x194 <b2a+0x60>
     182:	80 5d       	subi	r24, 0xD0	; 208
       {
	++d1;
	b -= 1;
	}
*p++ =  d1 + '0';
     184:	80 83       	st	Z, r24
*p = '\0';
     186:	11 82       	std	Z+1, r1	; 0x01
}
     188:	08 95       	ret
	b -= 100;
	}
if (d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
     18a:	8a 30       	cpi	r24, 0x0A	; 10
     18c:	91 05       	cpc	r25, r1
     18e:	b4 f3       	brlt	.-20     	; 0x17c <b2a+0x48>

// Converts an 8bit integer to 3 digit decimal form.
void b2a(int b, char* a)
{
uint8_t d1,d2,d3;
char *p = a;
     190:	df 01       	movw	r26, r30
     192:	e7 cf       	rjmp	.-50     	; 0x162 <b2a+0x2e>
	b -= 10;
	}
if (d3 | d2) *p++ = d2 + '0';

d1 = 0;
while (b > 0)
     194:	80 e3       	ldi	r24, 0x30	; 48
     196:	f6 cf       	rjmp	.-20     	; 0x184 <b2a+0x50>
	b -= 100;
	}
if (d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
     198:	20 e3       	ldi	r18, 0x30	; 48
     19a:	ed cf       	rjmp	.-38     	; 0x176 <b2a+0x42>

0000019c <b2aa>:
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;

d5 = 0;
while (b >= 10000)
     19c:	80 31       	cpi	r24, 0x10	; 16
     19e:	27 e2       	ldi	r18, 0x27	; 39
     1a0:	92 07       	cpc	r25, r18
     1a2:	0c f4       	brge	.+2      	; 0x1a6 <b2aa+0xa>
     1a4:	58 c0       	rjmp	.+176    	; 0x256 <b2aa+0xba>
       {
	++d5;
	b -= 10000;
     1a6:	9c 01       	movw	r18, r24
     1a8:	20 51       	subi	r18, 0x10	; 16
     1aa:	37 42       	sbci	r19, 0x27	; 39
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;

d5 = 0;
while (b >= 10000)
     1ac:	20 31       	cpi	r18, 0x10	; 16
     1ae:	47 e2       	ldi	r20, 0x27	; 39
     1b0:	34 07       	cpc	r19, r20
     1b2:	0c f4       	brge	.+2      	; 0x1b6 <b2aa+0x1a>
     1b4:	5e c0       	rjmp	.+188    	; 0x272 <b2aa+0xd6>
       {
	++d5;
	b -= 10000;
     1b6:	20 51       	subi	r18, 0x10	; 16
     1b8:	37 42       	sbci	r19, 0x27	; 39
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;

d5 = 0;
while (b >= 10000)
     1ba:	20 31       	cpi	r18, 0x10	; 16
     1bc:	a7 e2       	ldi	r26, 0x27	; 39
     1be:	3a 07       	cpc	r19, r26
     1c0:	0c f4       	brge	.+2      	; 0x1c4 <b2aa+0x28>
     1c2:	5a c0       	rjmp	.+180    	; 0x278 <b2aa+0xdc>
       {
	++d5;
	b -= 10000;
     1c4:	80 53       	subi	r24, 0x30	; 48
     1c6:	95 47       	sbci	r25, 0x75	; 117
char *p = a;

d5 = 0;
while (b >= 10000)
       {
	++d5;
     1c8:	22 e0       	ldi	r18, 0x02	; 2
	b -= 10000;
	}
if(d5) *p++ = d5 + '0';
     1ca:	fb 01       	movw	r30, r22
     1cc:	31 96       	adiw	r30, 0x01	; 1
     1ce:	2f 5c       	subi	r18, 0xCF	; 207
     1d0:	db 01       	movw	r26, r22
     1d2:	2c 93       	st	X, r18

d4 = 0;
while (b >= 1000)
     1d4:	88 3e       	cpi	r24, 0xE8	; 232
     1d6:	b3 e0       	ldi	r27, 0x03	; 3
     1d8:	9b 07       	cpc	r25, r27
     1da:	0c f4       	brge	.+2      	; 0x1de <b2aa+0x42>
     1dc:	53 c0       	rjmp	.+166    	; 0x284 <b2aa+0xe8>

// Converts an 16bit integer to 5 digit decimal form.
void b2aa(int b, char* a)
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <b2aa+0x48>
if(d5) *p++ = d5 + '0';

d4 = 0;
while (b >= 1000)
       {
	++d4;
     1e2:	23 2f       	mov	r18, r19
     1e4:	31 e0       	ldi	r19, 0x01	; 1
     1e6:	32 0f       	add	r19, r18
	b -= 1000;
     1e8:	88 5e       	subi	r24, 0xE8	; 232
     1ea:	93 40       	sbci	r25, 0x03	; 3
	b -= 10000;
	}
if(d5) *p++ = d5 + '0';

d4 = 0;
while (b >= 1000)
     1ec:	88 3e       	cpi	r24, 0xE8	; 232
     1ee:	43 e0       	ldi	r20, 0x03	; 3
     1f0:	94 07       	cpc	r25, r20
     1f2:	bc f7       	brge	.-18     	; 0x1e2 <b2aa+0x46>
     1f4:	2f 5c       	subi	r18, 0xCF	; 207
       {
	++d4;
	b -= 1000;
	}
if (d5 | d4) *p++ = d4 + '0';
     1f6:	bf 01       	movw	r22, r30
     1f8:	6f 5f       	subi	r22, 0xFF	; 255
     1fa:	7f 4f       	sbci	r23, 0xFF	; 255
     1fc:	20 83       	st	Z, r18

	
d3 = 0;
while (b >= 100)
     1fe:	84 36       	cpi	r24, 0x64	; 100
     200:	91 05       	cpc	r25, r1
     202:	ec f1       	brlt	.+122    	; 0x27e <b2aa+0xe2>
	b -= 10000;
	}
if(d5) *p++ = d5 + '0';

d4 = 0;
while (b >= 1000)
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	01 c0       	rjmp	.+2      	; 0x20a <b2aa+0x6e>

	
d3 = 0;
while (b >= 100)
       {
	++d3;
     208:	23 2f       	mov	r18, r19
     20a:	31 e0       	ldi	r19, 0x01	; 1
     20c:	32 0f       	add	r19, r18
	b -= 100;
     20e:	84 56       	subi	r24, 0x64	; 100
     210:	91 09       	sbc	r25, r1
	}
if (d5 | d4) *p++ = d4 + '0';

	
d3 = 0;
while (b >= 100)
     212:	84 36       	cpi	r24, 0x64	; 100
     214:	91 05       	cpc	r25, r1
     216:	c4 f7       	brge	.-16     	; 0x208 <b2aa+0x6c>
     218:	2f 5c       	subi	r18, 0xCF	; 207
     21a:	fb 01       	movw	r30, r22
       {
	++d3;
	b -= 100;
	}
if (d5 | d4 | d3) *p++ = d3 + '0';
     21c:	6f 5f       	subi	r22, 0xFF	; 255
     21e:	7f 4f       	sbci	r23, 0xFF	; 255
     220:	20 83       	st	Z, r18

d2 = 0;
while (b >= 10)
     222:	8a 30       	cpi	r24, 0x0A	; 10
     224:	91 05       	cpc	r25, r1
     226:	84 f1       	brlt	.+96     	; 0x288 <b2aa+0xec>
	}
if (d5 | d4) *p++ = d4 + '0';

	
d3 = 0;
while (b >= 100)
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	01 c0       	rjmp	.+2      	; 0x22e <b2aa+0x92>
if (d5 | d4 | d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
       {
	++d2;
     22c:	23 2f       	mov	r18, r19
     22e:	31 e0       	ldi	r19, 0x01	; 1
     230:	32 0f       	add	r19, r18
	b -= 10;
     232:	0a 97       	sbiw	r24, 0x0a	; 10
	b -= 100;
	}
if (d5 | d4 | d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
     234:	8a 30       	cpi	r24, 0x0A	; 10
     236:	91 05       	cpc	r25, r1
     238:	cc f7       	brge	.-14     	; 0x22c <b2aa+0x90>
     23a:	2f 5c       	subi	r18, 0xCF	; 207
       {
	++d2;
	b -= 10;
	}
if (d5 | d4 | d3 | d2) *p++ = d2 + '0';
     23c:	fb 01       	movw	r30, r22
     23e:	31 96       	adiw	r30, 0x01	; 1
     240:	db 01       	movw	r26, r22
     242:	2c 93       	st	X, r18

d1 = 0;
while (b > 0)
     244:	18 16       	cp	r1, r24
     246:	19 06       	cpc	r1, r25
     248:	24 f4       	brge	.+8      	; 0x252 <b2aa+0xb6>
     24a:	80 5d       	subi	r24, 0xD0	; 208
       {
	++d1;
	b -= 1;
	}
*p++ =  d1 + '0';
     24c:	80 83       	st	Z, r24
*p = '\0';
     24e:	11 82       	std	Z+1, r1	; 0x01
}
     250:	08 95       	ret
	b -= 10;
	}
if (d5 | d4 | d3 | d2) *p++ = d2 + '0';

d1 = 0;
while (b > 0)
     252:	80 e3       	ldi	r24, 0x30	; 48
     254:	fb cf       	rjmp	.-10     	; 0x24c <b2aa+0xb0>
	b -= 10000;
	}
if(d5) *p++ = d5 + '0';

d4 = 0;
while (b >= 1000)
     256:	88 3e       	cpi	r24, 0xE8	; 232
     258:	b3 e0       	ldi	r27, 0x03	; 3
     25a:	9b 07       	cpc	r25, r27
     25c:	14 f0       	brlt	.+4      	; 0x262 <b2aa+0xc6>

// Converts an 16bit integer to 5 digit decimal form.
void b2aa(int b, char* a)
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;
     25e:	fb 01       	movw	r30, r22
     260:	be cf       	rjmp	.-132    	; 0x1de <b2aa+0x42>
	}
if (d5 | d4) *p++ = d4 + '0';

	
d3 = 0;
while (b >= 100)
     262:	84 36       	cpi	r24, 0x64	; 100
     264:	91 05       	cpc	r25, r1
     266:	74 f6       	brge	.-100    	; 0x204 <b2aa+0x68>
	b -= 100;
	}
if (d5 | d4 | d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
     268:	8a 30       	cpi	r24, 0x0A	; 10
     26a:	91 05       	cpc	r25, r1
     26c:	ec f6       	brge	.-70     	; 0x228 <b2aa+0x8c>
     26e:	fb 01       	movw	r30, r22
     270:	e9 cf       	rjmp	.-46     	; 0x244 <b2aa+0xa8>
{
uint8_t d1,d2,d3,d4,d5;
char *p = a;

d5 = 0;
while (b >= 10000)
     272:	c9 01       	movw	r24, r18
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	a9 cf       	rjmp	.-174    	; 0x1ca <b2aa+0x2e>
     278:	c9 01       	movw	r24, r18
       {
	++d5;
     27a:	21 e0       	ldi	r18, 0x01	; 1
     27c:	a6 cf       	rjmp	.-180    	; 0x1ca <b2aa+0x2e>
while (b >= 1000)
       {
	++d4;
	b -= 1000;
	}
if (d5 | d4) *p++ = d4 + '0';
     27e:	fb 01       	movw	r30, r22

	
d3 = 0;
while (b >= 100)
     280:	20 e3       	ldi	r18, 0x30	; 48
     282:	cc cf       	rjmp	.-104    	; 0x21c <b2aa+0x80>
	b -= 10000;
	}
if(d5) *p++ = d5 + '0';

d4 = 0;
while (b >= 1000)
     284:	20 e3       	ldi	r18, 0x30	; 48
     286:	b7 cf       	rjmp	.-146    	; 0x1f6 <b2aa+0x5a>
	b -= 100;
	}
if (d5 | d4 | d3) *p++ = d3 + '0';

d2 = 0;
while (b >= 10)
     288:	20 e3       	ldi	r18, 0x30	; 48
     28a:	d8 cf       	rjmp	.-80     	; 0x23c <b2aa+0xa0>

0000028c <delay_sec>:

#include <avr/io.h>
#include <avr/interrupt.h>

void delay_sec (void)  // idle for 1 seconds, only for 8MHz clock
    {
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	00 d0       	rcall	.+0      	; 0x292 <delay_sec+0x6>
     292:	00 d0       	rcall	.+0      	; 0x294 <delay_sec+0x8>
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t x, k =1000;
     298:	88 ee       	ldi	r24, 0xE8	; 232
     29a:	93 e0       	ldi	r25, 0x03	; 3
     29c:	9a 83       	std	Y+2, r25	; 0x02
     29e:	89 83       	std	Y+1, r24	; 0x01
    while(k--) {x=5320; while (x--);}
     2a0:	48 ec       	ldi	r20, 0xC8	; 200
     2a2:	54 e1       	ldi	r21, 0x14	; 20
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	9c 01       	movw	r18, r24
     2aa:	21 50       	subi	r18, 0x01	; 1
     2ac:	31 09       	sbc	r19, r1
     2ae:	3a 83       	std	Y+2, r19	; 0x02
     2b0:	29 83       	std	Y+1, r18	; 0x01
     2b2:	89 2b       	or	r24, r25
     2b4:	61 f0       	breq	.+24     	; 0x2ce <delay_sec+0x42>
     2b6:	5c 83       	std	Y+4, r21	; 0x04
     2b8:	4b 83       	std	Y+3, r20	; 0x03
     2ba:	8b 81       	ldd	r24, Y+3	; 0x03
     2bc:	9c 81       	ldd	r25, Y+4	; 0x04
     2be:	9c 01       	movw	r18, r24
     2c0:	21 50       	subi	r18, 0x01	; 1
     2c2:	31 09       	sbc	r19, r1
     2c4:	3c 83       	std	Y+4, r19	; 0x04
     2c6:	2b 83       	std	Y+3, r18	; 0x03
     2c8:	89 2b       	or	r24, r25
     2ca:	b9 f7       	brne	.-18     	; 0x2ba <delay_sec+0x2e>
     2cc:	eb cf       	rjmp	.-42     	; 0x2a4 <delay_sec+0x18>
    }
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <sqwave_tc1>:

void sqwave_tc1(uint8_t csb, uint16_t ocra) 
{
		// This can set very low values of freqency on the output
  TCCR1A = (1 << COM1A0);    // Set TCCR1A in the CTC mode
     2dc:	90 e4       	ldi	r25, 0x40	; 64
     2de:	9f bd       	out	0x2f, r25	; 47
  TCCR1B = (1 << WGM12) | csb;	
     2e0:	88 60       	ori	r24, 0x08	; 8
     2e2:	8e bd       	out	0x2e, r24	; 46
  OCR1A = ocra;     // Output Compare register values
     2e4:	7b bd       	out	0x2b, r23	; 43
     2e6:	6a bd       	out	0x2a, r22	; 42
  TCNT1 = 0;
     2e8:	1d bc       	out	0x2d, r1	; 45
     2ea:	1c bc       	out	0x2c, r1	; 44
  DDRD |= (1 << PD5);   // Set pin OC1A as output
     2ec:	8d 9a       	sbi	0x11, 5	; 17
     2ee:	08 95       	ret

000002f0 <pwm10_tc1>:
}

void pwm10_tc1(uint8_t csb, uint16_t ocra) 
{
  TCCR1A = (1 << COM1A1) | (1 << WGM11) |(1 << WGM10);  // Set 10bit PWM mode
     2f0:	93 e8       	ldi	r25, 0x83	; 131
     2f2:	9f bd       	out	0x2f, r25	; 47
  TCCR1B = csb;	
     2f4:	8e bd       	out	0x2e, r24	; 46
  OCR1A = ocra;     // Output Compare register values
     2f6:	7b bd       	out	0x2b, r23	; 43
     2f8:	6a bd       	out	0x2a, r22	; 42
  TCNT1 = 0;
     2fa:	1d bc       	out	0x2d, r1	; 45
     2fc:	1c bc       	out	0x2c, r1	; 44
  DDRD |= (1 << PD5);   // Set pin OC1A as output
     2fe:	8d 9a       	sbi	0x11, 5	; 17
     300:	08 95       	ret

00000302 <measure_freq>:

extern void delay_ms (uint16_t k);

uint32_t measure_freq(void)
{ 
  DDRB &= ~(1 << PB1);      // Timer/Counter1 clock in T1 (PB1) as input
     302:	b9 98       	cbi	0x17, 1	; 23
  TCCR1B = (1 << CS12) | (1 << CS11) | (1 << CS10); // External clock on T1 pin 
     304:	87 e0       	ldi	r24, 0x07	; 7
     306:	8e bd       	out	0x2e, r24	; 46
  TCNT1 = 0;			    // Clear TCNT1
     308:	1d bc       	out	0x2d, r1	; 45
     30a:	1c bc       	out	0x2c, r1	; 44
  delay_ms(536);
     30c:	88 e1       	ldi	r24, 0x18	; 24
     30e:	92 e0       	ldi	r25, 0x02	; 2
     310:	0e 94 7f 00 	call	0xfe	; 0xfe <delay_ms>
  TCCR1B = 0;               // Stop counter
     314:	1e bc       	out	0x2e, r1	; 46
  return TCNT1 * 2;         // freq = Counts / 500 mS x 2
     316:	6c b5       	in	r22, 0x2c	; 44
     318:	7d b5       	in	r23, 0x2d	; 45
     31a:	66 0f       	add	r22, r22
     31c:	77 1f       	adc	r23, r23
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
}
     322:	08 95       	ret

00000324 <__vector_7>:

//----------------------- Time interval measurement--------------------------

volatile uint16_t HIWORD;
ISR(TIMER1_COMPA_vect)	// TIMER1 Compare Match A Interrupt
{
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	8f 93       	push	r24
     330:	9f 93       	push	r25
TCNT1 = 0;
     332:	1d bc       	out	0x2d, r1	; 45
     334:	1c bc       	out	0x2c, r1	; 44
++HIWORD;
     336:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <HIWORD>
     33a:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <HIWORD+0x1>
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <HIWORD+0x1>
     344:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <HIWORD>
}
     348:	9f 91       	pop	r25
     34a:	8f 91       	pop	r24
     34c:	0f 90       	pop	r0
     34e:	0f be       	out	0x3f, r0	; 63
     350:	0f 90       	pop	r0
     352:	1f 90       	pop	r1
     354:	18 95       	reti

00000356 <start_timer>:
{
/*
When TCNT1 reaches OCR1A, the ISR will run. It will clear TCNT1 and increment HIWORD.
The total time elapsed between start_timer and get_timer = HIWORD * 50000 + TCNT1
*/
 TCCR1B = (1 << CS11);   // Normal mode, with 1MHz clock
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	8e bd       	out	0x2e, r24	; 46
 HIWORD = 0;
     35a:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <HIWORD+0x1>
     35e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <HIWORD>
 OCR1A = 50000;        
     362:	80 e5       	ldi	r24, 0x50	; 80
     364:	93 ec       	ldi	r25, 0xC3	; 195
     366:	9b bd       	out	0x2b, r25	; 43
     368:	8a bd       	out	0x2a, r24	; 42
 OCR1B = 0xffff;
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	9f ef       	ldi	r25, 0xFF	; 255
     36e:	99 bd       	out	0x29, r25	; 41
     370:	88 bd       	out	0x28, r24	; 40
 TIMSK = (1 <<  OCIE1A);   // Enable compare match interrupt
     372:	80 e1       	ldi	r24, 0x10	; 16
     374:	89 bf       	out	0x39, r24	; 57
 TIFR = (1 << OCF1A); 
     376:	88 bf       	out	0x38, r24	; 56
 TCNT1 = 0;
     378:	1d bc       	out	0x2d, r1	; 45
     37a:	1c bc       	out	0x2c, r1	; 44
 sei();
     37c:	78 94       	sei
     37e:	08 95       	ret

00000380 <read_timer>:

uint32_t read_timer()
{
 uint32_t x;
 
 TCCR1B = 0;    // stop TC1 clock
     380:	1e bc       	out	0x2e, r1	; 46
 x = HIWORD * 50000 + TCNT1;
     382:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <HIWORD>
     386:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <HIWORD+0x1>
     38a:	4c b5       	in	r20, 0x2c	; 44
     38c:	5d b5       	in	r21, 0x2d	; 45
 cli();
     38e:	f8 94       	cli
 return x;
     390:	a0 e5       	ldi	r26, 0x50	; 80
     392:	b3 ec       	ldi	r27, 0xC3	; 195
     394:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__umulhisi3>
     398:	64 0f       	add	r22, r20
     39a:	75 1f       	adc	r23, r21
     39c:	81 1d       	adc	r24, r1
     39e:	91 1d       	adc	r25, r1
}
     3a0:	08 95       	ret

000003a2 <r2ftime>:

uint32_t r2ftime(uint8_t bit)  
{
// measures rising edge to falling edge time on any bit of PORTB. If no pulse input, program may go in infinite loop
 
 DDRB &= ~(1 << bit);   // set the selected bit as input, on PORT B   
     3a2:	97 b3       	in	r25, 0x17	; 23
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <r2ftime+0xc>
     3aa:	22 0f       	add	r18, r18
     3ac:	33 1f       	adc	r19, r19
     3ae:	8a 95       	dec	r24
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <r2ftime+0x8>
     3b2:	82 2f       	mov	r24, r18
     3b4:	80 95       	com	r24
     3b6:	98 23       	and	r25, r24
     3b8:	97 bb       	out	0x17, r25	; 23
 while( (PINB & (1 << bit)) != 0 ) ;   // Do nothing until the bit is low
     3ba:	86 b3       	in	r24, 0x16	; 22
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	82 23       	and	r24, r18
     3c0:	93 23       	and	r25, r19
     3c2:	89 2b       	or	r24, r25
     3c4:	d1 f7       	brne	.-12     	; 0x3ba <r2ftime+0x18>
 while( (PINB & (1 << bit)) == 0 ) ;   // Wait for a rising edge
     3c6:	86 b3       	in	r24, 0x16	; 22
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	82 23       	and	r24, r18
     3cc:	93 23       	and	r25, r19
     3ce:	89 2b       	or	r24, r25
     3d0:	d1 f3       	breq	.-12     	; 0x3c6 <r2ftime+0x24>
{
/*
When TCNT1 reaches OCR1A, the ISR will run. It will clear TCNT1 and increment HIWORD.
The total time elapsed between start_timer and get_timer = HIWORD * 50000 + TCNT1
*/
 TCCR1B = (1 << CS11);   // Normal mode, with 1MHz clock
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	8e bd       	out	0x2e, r24	; 46
 HIWORD = 0;
     3d6:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <HIWORD+0x1>
     3da:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <HIWORD>
 OCR1A = 50000;        
     3de:	80 e5       	ldi	r24, 0x50	; 80
     3e0:	93 ec       	ldi	r25, 0xC3	; 195
     3e2:	9b bd       	out	0x2b, r25	; 43
     3e4:	8a bd       	out	0x2a, r24	; 42
 OCR1B = 0xffff;
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	9f ef       	ldi	r25, 0xFF	; 255
     3ea:	99 bd       	out	0x29, r25	; 41
     3ec:	88 bd       	out	0x28, r24	; 40
 TIMSK = (1 <<  OCIE1A);   // Enable compare match interrupt
     3ee:	80 e1       	ldi	r24, 0x10	; 16
     3f0:	89 bf       	out	0x39, r24	; 57
 TIFR = (1 << OCF1A); 
     3f2:	88 bf       	out	0x38, r24	; 56
 TCNT1 = 0;
     3f4:	1d bc       	out	0x2d, r1	; 45
     3f6:	1c bc       	out	0x2c, r1	; 44
 sei();
     3f8:	78 94       	sei
 
 DDRB &= ~(1 << bit);   // set the selected bit as input, on PORT B   
 while( (PINB & (1 << bit)) != 0 ) ;   // Do nothing until the bit is low
 while( (PINB & (1 << bit)) == 0 ) ;   // Wait for a rising edge
 start_timer();
 while( (PINB & (1 << bit)) != 0 ) ;   // Wait for a falling edge
     3fa:	86 b3       	in	r24, 0x16	; 22
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	82 23       	and	r24, r18
     400:	93 23       	and	r25, r19
     402:	89 2b       	or	r24, r25
     404:	d1 f7       	brne	.-12     	; 0x3fa <r2ftime+0x58>

uint32_t read_timer()
{
 uint32_t x;
 
 TCCR1B = 0;    // stop TC1 clock
     406:	1e bc       	out	0x2e, r1	; 46
 x = HIWORD * 50000 + TCNT1;
     408:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <HIWORD>
     40c:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <HIWORD+0x1>
     410:	4c b5       	in	r20, 0x2c	; 44
     412:	5d b5       	in	r21, 0x2d	; 45
 cli();
     414:	f8 94       	cli
 DDRB &= ~(1 << bit);   // set the selected bit as input, on PORT B   
 while( (PINB & (1 << bit)) != 0 ) ;   // Do nothing until the bit is low
 while( (PINB & (1 << bit)) == 0 ) ;   // Wait for a rising edge
 start_timer();
 while( (PINB & (1 << bit)) != 0 ) ;   // Wait for a falling edge
 return read_timer();
     416:	a0 e5       	ldi	r26, 0x50	; 80
     418:	b3 ec       	ldi	r27, 0xC3	; 195
     41a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__umulhisi3>
     41e:	64 0f       	add	r22, r20
     420:	75 1f       	adc	r23, r21
     422:	81 1d       	adc	r24, r1
     424:	91 1d       	adc	r25, r1
}
     426:	08 95       	ret

00000428 <i2c_init>:
/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
TWSR=0x00; TWBR=0x46 ; TWCR=0x04; //Init I2C
     428:	11 b8       	out	0x01, r1	; 1
     42a:	86 e4       	ldi	r24, 0x46	; 70
     42c:	80 b9       	out	0x00, r24	; 0
     42e:	84 e0       	ldi	r24, 0x04	; 4
     430:	86 bf       	out	0x36, r24	; 54
PORTC |= 3; //Enable SCL/SDA Pull up	
     432:	85 b3       	in	r24, 0x15	; 21
     434:	83 60       	ori	r24, 0x03	; 3
     436:	85 bb       	out	0x15, r24	; 21
     438:	08 95       	ret

0000043a <i2c_scan>:

returns: total addresses found.
*************************************************************************/

uint8_t i2c_scan(uint8_t *data)
{
     43a:	fc 01       	movw	r30, r24
	uint8_t found=0;
	uint16_t timeout=11000;

	DDRC |= 1  ;// SCL as output .
     43c:	a0 9a       	sbi	0x14, 0	; 20
	PORTC &= ~3; while(timeout--); PORTC |=3; //Pull SCL low. some sensors need this.
     43e:	85 b3       	in	r24, 0x15	; 21
     440:	8c 7f       	andi	r24, 0xFC	; 252
     442:	85 bb       	out	0x15, r24	; 21
     444:	85 b3       	in	r24, 0x15	; 21
     446:	83 60       	ori	r24, 0x03	; 3
     448:	85 bb       	out	0x15, r24	; 21
	DDRC &= ~3 ;// SCL as input
     44a:	84 b3       	in	r24, 0x14	; 20
     44c:	8c 7f       	andi	r24, 0xFC	; 252
     44e:	84 bb       	out	0x14, r24	; 20
	PORTC |= 3; //Enable SCL/SDA Pull up	
     450:	85 b3       	in	r24, 0x15	; 21
     452:	83 60       	ori	r24, 0x03	; 3
     454:	85 bb       	out	0x15, r24	; 21
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	20 e5       	ldi	r18, 0x50	; 80
     45a:	33 ec       	ldi	r19, 0xC3	; 195
     45c:	80 e0       	ldi	r24, 0x00	; 0
	timeout=50000;

	for(uint8_t i = 1;i <= 127;i++){
		TWCR = 0xA4;             // send a start bit on i2c bus
     45e:	74 ea       	ldi	r23, 0xA4	; 164
		while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
		TWDR = i<<1;          // load address of i2c device
		TWCR = 0x84;             // transmit
     460:	64 e8       	ldi	r22, 0x84	; 132
		asm("WDR");
		if((TWSR&0xFC) == 0x18){   // SLA+W has been transmitted; ACK has been received
			*(data++) = i;
			found++;
		}		
		TWCR = 0x94;             // stop bit
     462:	54 e9       	ldi	r21, 0x94	; 148
	DDRC &= ~3 ;// SCL as input
	PORTC |= 3; //Enable SCL/SDA Pull up	
	timeout=50000;

	for(uint8_t i = 1;i <= 127;i++){
		TWCR = 0xA4;             // send a start bit on i2c bus
     464:	76 bf       	out	0x36, r23	; 54
		while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     466:	06 b6       	in	r0, 0x36	; 54
     468:	07 fe       	sbrs	r0, 7
     46a:	06 c0       	rjmp	.+12     	; 0x478 <i2c_scan+0x3e>
     46c:	1b c0       	rjmp	.+54     	; 0x4a4 <i2c_scan+0x6a>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	31 09       	sbc	r19, r1
     472:	06 b6       	in	r0, 0x36	; 54
     474:	07 fc       	sbrc	r0, 7
     476:	16 c0       	rjmp	.+44     	; 0x4a4 <i2c_scan+0x6a>
     478:	21 15       	cp	r18, r1
     47a:	31 05       	cpc	r19, r1
     47c:	c1 f7       	brne	.-16     	; 0x46e <i2c_scan+0x34>
		TWDR = i<<1;          // load address of i2c device
     47e:	29 2f       	mov	r18, r25
     480:	22 0f       	add	r18, r18
     482:	23 b9       	out	0x03, r18	; 3
		TWCR = 0x84;             // transmit
     484:	66 bf       	out	0x36, r22	; 54
		while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     486:	06 b6       	in	r0, 0x36	; 54
     488:	07 fe       	sbrs	r0, 7
     48a:	00 c0       	rjmp	.+0      	; 0x48c <i2c_scan+0x52>
	uint16_t timeout=11000;

	DDRC |= 1  ;// SCL as output .
	PORTC &= ~3; while(timeout--); PORTC |=3; //Pull SCL low. some sensors need this.
	DDRC &= ~3 ;// SCL as input
	PORTC |= 3; //Enable SCL/SDA Pull up	
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
		TWCR = 0xA4;             // send a start bit on i2c bus
		while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
		TWDR = i<<1;          // load address of i2c device
		TWCR = 0x84;             // transmit
		while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
		asm("WDR");
     490:	a8 95       	wdr
		if((TWSR&0xFC) == 0x18){   // SLA+W has been transmitted; ACK has been received
     492:	41 b1       	in	r20, 0x01	; 1
     494:	4c 7f       	andi	r20, 0xFC	; 252
     496:	48 31       	cpi	r20, 0x18	; 24
     498:	e9 f0       	breq	.+58     	; 0x4d4 <i2c_scan+0x9a>
			*(data++) = i;
			found++;
		}		
		TWCR = 0x94;             // stop bit
     49a:	56 bf       	out	0x36, r21	; 54
	PORTC &= ~3; while(timeout--); PORTC |=3; //Pull SCL low. some sensors need this.
	DDRC &= ~3 ;// SCL as input
	PORTC |= 3; //Enable SCL/SDA Pull up	
	timeout=50000;

	for(uint8_t i = 1;i <= 127;i++){
     49c:	9f 5f       	subi	r25, 0xFF	; 255
     49e:	90 38       	cpi	r25, 0x80	; 128
     4a0:	09 f7       	brne	.-62     	; 0x464 <i2c_scan+0x2a>
     4a2:	08 95       	ret
		TWCR = 0xA4;             // send a start bit on i2c bus
		while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
		TWDR = i<<1;          // load address of i2c device
     4a4:	49 2f       	mov	r20, r25
     4a6:	44 0f       	add	r20, r20
     4a8:	43 b9       	out	0x03, r20	; 3
		TWCR = 0x84;             // transmit
     4aa:	66 bf       	out	0x36, r22	; 54
		while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     4ac:	06 b6       	in	r0, 0x36	; 54
     4ae:	07 fc       	sbrc	r0, 7
     4b0:	ef cf       	rjmp	.-34     	; 0x490 <i2c_scan+0x56>
     4b2:	21 15       	cp	r18, r1
     4b4:	31 05       	cpc	r19, r1
     4b6:	21 f4       	brne	.+8      	; 0x4c0 <i2c_scan+0x86>
     4b8:	e9 cf       	rjmp	.-46     	; 0x48c <i2c_scan+0x52>
     4ba:	21 15       	cp	r18, r1
     4bc:	31 05       	cpc	r19, r1
     4be:	41 f3       	breq	.-48     	; 0x490 <i2c_scan+0x56>
     4c0:	21 50       	subi	r18, 0x01	; 1
     4c2:	31 09       	sbc	r19, r1
     4c4:	06 b6       	in	r0, 0x36	; 54
     4c6:	07 fe       	sbrs	r0, 7
     4c8:	f8 cf       	rjmp	.-16     	; 0x4ba <i2c_scan+0x80>
		asm("WDR");
     4ca:	a8 95       	wdr
		if((TWSR&0xFC) == 0x18){   // SLA+W has been transmitted; ACK has been received
     4cc:	41 b1       	in	r20, 0x01	; 1
     4ce:	4c 7f       	andi	r20, 0xFC	; 252
     4d0:	48 31       	cpi	r20, 0x18	; 24
     4d2:	19 f7       	brne	.-58     	; 0x49a <i2c_scan+0x60>
			*(data++) = i;
     4d4:	90 83       	st	Z, r25
			found++;
     4d6:	8f 5f       	subi	r24, 0xFF	; 255
		TWDR = i<<1;          // load address of i2c device
		TWCR = 0x84;             // transmit
		while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
		asm("WDR");
		if((TWSR&0xFC) == 0x18){   // SLA+W has been transmitted; ACK has been received
			*(data++) = i;
     4d8:	31 96       	adiw	r30, 0x01	; 1
     4da:	df cf       	rjmp	.-66     	; 0x49a <i2c_scan+0x60>

000004dc <i2c_write>:

uint8_t i2c_write(uint8_t address, uint8_t *data, uint8_t numbytes)
{

	uint16_t timeout = 10000;
	TWCR = 0xA4;                                                // send a start bit on i2c bus
     4dc:	94 ea       	ldi	r25, 0xA4	; 164
     4de:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     4e0:	06 b6       	in	r0, 0x36	; 54
     4e2:	07 fc       	sbrc	r0, 7
     4e4:	44 c0       	rjmp	.+136    	; 0x56e <i2c_write+0x92>
     4e6:	20 e1       	ldi	r18, 0x10	; 16
     4e8:	37 e2       	ldi	r19, 0x27	; 39
     4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <i2c_write+0x16>
     4ec:	21 15       	cp	r18, r1
     4ee:	31 05       	cpc	r19, r1
     4f0:	a1 f1       	breq	.+104    	; 0x55a <i2c_write+0x7e>
     4f2:	21 50       	subi	r18, 0x01	; 1
     4f4:	31 09       	sbc	r19, r1
     4f6:	06 b6       	in	r0, 0x36	; 54
     4f8:	07 fe       	sbrs	r0, 7
     4fa:	f8 cf       	rjmp	.-16     	; 0x4ec <i2c_write+0x10>
	TWDR = address<<1;                                             // load address of i2c device
     4fc:	88 0f       	add	r24, r24
     4fe:	83 b9       	out	0x03, r24	; 3
	TWCR = 0x84;                                                // transmit
     500:	84 e8       	ldi	r24, 0x84	; 132
     502:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     504:	06 b6       	in	r0, 0x36	; 54
     506:	07 fc       	sbrc	r0, 7
     508:	08 c0       	rjmp	.+16     	; 0x51a <i2c_write+0x3e>
     50a:	21 15       	cp	r18, r1
     50c:	31 05       	cpc	r19, r1
     50e:	61 f1       	breq	.+88     	; 0x568 <i2c_write+0x8c>
     510:	21 50       	subi	r18, 0x01	; 1
     512:	31 09       	sbc	r19, r1
     514:	06 b6       	in	r0, 0x36	; 54
     516:	07 fe       	sbrs	r0, 7
     518:	f8 cf       	rjmp	.-16     	; 0x50a <i2c_write+0x2e>

	while(numbytes--){			//
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	84 0f       	add	r24, r20
     51e:	44 23       	and	r20, r20
     520:	a1 f0       	breq	.+40     	; 0x54a <i2c_write+0x6e>
     522:	fb 01       	movw	r30, r22
		TWDR = *(data++);
		TWCR = 0x84;                                                // transmit
     524:	44 e8       	ldi	r20, 0x84	; 132
	TWDR = address<<1;                                             // load address of i2c device
	TWCR = 0x84;                                                // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit

	while(numbytes--){			//
		TWDR = *(data++);
     526:	91 91       	ld	r25, Z+
     528:	93 b9       	out	0x03, r25	; 3
		TWCR = 0x84;                                                // transmit
     52a:	46 bf       	out	0x36, r20	; 54
		while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     52c:	06 b6       	in	r0, 0x36	; 54
     52e:	07 fe       	sbrs	r0, 7
     530:	06 c0       	rjmp	.+12     	; 0x53e <i2c_write+0x62>
     532:	08 c0       	rjmp	.+16     	; 0x544 <i2c_write+0x68>
     534:	21 50       	subi	r18, 0x01	; 1
     536:	31 09       	sbc	r19, r1
     538:	06 b6       	in	r0, 0x36	; 54
     53a:	07 fc       	sbrc	r0, 7
     53c:	03 c0       	rjmp	.+6      	; 0x544 <i2c_write+0x68>
     53e:	21 15       	cp	r18, r1
     540:	31 05       	cpc	r19, r1
     542:	c1 f7       	brne	.-16     	; 0x534 <i2c_write+0x58>
		asm("WDR");
     544:	a8 95       	wdr
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
	TWDR = address<<1;                                             // load address of i2c device
	TWCR = 0x84;                                                // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit

	while(numbytes--){			//
     546:	81 50       	subi	r24, 0x01	; 1
     548:	70 f7       	brcc	.-36     	; 0x526 <i2c_write+0x4a>
		TWDR = *(data++);
		TWCR = 0x84;                                                // transmit
		while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
		asm("WDR");
	}
	TWCR = 0x94;                                                // stop bit
     54a:	84 e9       	ldi	r24, 0x94	; 148
     54c:	86 bf       	out	0x36, r24	; 54
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	23 2b       	or	r18, r19
     552:	11 f0       	breq	.+4      	; 0x558 <i2c_write+0x7c>
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	08 95       	ret
	if(timeout)return 0;		                                    // send timeout status
	else return 1;
}
     558:	08 95       	ret
{

	uint16_t timeout = 10000;
	TWCR = 0xA4;                                                // send a start bit on i2c bus
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
	TWDR = address<<1;                                             // load address of i2c device
     55a:	88 0f       	add	r24, r24
     55c:	83 b9       	out	0x03, r24	; 3
	TWCR = 0x84;                                                // transmit
     55e:	84 e8       	ldi	r24, 0x84	; 132
     560:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     562:	06 b6       	in	r0, 0x36	; 54
     564:	07 fc       	sbrc	r0, 7
     566:	d9 cf       	rjmp	.-78     	; 0x51a <i2c_write+0x3e>
*************************************************************************/

uint8_t i2c_write(uint8_t address, uint8_t *data, uint8_t numbytes)
{

	uint16_t timeout = 10000;
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	d6 cf       	rjmp	.-84     	; 0x51a <i2c_write+0x3e>
	TWCR = 0xA4;                                                // send a start bit on i2c bus
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
	TWDR = address<<1;                                             // load address of i2c device
     56e:	88 0f       	add	r24, r24
     570:	83 b9       	out	0x03, r24	; 3
	TWCR = 0x84;                                                // transmit
     572:	84 e8       	ldi	r24, 0x84	; 132
     574:	86 bf       	out	0x36, r24	; 54
*************************************************************************/

uint8_t i2c_write(uint8_t address, uint8_t *data, uint8_t numbytes)
{

	uint16_t timeout = 10000;
     576:	20 e1       	ldi	r18, 0x10	; 16
     578:	37 e2       	ldi	r19, 0x27	; 39
	TWCR = 0xA4;                                                // send a start bit on i2c bus
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
	TWDR = address<<1;                                             // load address of i2c device
	TWCR = 0x84;                                                // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     57a:	06 b6       	in	r0, 0x36	; 54
     57c:	07 fe       	sbrs	r0, 7
     57e:	c8 cf       	rjmp	.-112    	; 0x510 <i2c_write+0x34>
     580:	cc cf       	rjmp	.-104    	; 0x51a <i2c_write+0x3e>

00000582 <i2c_read>:
*************************************************************************/

uint8_t i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint8_t numbytes)
{
	uint16_t timeout = 10000;
	TWCR = 0xA4;                                   // send a start bit on i2c bus
     582:	94 ea       	ldi	r25, 0xA4	; 164
     584:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;    // wait for confirmation of transmit
     586:	06 b6       	in	r0, 0x36	; 54
     588:	07 fc       	sbrc	r0, 7
     58a:	98 c0       	rjmp	.+304    	; 0x6bc <i2c_read+0x13a>
     58c:	e0 e1       	ldi	r30, 0x10	; 16
     58e:	f7 e2       	ldi	r31, 0x27	; 39
     590:	02 c0       	rjmp	.+4      	; 0x596 <i2c_read+0x14>
     592:	30 97       	sbiw	r30, 0x00	; 0
     594:	11 f1       	breq	.+68     	; 0x5da <i2c_read+0x58>
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	06 b6       	in	r0, 0x36	; 54
     59a:	07 fe       	sbrs	r0, 7
     59c:	fa cf       	rjmp	.-12     	; 0x592 <i2c_read+0x10>
	TWDR = address<<1;                                // load address of i2c device
     59e:	98 2f       	mov	r25, r24
     5a0:	99 0f       	add	r25, r25
     5a2:	93 b9       	out	0x03, r25	; 3
	TWCR = 0x84;                                                // transmit
     5a4:	94 e8       	ldi	r25, 0x84	; 132
     5a6:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;      // wait for confirmation of transmit
     5a8:	06 b6       	in	r0, 0x36	; 54
     5aa:	07 fc       	sbrc	r0, 7
     5ac:	06 c0       	rjmp	.+12     	; 0x5ba <i2c_read+0x38>
     5ae:	30 97       	sbiw	r30, 0x00	; 0
     5b0:	d1 f0       	breq	.+52     	; 0x5e6 <i2c_read+0x64>
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	06 b6       	in	r0, 0x36	; 54
     5b6:	07 fe       	sbrs	r0, 7
     5b8:	fa cf       	rjmp	.-12     	; 0x5ae <i2c_read+0x2c>

	TWDR = reg;		              // write the register to read from.
     5ba:	63 b9       	out	0x03, r22	; 3
	TWCR = 0x84;                       // transmit
     5bc:	94 e8       	ldi	r25, 0x84	; 132
     5be:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     5c0:	06 b6       	in	r0, 0x36	; 54
     5c2:	07 fc       	sbrc	r0, 7
     5c4:	18 c0       	rjmp	.+48     	; 0x5f6 <i2c_read+0x74>
     5c6:	30 97       	sbiw	r30, 0x00	; 0
     5c8:	19 f4       	brne	.+6      	; 0x5d0 <i2c_read+0x4e>
     5ca:	13 c0       	rjmp	.+38     	; 0x5f2 <i2c_read+0x70>
     5cc:	30 97       	sbiw	r30, 0x00	; 0
     5ce:	99 f0       	breq	.+38     	; 0x5f6 <i2c_read+0x74>
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	06 b6       	in	r0, 0x36	; 54
     5d4:	07 fe       	sbrs	r0, 7
     5d6:	fa cf       	rjmp	.-12     	; 0x5cc <i2c_read+0x4a>
     5d8:	0e c0       	rjmp	.+28     	; 0x5f6 <i2c_read+0x74>
uint8_t i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint8_t numbytes)
{
	uint16_t timeout = 10000;
	TWCR = 0xA4;                                   // send a start bit on i2c bus
	while(!(TWCR & 0x80) && timeout)timeout--;    // wait for confirmation of transmit
	TWDR = address<<1;                                // load address of i2c device
     5da:	98 2f       	mov	r25, r24
     5dc:	99 0f       	add	r25, r25
     5de:	93 b9       	out	0x03, r25	; 3
	TWCR = 0x84;                                                // transmit
     5e0:	94 e8       	ldi	r25, 0x84	; 132
     5e2:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;      // wait for confirmation of transmit
     5e4:	96 b7       	in	r25, 0x36	; 54

	TWDR = reg;		              // write the register to read from.
     5e6:	63 b9       	out	0x03, r22	; 3
	TWCR = 0x84;                       // transmit
     5e8:	94 e8       	ldi	r25, 0x84	; 132
     5ea:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     5ec:	06 b6       	in	r0, 0x36	; 54
     5ee:	07 fe       	sbrs	r0, 7
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <i2c_read+0x70>
returns: 0 if timeout, 1 if successful.
*************************************************************************/

uint8_t i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint8_t numbytes)
{
	uint16_t timeout = 10000;
     5f2:	e0 e0       	ldi	r30, 0x00	; 0
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
	while(!(TWCR & 0x80) && timeout)timeout--;      // wait for confirmation of transmit

	TWDR = reg;		              // write the register to read from.
	TWCR = 0x84;                       // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
	asm("WDR");
     5f6:	a8 95       	wdr

	TWCR = 0xA4;                                                // send a repeated start bit on i2c bus
     5f8:	94 ea       	ldi	r25, 0xA4	; 164
     5fa:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     5fc:	06 b6       	in	r0, 0x36	; 54
     5fe:	07 fe       	sbrs	r0, 7
     600:	05 c0       	rjmp	.+10     	; 0x60c <i2c_read+0x8a>
     602:	47 c0       	rjmp	.+142    	; 0x692 <i2c_read+0x110>
     604:	31 97       	sbiw	r30, 0x01	; 1
     606:	06 b6       	in	r0, 0x36	; 54
     608:	07 fc       	sbrc	r0, 7
     60a:	43 c0       	rjmp	.+134    	; 0x692 <i2c_read+0x110>
     60c:	30 97       	sbiw	r30, 0x00	; 0
     60e:	d1 f7       	brne	.-12     	; 0x604 <i2c_read+0x82>
	TWDR = address<<1|1;                                           // load address of i2c device [ READ MODE ]
     610:	88 0f       	add	r24, r24
     612:	81 60       	ori	r24, 0x01	; 1
     614:	83 b9       	out	0x03, r24	; 3
	TWCR = 0xC4;                                                // transmit
     616:	84 ec       	ldi	r24, 0xC4	; 196
     618:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     61a:	06 b6       	in	r0, 0x36	; 54
     61c:	07 fe       	sbrs	r0, 7
     61e:	00 c0       	rjmp	.+0      	; 0x620 <i2c_read+0x9e>
	TWCR = 0x84;                                                // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;      // wait for confirmation of transmit

	TWDR = reg;		              // write the register to read from.
	TWCR = 0x84;                       // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     620:	e0 e0       	ldi	r30, 0x00	; 0
     622:	f0 e0       	ldi	r31, 0x00	; 0
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
	TWDR = address<<1|1;                                           // load address of i2c device [ READ MODE ]
	TWCR = 0xC4;                                                // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit

	while(numbytes > 1){
     624:	22 30       	cpi	r18, 0x02	; 2
     626:	c8 f0       	brcs	.+50     	; 0x65a <i2c_read+0xd8>
     628:	da 01       	movw	r26, r20
     62a:	22 50       	subi	r18, 0x02	; 2
     62c:	82 2f       	mov	r24, r18
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	48 0f       	add	r20, r24
     634:	59 1f       	adc	r21, r25
		TWCR = 0xC4;                                 // transmit, ACK (byte request)
     636:	94 ec       	ldi	r25, 0xC4	; 196
     638:	96 bf       	out	0x36, r25	; 54
		while(!(TWCR & 0x80) && timeout)timeout--;    // wait for confirmation of transmit
     63a:	06 b6       	in	r0, 0x36	; 54
     63c:	07 fe       	sbrs	r0, 7
     63e:	05 c0       	rjmp	.+10     	; 0x64a <i2c_read+0xc8>
     640:	06 c0       	rjmp	.+12     	; 0x64e <i2c_read+0xcc>
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	06 b6       	in	r0, 0x36	; 54
     646:	07 fc       	sbrc	r0, 7
     648:	02 c0       	rjmp	.+4      	; 0x64e <i2c_read+0xcc>
     64a:	30 97       	sbiw	r30, 0x00	; 0
     64c:	d1 f7       	brne	.-12     	; 0x642 <i2c_read+0xc0>
		
		*(data++) = TWDR;		            // and grab the target data
     64e:	83 b1       	in	r24, 0x03	; 3
     650:	8d 93       	st	X+, r24
		asm("WDR");
     652:	a8 95       	wdr
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
	TWDR = address<<1|1;                                           // load address of i2c device [ READ MODE ]
	TWCR = 0xC4;                                                // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit

	while(numbytes > 1){
     654:	a4 17       	cp	r26, r20
     656:	b5 07       	cpc	r27, r21
     658:	79 f7       	brne	.-34     	; 0x638 <i2c_read+0xb6>
		
		*(data++) = TWDR;		            // and grab the target data
		asm("WDR");
		numbytes --;
	}
	TWCR = 0x84;                    	         // transmit, NACK (last byte request)
     65a:	84 e8       	ldi	r24, 0x84	; 132
     65c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;       // wait for confirmation of transmit
     65e:	06 b6       	in	r0, 0x36	; 54
     660:	07 fe       	sbrs	r0, 7
     662:	05 c0       	rjmp	.+10     	; 0x66e <i2c_read+0xec>
     664:	0d c0       	rjmp	.+26     	; 0x680 <i2c_read+0xfe>
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	06 b6       	in	r0, 0x36	; 54
     66a:	07 fc       	sbrc	r0, 7
     66c:	09 c0       	rjmp	.+18     	; 0x680 <i2c_read+0xfe>
     66e:	30 97       	sbiw	r30, 0x00	; 0
     670:	d1 f7       	brne	.-12     	; 0x666 <i2c_read+0xe4>
	*(data++) = TWDR;         		          // and grab the target data
     672:	83 b1       	in	r24, 0x03	; 3
     674:	fa 01       	movw	r30, r20
     676:	80 83       	st	Z, r24
	TWCR = 0x94;                          	         // stop bit
     678:	84 e9       	ldi	r24, 0x94	; 148
     67a:	86 bf       	out	0x36, r24	; 54

	if(timeout)return 0;		        // send timeout status
	else return 1;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	08 95       	ret
		asm("WDR");
		numbytes --;
	}
	TWCR = 0x84;                    	         // transmit, NACK (last byte request)
	while(!(TWCR & 0x80) && timeout)timeout--;       // wait for confirmation of transmit
	*(data++) = TWDR;         		          // and grab the target data
     680:	83 b1       	in	r24, 0x03	; 3
     682:	da 01       	movw	r26, r20
     684:	8c 93       	st	X, r24
	TWCR = 0x94;                          	         // stop bit
     686:	84 e9       	ldi	r24, 0x94	; 148
     688:	86 bf       	out	0x36, r24	; 54

	if(timeout)return 0;		        // send timeout status
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	ef 2b       	or	r30, r31
     68e:	a1 f4       	brne	.+40     	; 0x6b8 <i2c_read+0x136>
	else return 1;
}
     690:	08 95       	ret
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
	asm("WDR");

	TWCR = 0xA4;                                                // send a repeated start bit on i2c bus
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
	TWDR = address<<1|1;                                           // load address of i2c device [ READ MODE ]
     692:	88 0f       	add	r24, r24
     694:	81 60       	ori	r24, 0x01	; 1
     696:	83 b9       	out	0x03, r24	; 3
	TWCR = 0xC4;                                                // transmit
     698:	84 ec       	ldi	r24, 0xC4	; 196
     69a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     69c:	06 b6       	in	r0, 0x36	; 54
     69e:	07 fc       	sbrc	r0, 7
     6a0:	c1 cf       	rjmp	.-126    	; 0x624 <i2c_read+0xa2>
     6a2:	30 97       	sbiw	r30, 0x00	; 0
     6a4:	21 f4       	brne	.+8      	; 0x6ae <i2c_read+0x12c>
     6a6:	bc cf       	rjmp	.-136    	; 0x620 <i2c_read+0x9e>
     6a8:	30 97       	sbiw	r30, 0x00	; 0
     6aa:	09 f4       	brne	.+2      	; 0x6ae <i2c_read+0x12c>
     6ac:	bb cf       	rjmp	.-138    	; 0x624 <i2c_read+0xa2>
     6ae:	31 97       	sbiw	r30, 0x01	; 1
     6b0:	06 b6       	in	r0, 0x36	; 54
     6b2:	07 fe       	sbrs	r0, 7
     6b4:	f9 cf       	rjmp	.-14     	; 0x6a8 <i2c_read+0x126>
     6b6:	b6 cf       	rjmp	.-148    	; 0x624 <i2c_read+0xa2>
	TWCR = 0x84;                    	         // transmit, NACK (last byte request)
	while(!(TWCR & 0x80) && timeout)timeout--;       // wait for confirmation of transmit
	*(data++) = TWDR;         		          // and grab the target data
	TWCR = 0x94;                          	         // stop bit

	if(timeout)return 0;		        // send timeout status
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	08 95       	ret
uint8_t i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint8_t numbytes)
{
	uint16_t timeout = 10000;
	TWCR = 0xA4;                                   // send a start bit on i2c bus
	while(!(TWCR & 0x80) && timeout)timeout--;    // wait for confirmation of transmit
	TWDR = address<<1;                                // load address of i2c device
     6bc:	98 2f       	mov	r25, r24
     6be:	99 0f       	add	r25, r25
     6c0:	93 b9       	out	0x03, r25	; 3
	TWCR = 0x84;                                                // transmit
     6c2:	94 e8       	ldi	r25, 0x84	; 132
     6c4:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & 0x80) && timeout)timeout--;      // wait for confirmation of transmit
     6c6:	06 b6       	in	r0, 0x36	; 54
     6c8:	07 fc       	sbrc	r0, 7
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <i2c_read+0x150>
returns: 0 if timeout, 1 if successful.
*************************************************************************/

uint8_t i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint8_t numbytes)
{
	uint16_t timeout = 10000;
     6cc:	e0 e1       	ldi	r30, 0x10	; 16
     6ce:	f7 e2       	ldi	r31, 0x27	; 39
     6d0:	70 cf       	rjmp	.-288    	; 0x5b2 <i2c_read+0x30>
	while(!(TWCR & 0x80) && timeout)timeout--;    // wait for confirmation of transmit
	TWDR = address<<1;                                // load address of i2c device
	TWCR = 0x84;                                                // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;      // wait for confirmation of transmit

	TWDR = reg;		              // write the register to read from.
     6d2:	63 b9       	out	0x03, r22	; 3
	TWCR = 0x84;                       // transmit
     6d4:	96 bf       	out	0x36, r25	; 54
returns: 0 if timeout, 1 if successful.
*************************************************************************/

uint8_t i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint8_t numbytes)
{
	uint16_t timeout = 10000;
     6d6:	e0 e1       	ldi	r30, 0x10	; 16
     6d8:	f7 e2       	ldi	r31, 0x27	; 39
	TWCR = 0x84;                                                // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;      // wait for confirmation of transmit

	TWDR = reg;		              // write the register to read from.
	TWCR = 0x84;                       // transmit
	while(!(TWCR & 0x80) && timeout)timeout--;                  // wait for confirmation of transmit
     6da:	06 b6       	in	r0, 0x36	; 54
     6dc:	07 fe       	sbrs	r0, 7
     6de:	78 cf       	rjmp	.-272    	; 0x5d0 <i2c_read+0x4e>
     6e0:	8a cf       	rjmp	.-236    	; 0x5f6 <i2c_read+0x74>

000006e2 <I2CStart>:



unsigned char I2CStart() {
	/* Send START condition */
	TWCR =  (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     6e2:	84 ea       	ldi	r24, 0xA4	; 164
     6e4:	86 bf       	out	0x36, r24	; 54
	
	/* Wait for TWINT flag to set */
	while (!(TWCR & (1 << TWINT)));
     6e6:	06 b6       	in	r0, 0x36	; 54
     6e8:	07 fe       	sbrs	r0, 7
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <I2CStart+0x4>
	
	/* Check error */
	if (TW_STATUS != TW_START && TW_STATUS != TW_REP_START)
     6ec:	81 b1       	in	r24, 0x01	; 1
     6ee:	88 7f       	andi	r24, 0xF8	; 248
     6f0:	88 30       	cpi	r24, 0x08	; 8
     6f2:	39 f0       	breq	.+14     	; 0x702 <I2CStart+0x20>
     6f4:	81 b1       	in	r24, 0x01	; 1
     6f6:	88 7f       	andi	r24, 0xF8	; 248
     6f8:	80 31       	cpi	r24, 0x10	; 16
     6fa:	19 f0       	breq	.+6      	; 0x702 <I2CStart+0x20>
	{
		return TW_STATUS;
     6fc:	81 b1       	in	r24, 0x01	; 1
     6fe:	88 7f       	andi	r24, 0xF8	; 248
     700:	08 95       	ret
	}
	

	return SUCCESS;
     702:	80 e0       	ldi	r24, 0x00	; 0
}
     704:	08 95       	ret

00000706 <I2CStop>:

void I2CStop() {
	TWCR = 0x94;             // stop bit
     706:	84 e9       	ldi	r24, 0x94	; 148
     708:	86 bf       	out	0x36, r24	; 54
     70a:	08 95       	ret

0000070c <I2CWait>:
}



void I2CWait() {
    delay_countdown=1000;
     70c:	88 ee       	ldi	r24, 0xE8	; 232
     70e:	93 e0       	ldi	r25, 0x03	; 3
     710:	a0 e0       	ldi	r26, 0x00	; 0
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
     718:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__data_end+0x1>
     71c:	a0 93 92 00 	sts	0x0092, r26	; 0x800092 <__data_end+0x2>
     720:	b0 93 93 00 	sts	0x0093, r27	; 0x800093 <__data_end+0x3>
    /* Wait for TWINT flag to set */
	while (!(TWCR & (1 << TWINT)) && delay_countdown--)delay_us(1);	
     724:	06 b6       	in	r0, 0x36	; 54
     726:	07 fc       	sbrc	r0, 7
     728:	2e c0       	rjmp	.+92     	; 0x786 <I2CWait+0x7a>
     72a:	87 ee       	ldi	r24, 0xE7	; 231
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	a0 e0       	ldi	r26, 0x00	; 0
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
     736:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__data_end+0x1>
     73a:	a0 93 92 00 	sts	0x0092, r26	; 0x800092 <__data_end+0x2>
     73e:	b0 93 93 00 	sts	0x0093, r27	; 0x800093 <__data_end+0x3>
     742:	1a c0       	rjmp	.+52     	; 0x778 <I2CWait+0x6c>
     744:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     748:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     74c:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <__data_end+0x2>
     750:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <__data_end+0x3>
     754:	ac 01       	movw	r20, r24
     756:	bd 01       	movw	r22, r26
     758:	41 50       	subi	r20, 0x01	; 1
     75a:	51 09       	sbc	r21, r1
     75c:	61 09       	sbc	r22, r1
     75e:	71 09       	sbc	r23, r1
     760:	40 93 90 00 	sts	0x0090, r20	; 0x800090 <__data_end>
     764:	50 93 91 00 	sts	0x0091, r21	; 0x800091 <__data_end+0x1>
     768:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <__data_end+0x2>
     76c:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <__data_end+0x3>
     770:	89 2b       	or	r24, r25
     772:	8a 2b       	or	r24, r26
     774:	8b 2b       	or	r24, r27
     776:	39 f0       	breq	.+14     	; 0x786 <I2CWait+0x7a>
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
     780:	06 b6       	in	r0, 0x36	; 54
     782:	07 fe       	sbrs	r0, 7
     784:	df cf       	rjmp	.-66     	; 0x744 <I2CWait+0x38>
     786:	08 95       	ret

00000788 <I2CSend>:
    /* wait for any pending transfer */
}

unsigned char I2CSend(unsigned char dat) {
    delay_countdown=1000;
     788:	48 ee       	ldi	r20, 0xE8	; 232
     78a:	53 e0       	ldi	r21, 0x03	; 3
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	40 93 90 00 	sts	0x0090, r20	; 0x800090 <__data_end>
     794:	50 93 91 00 	sts	0x0091, r21	; 0x800091 <__data_end+0x1>
     798:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <__data_end+0x2>
     79c:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <__data_end+0x3>

	/* Transmit 1 byte*/

	TWDR = dat;
     7a0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);
     7a2:	84 e8       	ldi	r24, 0x84	; 132
     7a4:	86 bf       	out	0x36, r24	; 54
	
	/* Wait for TWINT flag to set */
	while (!(TWCR & (1 << TWINT)));
     7a6:	06 b6       	in	r0, 0x36	; 54
     7a8:	07 fe       	sbrs	r0, 7
     7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <I2CSend+0x1e>
	if (TW_STATUS != TW_MT_DATA_ACK)
     7ac:	81 b1       	in	r24, 0x01	; 1
     7ae:	88 7f       	andi	r24, 0xF8	; 248
     7b0:	88 32       	cpi	r24, 0x28	; 40
     7b2:	19 f0       	breq	.+6      	; 0x7ba <I2CSend+0x32>
	{

		return TW_STATUS;
     7b4:	81 b1       	in	r24, 0x01	; 1
     7b6:	88 7f       	andi	r24, 0xF8	; 248
     7b8:	08 95       	ret
	}
	

	return SUCCESS;
     7ba:	80 e0       	ldi	r24, 0x00	; 0

    I2CWait(); /* wait for any pending transfer */
}
     7bc:	08 95       	ret

000007be <i2c_lcd_write_cmd.part.0>:
    
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
     7be:	cf 93       	push	r28
     7c0:	c8 2f       	mov	r28, r24
    if(address == LCD_ADDRESS_DISABLED)return;

        I2CStart();
     7c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <I2CStart>
        I2CSend(address<<1); //default address for PCA8547AT IO expander
     7c6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     7ca:	88 0f       	add	r24, r24
     7cc:	0e 94 c4 03 	call	0x788	; 0x788 <I2CSend>
        I2CSend(cmd&0xFF);     //
     7d0:	8c 2f       	mov	r24, r28
     7d2:	0e 94 c4 03 	call	0x788	; 0x788 <I2CSend>
        I2CStop();               
     7d6:	0e 94 83 03 	call	0x706	; 0x706 <I2CStop>
    delay_us(1000);
     7da:	88 ee       	ldi	r24, 0xE8	; 232
     7dc:	93 e0       	ldi	r25, 0x03	; 3
}
     7de:	cf 91       	pop	r28

        I2CStart();
        I2CSend(address<<1); //default address for PCA8547AT IO expander
        I2CSend(cmd&0xFF);     //
        I2CStop();               
    delay_us(1000);
     7e0:	0c 94 49 00 	jmp	0x92	; 0x92 <delay_us>

000007e4 <i2c_lcd_write_cmd>:
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     7e4:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <address>
     7e8:	91 11       	cpse	r25, r1
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <i2c_lcd_write_cmd+0xa>
     7ec:	08 95       	ret
     7ee:	0c 94 df 03 	jmp	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>

000007f2 <i2c_lcd_write_cmd_arg>:
        I2CSend(cmd&0xFF);     //
        I2CStop();               
    delay_us(1000);
}

void i2c_lcd_write_cmd_arg(unsigned char cmd, unsigned char arg){ 
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
    if(address == LCD_ADDRESS_DISABLED)return;
     7f6:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <address>
     7fa:	91 11       	cpse	r25, r1
     7fc:	03 c0       	rjmp	.+6      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
    I2CSend(address<<1); //default address for PCA8547AT IO expander
    I2CSend(cmd&0xFF);     //
    I2CSend(arg&0xFF);     //
    I2CStop();               
    delay_us(1000);
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret
     804:	c6 2f       	mov	r28, r22
     806:	d8 2f       	mov	r29, r24
}

void i2c_lcd_write_cmd_arg(unsigned char cmd, unsigned char arg){ 
    if(address == LCD_ADDRESS_DISABLED)return;

    I2CStart();
     808:	0e 94 71 03 	call	0x6e2	; 0x6e2 <I2CStart>
    I2CSend(address<<1); //default address for PCA8547AT IO expander
     80c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     810:	88 0f       	add	r24, r24
     812:	0e 94 c4 03 	call	0x788	; 0x788 <I2CSend>
    I2CSend(cmd&0xFF);     //
     816:	8d 2f       	mov	r24, r29
     818:	0e 94 c4 03 	call	0x788	; 0x788 <I2CSend>
    I2CSend(arg&0xFF);     //
     81c:	8c 2f       	mov	r24, r28
     81e:	0e 94 c4 03 	call	0x788	; 0x788 <I2CSend>
    I2CStop();               
     822:	0e 94 83 03 	call	0x706	; 0x706 <I2CStop>
    delay_us(1000);
     826:	88 ee       	ldi	r24, 0xE8	; 232
     828:	93 e0       	ldi	r25, 0x03	; 3
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
    I2CStart();
    I2CSend(address<<1); //default address for PCA8547AT IO expander
    I2CSend(cmd&0xFF);     //
    I2CSend(arg&0xFF);     //
    I2CStop();               
    delay_us(1000);
     82e:	0c 94 49 00 	jmp	0x92	; 0x92 <delay_us>

00000832 <i2c_lcd_strobe>:
}

void i2c_lcd_strobe(unsigned char data){
     832:	cf 93       	push	r28
     834:	c8 2f       	mov	r28, r24
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     836:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     83a:	81 11       	cpse	r24, r1
     83c:	12 c0       	rjmp	.+36     	; 0x862 <__stack+0x3>
    delay_us(1000);
}

void i2c_lcd_strobe(unsigned char data){
    i2c_lcd_write_cmd( (data&0xFF) | En | LCD_BACKLIGHT);
    delay_us(100);
     83e:	84 ef       	ldi	r24, 0xF4	; 244
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     846:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     84a:	88 23       	and	r24, r24
     84c:	29 f0       	breq	.+10     	; 0x858 <i2c_lcd_strobe+0x26>
     84e:	8c 2f       	mov	r24, r28
     850:	83 7f       	andi	r24, 0xF3	; 243
     852:	88 60       	ori	r24, 0x08	; 8
     854:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>

void i2c_lcd_strobe(unsigned char data){
    i2c_lcd_write_cmd( (data&0xFF) | En | LCD_BACKLIGHT);
    delay_us(100);
    i2c_lcd_write_cmd((( (data&0xFF) & ~En) | LCD_BACKLIGHT));
    delay_us(500);
     858:	80 ed       	ldi	r24, 0xD0	; 208
     85a:	97 e0       	ldi	r25, 0x07	; 7
}
     85c:	cf 91       	pop	r28

void i2c_lcd_strobe(unsigned char data){
    i2c_lcd_write_cmd( (data&0xFF) | En | LCD_BACKLIGHT);
    delay_us(100);
    i2c_lcd_write_cmd((( (data&0xFF) & ~En) | LCD_BACKLIGHT));
    delay_us(500);
     85e:	0c 94 49 00 	jmp	0x92	; 0x92 <delay_us>
     862:	8c 2f       	mov	r24, r28
     864:	8c 60       	ori	r24, 0x0C	; 12
     866:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
     86a:	e9 cf       	rjmp	.-46     	; 0x83e <i2c_lcd_strobe+0xc>

0000086c <i2c_lcd_write_four_bits>:
}

void i2c_lcd_write_four_bits(unsigned char data){   //USED ONLY BY I2C LCD for now.     
     86c:	cf 93       	push	r28
     86e:	c8 2f       	mov	r28, r24
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     870:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     874:	88 23       	and	r24, r24
     876:	21 f0       	breq	.+8      	; 0x880 <i2c_lcd_write_four_bits+0x14>
     878:	8c 2f       	mov	r24, r28
     87a:	88 60       	ori	r24, 0x08	; 8
     87c:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
    delay_us(500);
}

void i2c_lcd_write_four_bits(unsigned char data){   //USED ONLY BY I2C LCD for now.     
	    i2c_lcd_write_cmd((data&0xFF) | LCD_BACKLIGHT); 
	    i2c_lcd_strobe(data);
     880:	8c 2f       	mov	r24, r28
}
     882:	cf 91       	pop	r28
    delay_us(500);
}

void i2c_lcd_write_four_bits(unsigned char data){   //USED ONLY BY I2C LCD for now.     
	    i2c_lcd_write_cmd((data&0xFF) | LCD_BACKLIGHT); 
	    i2c_lcd_strobe(data);
     884:	0c 94 19 04 	jmp	0x832	; 0x832 <i2c_lcd_strobe>

00000888 <i2c_lcd_write>:
}

// write a command to lcd
void i2c_lcd_write(unsigned char cmd){
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
    if(address == LCD_ADDRESS_DISABLED)return;
     88c:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <address>
     890:	99 23       	and	r25, r25
     892:	49 f1       	breq	.+82     	; 0x8e6 <i2c_lcd_write+0x5e>
     894:	c8 2f       	mov	r28, r24
    
    i2c_lcd_write_cmd( (cmd & 0xF0)           | LCD_BACKLIGHT);
     896:	d8 2f       	mov	r29, r24
     898:	d0 7f       	andi	r29, 0xF0	; 240
     89a:	8d 2f       	mov	r24, r29
     89c:	88 60       	ori	r24, 0x08	; 8
     89e:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     8a2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     8a6:	81 11       	cpse	r24, r1
     8a8:	2a c0       	rjmp	.+84     	; 0x8fe <i2c_lcd_write+0x76>
// write a command to lcd
void i2c_lcd_write(unsigned char cmd){
    if(address == LCD_ADDRESS_DISABLED)return;
    
    i2c_lcd_write_cmd( (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
     8aa:	88 ee       	ldi	r24, 0xE8	; 232
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     8b2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     8b6:	81 11       	cpse	r24, r1
     8b8:	2e c0       	rjmp	.+92     	; 0x916 <i2c_lcd_write+0x8e>
void i2c_lcd_write(unsigned char cmd){
    if(address == LCD_ADDRESS_DISABLED)return;
    
    i2c_lcd_write_cmd( (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     8ba:	88 ee       	ldi	r24, 0xE8	; 232
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     8c2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     8c6:	81 11       	cpse	r24, r1
     8c8:	31 c0       	rjmp	.+98     	; 0x92c <i2c_lcd_write+0xa4>
    i2c_lcd_write_cmd( (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
     8ca:	88 ee       	ldi	r24, 0xE8	; 232
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     8d2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     8d6:	81 11       	cpse	r24, r1
     8d8:	09 c0       	rjmp	.+18     	; 0x8ec <i2c_lcd_write+0x64>
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     8da:	88 ee       	ldi	r24, 0xE8	; 232
     8dc:	93 e0       	ldi	r25, 0x03	; 3
    
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     8e2:	0c 94 49 00 	jmp	0x92	; 0x92 <delay_us>
    
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret
     8ec:	88 e0       	ldi	r24, 0x08	; 8
     8ee:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     8f2:	88 ee       	ldi	r24, 0xE8	; 232
     8f4:	93 e0       	ldi	r25, 0x03	; 3
    
}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     8fa:	0c 94 49 00 	jmp	0x92	; 0x92 <delay_us>
     8fe:	8d 2f       	mov	r24, r29
     900:	8c 60       	ori	r24, 0x0C	; 12
     902:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
// write a command to lcd
void i2c_lcd_write(unsigned char cmd){
    if(address == LCD_ADDRESS_DISABLED)return;
    
    i2c_lcd_write_cmd( (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
     906:	88 ee       	ldi	r24, 0xE8	; 232
     908:	93 e0       	ldi	r25, 0x03	; 3
     90a:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     90e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     912:	88 23       	and	r24, r24
     914:	91 f2       	breq	.-92     	; 0x8ba <i2c_lcd_write+0x32>
     916:	88 e0       	ldi	r24, 0x08	; 8
     918:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
void i2c_lcd_write(unsigned char cmd){
    if(address == LCD_ADDRESS_DISABLED)return;
    
    i2c_lcd_write_cmd( (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     91c:	88 ee       	ldi	r24, 0xE8	; 232
     91e:	93 e0       	ldi	r25, 0x03	; 3
     920:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     924:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     928:	88 23       	and	r24, r24
     92a:	79 f2       	breq	.-98     	; 0x8ca <i2c_lcd_write+0x42>
    
    i2c_lcd_write_cmd( (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
     92c:	80 e1       	ldi	r24, 0x10	; 16
     92e:	c8 9f       	mul	r28, r24
     930:	e0 01       	movw	r28, r0
     932:	11 24       	eor	r1, r1
     934:	8c 2f       	mov	r24, r28
     936:	88 60       	ori	r24, 0x08	; 8
     938:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
     93c:	8c 2f       	mov	r24, r28
     93e:	8c 60       	ori	r24, 0x0C	; 12
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     940:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <address>
     944:	99 23       	and	r25, r25
     946:	09 f2       	breq	.-126    	; 0x8ca <i2c_lcd_write+0x42>
     948:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
    i2c_lcd_write_cmd( (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
     94c:	88 ee       	ldi	r24, 0xE8	; 232
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     954:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     958:	88 23       	and	r24, r24
     95a:	09 f4       	brne	.+2      	; 0x95e <i2c_lcd_write+0xd6>
     95c:	be cf       	rjmp	.-132    	; 0x8da <i2c_lcd_write+0x52>
     95e:	c6 cf       	rjmp	.-116    	; 0x8ec <i2c_lcd_write+0x64>

00000960 <i2c_lcd_init>:

static unsigned char address=LCD_ADDRESS_DISABLED;


unsigned int i2c_lcd_init(void){
    DDRC  |= (1 << TW_SDA_PIN) | (1 << TW_SCL_PIN);
     960:	84 b3       	in	r24, 0x14	; 20
     962:	83 60       	ori	r24, 0x03	; 3
     964:	84 bb       	out	0x14, r24	; 20
    if (pullup_en)
    {

	    PORTC |= (1 << TW_SDA_PIN) | (1 << TW_SCL_PIN);
     966:	85 b3       	in	r24, 0x15	; 21
     968:	83 60       	ori	r24, 0x03	; 3
     96a:	85 bb       	out	0x15, r24	; 21
    }
    else
    {
	    PORTC &= ~((1 << TW_SDA_PIN) | (1 << TW_SCL_PIN));
    }
    DDRC  &= ~((1 << TW_SDA_PIN) | (1 << TW_SCL_PIN));
     96c:	84 b3       	in	r24, 0x14	; 20
     96e:	8c 7f       	andi	r24, 0xFC	; 252
     970:	84 bb       	out	0x14, r24	; 20

    /* Set bit rate register 12 and prescaler to 1 resulting in
    SCL_freq = 8MHz/(16 + 2*12*1) = 200KHz	*/
    TWBR = 12;
     972:	8c e0       	ldi	r24, 0x0C	; 12
     974:	80 b9       	out	0x00, r24	; 0


    delay_us(200);
     976:	88 ee       	ldi	r24, 0xE8	; 232
     978:	93 e0       	ldi	r25, 0x03	; 3
     97a:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>

    //Search LCD

    I2CStart();
     97e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <I2CStart>
    I2CSend(LCD_ADDRESS_A<<1);
     982:	8e e7       	ldi	r24, 0x7E	; 126
     984:	0e 94 c4 03 	call	0x788	; 0x788 <I2CSend>
    if((TWSR&0xFC) == 0x18) //LCD Found
     988:	81 b1       	in	r24, 0x01	; 1
     98a:	8c 7f       	andi	r24, 0xFC	; 252
     98c:	88 31       	cpi	r24, 0x18	; 24
     98e:	a1 f1       	breq	.+104    	; 0x9f8 <i2c_lcd_init+0x98>
        address = LCD_ADDRESS_A;
    I2CStop();
     990:	0e 94 83 03 	call	0x706	; 0x706 <I2CStop>

    I2CStart();
     994:	0e 94 71 03 	call	0x6e2	; 0x6e2 <I2CStart>
    I2CSend(LCD_ADDRESS_B<<1);
     998:	8e e4       	ldi	r24, 0x4E	; 78
     99a:	0e 94 c4 03 	call	0x788	; 0x788 <I2CSend>
    if((TWSR&0xFC) == 0x18) //LCD Found
     99e:	81 b1       	in	r24, 0x01	; 1
     9a0:	8c 7f       	andi	r24, 0xFC	; 252
     9a2:	88 31       	cpi	r24, 0x18	; 24
     9a4:	19 f4       	brne	.+6      	; 0x9ac <i2c_lcd_init+0x4c>
        address = LCD_ADDRESS_B;
     9a6:	87 e2       	ldi	r24, 0x27	; 39
     9a8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <address>
    I2CStop();
     9ac:	0e 94 83 03 	call	0x706	; 0x706 <I2CStop>

    delay_us(100);
     9b0:	84 e6       	ldi	r24, 0x64	; 100
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>


    i2c_lcd_write(0x03);
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
    i2c_lcd_write(0x03);
     9be:	83 e0       	ldi	r24, 0x03	; 3
     9c0:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
    i2c_lcd_write(0x03);
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
    i2c_lcd_write(0x02); 
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>

    i2c_lcd_write(LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS | LCD_4BITMODE);
     9d0:	88 e2       	ldi	r24, 0x28	; 40
     9d2:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
    i2c_lcd_write(LCD_DISPLAYCONTROL | LCD_DISPLAYON);
     9d6:	8c e0       	ldi	r24, 0x0C	; 12
     9d8:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
    i2c_lcd_write(LCD_CLEARDISPLAY);
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
    i2c_lcd_write(LCD_ENTRYMODESET | LCD_ENTRYLEFT);    
     9e2:	86 e0       	ldi	r24, 0x06	; 6
     9e4:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
    delay_us(10000);
     9e8:	80 e2       	ldi	r24, 0x20	; 32
     9ea:	9e e4       	ldi	r25, 0x4E	; 78
     9ec:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
    
    return address;
     9f0:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
    
}
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	08 95       	ret
    //Search LCD

    I2CStart();
    I2CSend(LCD_ADDRESS_A<<1);
    if((TWSR&0xFC) == 0x18) //LCD Found
        address = LCD_ADDRESS_A;
     9f8:	8f e3       	ldi	r24, 0x3F	; 63
     9fa:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <address>
     9fe:	c8 cf       	rjmp	.-112    	; 0x990 <i2c_lcd_init+0x30>

00000a00 <i2c_lcd_write_char>:
    i2c_lcd_write_cmd(                          LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
    
}

// write a character to lcd
void i2c_lcd_write_char(unsigned char cmd){
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
    if(address == LCD_ADDRESS_DISABLED)return;
     a04:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <address>
     a08:	99 23       	and	r25, r25
     a0a:	49 f1       	breq	.+82     	; 0xa5e <i2c_lcd_write_char+0x5e>
     a0c:	c8 2f       	mov	r28, r24

    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)           | LCD_BACKLIGHT);
     a0e:	d8 2f       	mov	r29, r24
     a10:	d0 7f       	andi	r29, 0xF0	; 240
     a12:	8d 2f       	mov	r24, r29
     a14:	89 60       	ori	r24, 0x09	; 9
     a16:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     a1a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     a1e:	81 11       	cpse	r24, r1
     a20:	2a c0       	rjmp	.+84     	; 0xa76 <i2c_lcd_write_char+0x76>
// write a character to lcd
void i2c_lcd_write_char(unsigned char cmd){
    if(address == LCD_ADDRESS_DISABLED)return;

    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
     a22:	88 ee       	ldi	r24, 0xE8	; 232
     a24:	93 e0       	ldi	r25, 0x03	; 3
     a26:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     a2a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     a2e:	81 11       	cpse	r24, r1
     a30:	2e c0       	rjmp	.+92     	; 0xa8e <i2c_lcd_write_char+0x8e>
void i2c_lcd_write_char(unsigned char cmd){
    if(address == LCD_ADDRESS_DISABLED)return;

    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     a32:	88 ee       	ldi	r24, 0xE8	; 232
     a34:	93 e0       	ldi	r25, 0x03	; 3
     a36:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     a3a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     a3e:	81 11       	cpse	r24, r1
     a40:	31 c0       	rjmp	.+98     	; 0xaa4 <i2c_lcd_write_char+0xa4>
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
     a42:	88 ee       	ldi	r24, 0xE8	; 232
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     a4a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     a4e:	81 11       	cpse	r24, r1
     a50:	09 c0       	rjmp	.+18     	; 0xa64 <i2c_lcd_write_char+0x64>
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     a52:	88 ee       	ldi	r24, 0xE8	; 232
     a54:	93 e0       	ldi	r25, 0x03	; 3

}
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     a5a:	0c 94 49 00 	jmp	0x92	; 0x92 <delay_us>

}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret
     a64:	88 e0       	ldi	r24, 0x08	; 8
     a66:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     a6a:	88 ee       	ldi	r24, 0xE8	; 232
     a6c:	93 e0       	ldi	r25, 0x03	; 3

}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     a72:	0c 94 49 00 	jmp	0x92	; 0x92 <delay_us>
     a76:	8d 2f       	mov	r24, r29
     a78:	8d 60       	ori	r24, 0x0D	; 13
     a7a:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
// write a character to lcd
void i2c_lcd_write_char(unsigned char cmd){
    if(address == LCD_ADDRESS_DISABLED)return;

    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
     a7e:	88 ee       	ldi	r24, 0xE8	; 232
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     a86:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     a8a:	88 23       	and	r24, r24
     a8c:	91 f2       	breq	.-92     	; 0xa32 <i2c_lcd_write_char+0x32>
     a8e:	88 e0       	ldi	r24, 0x08	; 8
     a90:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
void i2c_lcd_write_char(unsigned char cmd){
    if(address == LCD_ADDRESS_DISABLED)return;

    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF
     a94:	88 ee       	ldi	r24, 0xE8	; 232
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     a9c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     aa0:	88 23       	and	r24, r24
     aa2:	79 f2       	breq	.-98     	; 0xa42 <i2c_lcd_write_char+0x42>

    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
     aa4:	80 e1       	ldi	r24, 0x10	; 16
     aa6:	c8 9f       	mul	r28, r24
     aa8:	e0 01       	movw	r28, r0
     aaa:	11 24       	eor	r1, r1
     aac:	8c 2f       	mov	r24, r28
     aae:	89 60       	ori	r24, 0x09	; 9
     ab0:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
     ab4:	8c 2f       	mov	r24, r28
     ab6:	8d 60       	ori	r24, 0x0D	; 13
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     ab8:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <address>
     abc:	99 23       	and	r25, r25
     abe:	09 f2       	breq	.-126    	; 0xa42 <i2c_lcd_write_char+0x42>
     ac0:	0e 94 df 03 	call	0x7be	; 0x7be <i2c_lcd_write_cmd.part.0>
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)           | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | (cmd & 0xF0)      | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
    i2c_lcd_write_cmd(                               LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN OFF

    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0)      | LCD_BACKLIGHT);
    i2c_lcd_write_cmd( Rs | ((cmd<<4) & 0xF0) | En | LCD_BACKLIGHT); delay_us(LCD_DELAY); // EN ON
     ac4:	88 ee       	ldi	r24, 0xE8	; 232
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
}



void i2c_lcd_write_cmd(unsigned char cmd){ 
    if(address == LCD_ADDRESS_DISABLED)return;
     acc:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     ad0:	88 23       	and	r24, r24
     ad2:	09 f4       	brne	.+2      	; 0xad6 <i2c_lcd_write_char+0xd6>
     ad4:	be cf       	rjmp	.-132    	; 0xa52 <i2c_lcd_write_char+0x52>
     ad6:	c6 cf       	rjmp	.-116    	; 0xa64 <i2c_lcd_write_char+0x64>

00000ad8 <i2c_lcd_put_string>:
}



// put string function
void i2c_lcd_put_string(char *s, unsigned char line){
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	8c 01       	movw	r16, r24
     aec:	b6 2e       	mov	r11, r22
    int xpos=0;
    if(line == 1)
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	68 17       	cp	r22, r24
     af2:	09 f4       	brne	.+2      	; 0xaf6 <i2c_lcd_put_string+0x1e>
     af4:	5d c0       	rjmp	.+186    	; 0xbb0 <i2c_lcd_put_string+0xd8>
	    i2c_lcd_write(0x80);
    else if(line == 2)
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	69 17       	cp	r22, r25
     afa:	09 f4       	brne	.+2      	; 0xafe <i2c_lcd_put_string+0x26>
     afc:	5d c0       	rjmp	.+186    	; 0xbb8 <i2c_lcd_put_string+0xe0>
	    i2c_lcd_write(0xC0);
    else if(line == 3)
     afe:	e3 e0       	ldi	r30, 0x03	; 3
     b00:	6e 17       	cp	r22, r30
     b02:	09 f4       	brne	.+2      	; 0xb06 <i2c_lcd_put_string+0x2e>
     b04:	5d c0       	rjmp	.+186    	; 0xbc0 <i2c_lcd_put_string+0xe8>
	    i2c_lcd_write(0x94);
    else if(line == 4)
     b06:	f4 e0       	ldi	r31, 0x04	; 4
     b08:	6f 17       	cp	r22, r31
     b0a:	09 f4       	brne	.+2      	; 0xb0e <i2c_lcd_put_string+0x36>
     b0c:	5d c0       	rjmp	.+186    	; 0xbc8 <i2c_lcd_put_string+0xf0>
     b0e:	78 01       	movw	r14, r16
	    }
	    if( *(s+i)=='\n' && line==1){
		    i2c_lcd_write(0xC0); //Move to the next line
		    xpos=0;                
	    }else
		    i2c_lcd_write_char(*(s+i));
     b10:	c0 e0       	ldi	r28, 0x00	; 0
     b12:	d0 e0       	ldi	r29, 0x00	; 0
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	0b c0       	rjmp	.+22     	; 0xb30 <i2c_lcd_put_string+0x58>
     b1a:	69 01       	movw	r12, r18
     b1c:	ff ef       	ldi	r31, 0xFF	; 255
     b1e:	cf 1a       	sub	r12, r31
     b20:	df 0a       	sbc	r13, r31
     b22:	0e 94 00 05 	call	0xa00	; 0xa00 <i2c_lcd_write_char>
     b26:	96 01       	movw	r18, r12
    else if(line == 3)
	    i2c_lcd_write(0x94);
    else if(line == 4)
	    i2c_lcd_write(0xD4);

    for (int i = 0; i < strlen(s) && i<32; i++){
     b28:	21 96       	adiw	r28, 0x01	; 1
     b2a:	ff ef       	ldi	r31, 0xFF	; 255
     b2c:	ef 1a       	sub	r14, r31
     b2e:	ff 0a       	sbc	r15, r31
     b30:	f8 01       	movw	r30, r16
     b32:	01 90       	ld	r0, Z+
     b34:	00 20       	and	r0, r0
     b36:	e9 f7       	brne	.-6      	; 0xb32 <i2c_lcd_put_string+0x5a>
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	e0 1b       	sub	r30, r16
     b3c:	f1 0b       	sbc	r31, r17
     b3e:	ce 17       	cp	r28, r30
     b40:	df 07       	cpc	r29, r31
     b42:	d8 f4       	brcc	.+54     	; 0xb7a <i2c_lcd_put_string+0xa2>
     b44:	c0 32       	cpi	r28, 0x20	; 32
     b46:	d1 05       	cpc	r29, r1
     b48:	c1 f0       	breq	.+48     	; 0xb7a <i2c_lcd_put_string+0xa2>
	    if(xpos==16 && line==1){
     b4a:	20 31       	cpi	r18, 0x10	; 16
     b4c:	31 05       	cpc	r19, r1
     b4e:	61 f0       	breq	.+24     	; 0xb68 <i2c_lcd_put_string+0x90>
		    i2c_lcd_write(0x14); //Move to the next line
		    xpos=0;
	    }
	    if( *(s+i)=='\n' && line==1){
     b50:	f7 01       	movw	r30, r14
     b52:	80 81       	ld	r24, Z
     b54:	8a 30       	cpi	r24, 0x0A	; 10
     b56:	09 f7       	brne	.-62     	; 0xb1a <i2c_lcd_put_string+0x42>
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	b9 16       	cp	r11, r25
     b5c:	c1 f0       	breq	.+48     	; 0xb8e <i2c_lcd_put_string+0xb6>
     b5e:	69 01       	movw	r12, r18
     b60:	ef ef       	ldi	r30, 0xFF	; 255
     b62:	ce 1a       	sub	r12, r30
     b64:	de 0a       	sbc	r13, r30
     b66:	dd cf       	rjmp	.-70     	; 0xb22 <i2c_lcd_put_string+0x4a>
	    i2c_lcd_write(0x94);
    else if(line == 4)
	    i2c_lcd_write(0xD4);

    for (int i = 0; i < strlen(s) && i<32; i++){
	    if(xpos==16 && line==1){
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	b8 16       	cp	r11, r24
     b6c:	b1 f0       	breq	.+44     	; 0xb9a <i2c_lcd_put_string+0xc2>
		    i2c_lcd_write(0x14); //Move to the next line
		    xpos=0;
	    }
	    if( *(s+i)=='\n' && line==1){
     b6e:	f7 01       	movw	r30, r14
     b70:	80 81       	ld	r24, Z
     b72:	91 e1       	ldi	r25, 0x11	; 17
     b74:	c9 2e       	mov	r12, r25
     b76:	d1 2c       	mov	r13, r1
     b78:	d4 cf       	rjmp	.-88     	; 0xb22 <i2c_lcd_put_string+0x4a>
	    }else
		    i2c_lcd_write_char(*(s+i));
	    xpos++;
    }

}
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	df 90       	pop	r13
     b88:	cf 90       	pop	r12
     b8a:	bf 90       	pop	r11
     b8c:	08 95       	ret
	    if(xpos==16 && line==1){
		    i2c_lcd_write(0x14); //Move to the next line
		    xpos=0;
	    }
	    if( *(s+i)=='\n' && line==1){
		    i2c_lcd_write(0xC0); //Move to the next line
     b8e:	80 ec       	ldi	r24, 0xC0	; 192
     b90:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
		    xpos=0;                
     b94:	21 e0       	ldi	r18, 0x01	; 1
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	c7 cf       	rjmp	.-114    	; 0xb28 <i2c_lcd_put_string+0x50>
    else if(line == 4)
	    i2c_lcd_write(0xD4);

    for (int i = 0; i < strlen(s) && i<32; i++){
	    if(xpos==16 && line==1){
		    i2c_lcd_write(0x14); //Move to the next line
     b9a:	84 e1       	ldi	r24, 0x14	; 20
     b9c:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
		    xpos=0;
	    }
	    if( *(s+i)=='\n' && line==1){
     ba0:	f7 01       	movw	r30, r14
     ba2:	80 81       	ld	r24, Z
     ba4:	8a 30       	cpi	r24, 0x0A	; 10
     ba6:	99 f3       	breq	.-26     	; 0xb8e <i2c_lcd_put_string+0xb6>
     ba8:	cc 24       	eor	r12, r12
     baa:	c3 94       	inc	r12
     bac:	d1 2c       	mov	r13, r1
     bae:	b9 cf       	rjmp	.-142    	; 0xb22 <i2c_lcd_put_string+0x4a>

// put string function
void i2c_lcd_put_string(char *s, unsigned char line){
    int xpos=0;
    if(line == 1)
	    i2c_lcd_write(0x80);
     bb0:	80 e8       	ldi	r24, 0x80	; 128
     bb2:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
     bb6:	ab cf       	rjmp	.-170    	; 0xb0e <i2c_lcd_put_string+0x36>
    else if(line == 2)
	    i2c_lcd_write(0xC0);
     bb8:	80 ec       	ldi	r24, 0xC0	; 192
     bba:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
     bbe:	a7 cf       	rjmp	.-178    	; 0xb0e <i2c_lcd_put_string+0x36>
    else if(line == 3)
	    i2c_lcd_write(0x94);
     bc0:	84 e9       	ldi	r24, 0x94	; 148
     bc2:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
     bc6:	a3 cf       	rjmp	.-186    	; 0xb0e <i2c_lcd_put_string+0x36>
    else if(line == 4)
	    i2c_lcd_write(0xD4);
     bc8:	84 ed       	ldi	r24, 0xD4	; 212
     bca:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
     bce:	9f cf       	rjmp	.-194    	; 0xb0e <i2c_lcd_put_string+0x36>

00000bd0 <i2c_lcd_put_shifted_string>:
    }

}


void i2c_lcd_put_shifted_string(char *s, unsigned char line, unsigned int xpos){
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
    if(address == LCD_ADDRESS_DISABLED)return;
     bdc:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <address>
     be0:	21 11       	cpse	r18, r1
     be2:	07 c0       	rjmp	.+14     	; 0xbf2 <i2c_lcd_put_shifted_string+0x22>
    	    
    for (int i = 0; i < strlen(s) && i<32; i++){
        i2c_lcd_write_char(*(s+i));
        xpos++;
    }
}
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	08 95       	ret
     bf2:	8c 01       	movw	r16, r24
void i2c_lcd_put_shifted_string(char *s, unsigned char line, unsigned int xpos){
    if(address == LCD_ADDRESS_DISABLED)return;

    unsigned char row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    
    i2c_lcd_write(0xC8);
     bf4:	88 ec       	ldi	r24, 0xC8	; 200
     bf6:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
     bfa:	78 01       	movw	r14, r16
    	    
    for (int i = 0; i < strlen(s) && i<32; i++){
     bfc:	c0 e0       	ldi	r28, 0x00	; 0
     bfe:	d0 e0       	ldi	r29, 0x00	; 0
     c00:	09 c0       	rjmp	.+18     	; 0xc14 <i2c_lcd_put_shifted_string+0x44>
     c02:	c0 32       	cpi	r28, 0x20	; 32
     c04:	d1 05       	cpc	r29, r1
     c06:	71 f3       	breq	.-36     	; 0xbe4 <i2c_lcd_put_shifted_string+0x14>
        i2c_lcd_write_char(*(s+i));
     c08:	f7 01       	movw	r30, r14
     c0a:	81 91       	ld	r24, Z+
     c0c:	7f 01       	movw	r14, r30
     c0e:	0e 94 00 05 	call	0xa00	; 0xa00 <i2c_lcd_write_char>

    unsigned char row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    
    i2c_lcd_write(0xC8);
    	    
    for (int i = 0; i < strlen(s) && i<32; i++){
     c12:	21 96       	adiw	r28, 0x01	; 1
     c14:	f8 01       	movw	r30, r16
     c16:	01 90       	ld	r0, Z+
     c18:	00 20       	and	r0, r0
     c1a:	e9 f7       	brne	.-6      	; 0xc16 <i2c_lcd_put_shifted_string+0x46>
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	e0 1b       	sub	r30, r16
     c20:	f1 0b       	sbc	r31, r17
     c22:	ce 17       	cp	r28, r30
     c24:	df 07       	cpc	r29, r31
     c26:	68 f3       	brcs	.-38     	; 0xc02 <i2c_lcd_put_shifted_string+0x32>
        i2c_lcd_write_char(*(s+i));
        xpos++;
    }
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	08 95       	ret

00000c36 <i2c_lcd_clear>:

//clear lcd and set to home
void i2c_lcd_clear(){
    if(address == LCD_ADDRESS_DISABLED)return;
     c36:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <address>
     c3a:	81 11       	cpse	r24, r1
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <i2c_lcd_clear+0xa>
     c3e:	08 95       	ret

    i2c_lcd_write(LCD_CLEARDISPLAY);
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 44 04 	call	0x888	; 0x888 <i2c_lcd_write>
    i2c_lcd_write(LCD_RETURNHOME);
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	0c 94 44 04 	jmp	0x888	; 0x888 <i2c_lcd_write>

00000c4c <main>:
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	e2 97       	sbiw	r28, 0x32	; 50
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	0e 94 14 02 	call	0x428	; 0x428 <i2c_init>
     c64:	0e 94 b0 04 	call	0x960	; 0x960 <i2c_lcd_init>
     c68:	1a ba       	out	0x1a, r1	; 26
     c6a:	87 e0       	ldi	r24, 0x07	; 7
     c6c:	8b bb       	out	0x1b, r24	; 27
     c6e:	8f e7       	ldi	r24, 0x7F	; 127
     c70:	87 bb       	out	0x17, r24	; 23
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	81 bb       	out	0x11, r24	; 17
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	80 e6       	ldi	r24, 0x60	; 96
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 6c 05 	call	0xad8	; 0xad8 <i2c_lcd_put_string>
     c80:	d8 9a       	sbi	0x1b, 0	; 27
     c82:	c9 99       	sbic	0x19, 1	; 25
     c84:	85 c0       	rjmp	.+266    	; 0xd90 <main+0x144>
     c86:	c9 99       	sbic	0x19, 1	; 25
     c88:	12 c0       	rjmp	.+36     	; 0xcae <main+0x62>
     c8a:	c9 99       	sbic	0x19, 1	; 25
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <main+0x62>
     c8e:	88 b3       	in	r24, 0x18	; 24
     c90:	8f 67       	ori	r24, 0x7F	; 127
     c92:	88 bb       	out	0x18, r24	; 24
     c94:	84 e6       	ldi	r24, 0x64	; 100
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 7f 00 	call	0xfe	; 0xfe <delay_ms>
     c9c:	88 b3       	in	r24, 0x18	; 24
     c9e:	80 78       	andi	r24, 0x80	; 128
     ca0:	88 bb       	out	0x18, r24	; 24
     ca2:	84 e6       	ldi	r24, 0x64	; 100
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 7f 00 	call	0xfe	; 0xfe <delay_ms>
     caa:	c9 9b       	sbis	0x19, 1	; 25
     cac:	f0 cf       	rjmp	.-32     	; 0xc8e <main+0x42>
     cae:	0e 94 ab 01 	call	0x356	; 0x356 <start_timer>
     cb2:	d8 98       	cbi	0x1b, 0	; 27
     cb4:	0e 94 1b 06 	call	0xc36	; 0xc36 <i2c_lcd_clear>
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	80 e7       	ldi	r24, 0x70	; 112
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 6c 05 	call	0xad8	; 0xad8 <i2c_lcd_put_string>
     cc2:	c8 99       	sbic	0x19, 0	; 25
     cc4:	68 c0       	rjmp	.+208    	; 0xd96 <main+0x14a>
     cc6:	c8 9b       	sbis	0x19, 0	; 25
     cc8:	6b c0       	rjmp	.+214    	; 0xda0 <main+0x154>
     cca:	0e 94 c0 01 	call	0x380	; 0x380 <read_timer>
     cce:	0e 94 8c 07 	call	0xf18	; 0xf18 <__floatunsisf>
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	4a e7       	ldi	r20, 0x7A	; 122
     cd8:	54 e4       	ldi	r21, 0x44	; 68
     cda:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divsf3>
     cde:	6b 01       	movw	r12, r22
     ce0:	7c 01       	movw	r14, r24
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	86 e7       	ldi	r24, 0x76	; 118
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 6c 05 	call	0xad8	; 0xad8 <i2c_lcd_put_string>
     cec:	c7 01       	movw	r24, r14
     cee:	b6 01       	movw	r22, r12
     cf0:	0e 94 56 07 	call	0xeac	; 0xeac <__fixsfsi>
     cf4:	2a e0       	ldi	r18, 0x0A	; 10
     cf6:	ae 01       	movw	r20, r28
     cf8:	4f 5f       	subi	r20, 0xFF	; 255
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	0e 94 87 08 	call	0x110e	; 0x110e <__ltoa_ncheck>
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	ce 01       	movw	r24, r28
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	0e 94 6c 05 	call	0xad8	; 0xad8 <i2c_lcd_put_string>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e4       	ldi	r19, 0x40	; 64
     d0e:	45 ef       	ldi	r20, 0xF5	; 245
     d10:	53 e4       	ldi	r21, 0x43	; 67
     d12:	c7 01       	movw	r24, r14
     d14:	b6 01       	movw	r22, r12
     d16:	0e 94 1a 08 	call	0x1034	; 0x1034 <__mulsf3>
     d1a:	a7 01       	movw	r20, r14
     d1c:	96 01       	movw	r18, r12
     d1e:	0e 94 1a 08 	call	0x1034	; 0x1034 <__mulsf3>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	4a e7       	ldi	r20, 0x7A	; 122
     d28:	54 e4       	ldi	r21, 0x44	; 68
     d2a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divsf3>
     d2e:	6b 01       	movw	r12, r22
     d30:	7c 01       	movw	r14, r24
     d32:	62 e0       	ldi	r22, 0x02	; 2
     d34:	81 e8       	ldi	r24, 0x81	; 129
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 6c 05 	call	0xad8	; 0xad8 <i2c_lcd_put_string>
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	4a e7       	ldi	r20, 0x7A	; 122
     d42:	54 e4       	ldi	r21, 0x44	; 68
     d44:	c7 01       	movw	r24, r14
     d46:	b6 01       	movw	r22, r12
     d48:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divsf3>
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e2       	ldi	r20, 0x20	; 32
     d52:	51 e4       	ldi	r21, 0x41	; 65
     d54:	0e 94 1a 08 	call	0x1034	; 0x1034 <__mulsf3>
     d58:	0e 94 56 07 	call	0xeac	; 0xeac <__fixsfsi>
     d5c:	2a e0       	ldi	r18, 0x0A	; 10
     d5e:	ae 01       	movw	r20, r28
     d60:	4f 5f       	subi	r20, 0xFF	; 255
     d62:	5f 4f       	sbci	r21, 0xFF	; 255
     d64:	0e 94 87 08 	call	0x110e	; 0x110e <__ltoa_ncheck>
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 6c 05 	call	0xad8	; 0xad8 <i2c_lcd_put_string>
     d72:	86 cf       	rjmp	.-244    	; 0xc80 <main+0x34>
     d74:	88 b3       	in	r24, 0x18	; 24
     d76:	8f 67       	ori	r24, 0x7F	; 127
     d78:	88 bb       	out	0x18, r24	; 24
     d7a:	84 e6       	ldi	r24, 0x64	; 100
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 7f 00 	call	0xfe	; 0xfe <delay_ms>
     d82:	88 b3       	in	r24, 0x18	; 24
     d84:	80 78       	andi	r24, 0x80	; 128
     d86:	88 bb       	out	0x18, r24	; 24
     d88:	84 e6       	ldi	r24, 0x64	; 100
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 7f 00 	call	0xfe	; 0xfe <delay_ms>
     d90:	c9 99       	sbic	0x19, 1	; 25
     d92:	f0 cf       	rjmp	.-32     	; 0xd74 <main+0x128>
     d94:	8c cf       	rjmp	.-232    	; 0xcae <main+0x62>
     d96:	c8 9b       	sbis	0x19, 0	; 25
     d98:	98 cf       	rjmp	.-208    	; 0xcca <main+0x7e>
     d9a:	c8 99       	sbic	0x19, 0	; 25
     d9c:	fc cf       	rjmp	.-8      	; 0xd96 <main+0x14a>
     d9e:	95 cf       	rjmp	.-214    	; 0xcca <main+0x7e>
     da0:	c8 99       	sbic	0x19, 0	; 25
     da2:	93 cf       	rjmp	.-218    	; 0xcca <main+0x7e>
     da4:	c8 9b       	sbis	0x19, 0	; 25
     da6:	fc cf       	rjmp	.-8      	; 0xda0 <main+0x154>
     da8:	90 cf       	rjmp	.-224    	; 0xcca <main+0x7e>

00000daa <__umulhisi3>:
     daa:	a2 9f       	mul	r26, r18
     dac:	b0 01       	movw	r22, r0
     dae:	b3 9f       	mul	r27, r19
     db0:	c0 01       	movw	r24, r0
     db2:	a3 9f       	mul	r26, r19
     db4:	70 0d       	add	r23, r0
     db6:	81 1d       	adc	r24, r1
     db8:	11 24       	eor	r1, r1
     dba:	91 1d       	adc	r25, r1
     dbc:	b2 9f       	mul	r27, r18
     dbe:	70 0d       	add	r23, r0
     dc0:	81 1d       	adc	r24, r1
     dc2:	11 24       	eor	r1, r1
     dc4:	91 1d       	adc	r25, r1
     dc6:	08 95       	ret

00000dc8 <__divsf3>:
     dc8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divsf3x>
     dcc:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_round>
     dd0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fp_pscB>
     dd4:	58 f0       	brcs	.+22     	; 0xdec <__divsf3+0x24>
     dd6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_pscA>
     dda:	40 f0       	brcs	.+16     	; 0xdec <__divsf3+0x24>
     ddc:	29 f4       	brne	.+10     	; 0xde8 <__divsf3+0x20>
     dde:	5f 3f       	cpi	r21, 0xFF	; 255
     de0:	29 f0       	breq	.+10     	; 0xdec <__divsf3+0x24>
     de2:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_inf>
     de6:	51 11       	cpse	r21, r1
     de8:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_szero>
     dec:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__fp_nan>

00000df0 <__divsf3x>:
     df0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_split3>
     df4:	68 f3       	brcs	.-38     	; 0xdd0 <__divsf3+0x8>

00000df6 <__divsf3_pse>:
     df6:	99 23       	and	r25, r25
     df8:	b1 f3       	breq	.-20     	; 0xde6 <__divsf3+0x1e>
     dfa:	55 23       	and	r21, r21
     dfc:	91 f3       	breq	.-28     	; 0xde2 <__divsf3+0x1a>
     dfe:	95 1b       	sub	r25, r21
     e00:	55 0b       	sbc	r21, r21
     e02:	bb 27       	eor	r27, r27
     e04:	aa 27       	eor	r26, r26
     e06:	62 17       	cp	r22, r18
     e08:	73 07       	cpc	r23, r19
     e0a:	84 07       	cpc	r24, r20
     e0c:	38 f0       	brcs	.+14     	; 0xe1c <__divsf3_pse+0x26>
     e0e:	9f 5f       	subi	r25, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	22 0f       	add	r18, r18
     e14:	33 1f       	adc	r19, r19
     e16:	44 1f       	adc	r20, r20
     e18:	aa 1f       	adc	r26, r26
     e1a:	a9 f3       	breq	.-22     	; 0xe06 <__divsf3_pse+0x10>
     e1c:	35 d0       	rcall	.+106    	; 0xe88 <__divsf3_pse+0x92>
     e1e:	0e 2e       	mov	r0, r30
     e20:	3a f0       	brmi	.+14     	; 0xe30 <__divsf3_pse+0x3a>
     e22:	e0 e8       	ldi	r30, 0x80	; 128
     e24:	32 d0       	rcall	.+100    	; 0xe8a <__divsf3_pse+0x94>
     e26:	91 50       	subi	r25, 0x01	; 1
     e28:	50 40       	sbci	r21, 0x00	; 0
     e2a:	e6 95       	lsr	r30
     e2c:	00 1c       	adc	r0, r0
     e2e:	ca f7       	brpl	.-14     	; 0xe22 <__divsf3_pse+0x2c>
     e30:	2b d0       	rcall	.+86     	; 0xe88 <__divsf3_pse+0x92>
     e32:	fe 2f       	mov	r31, r30
     e34:	29 d0       	rcall	.+82     	; 0xe88 <__divsf3_pse+0x92>
     e36:	66 0f       	add	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	bb 1f       	adc	r27, r27
     e3e:	26 17       	cp	r18, r22
     e40:	37 07       	cpc	r19, r23
     e42:	48 07       	cpc	r20, r24
     e44:	ab 07       	cpc	r26, r27
     e46:	b0 e8       	ldi	r27, 0x80	; 128
     e48:	09 f0       	breq	.+2      	; 0xe4c <__divsf3_pse+0x56>
     e4a:	bb 0b       	sbc	r27, r27
     e4c:	80 2d       	mov	r24, r0
     e4e:	bf 01       	movw	r22, r30
     e50:	ff 27       	eor	r31, r31
     e52:	93 58       	subi	r25, 0x83	; 131
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	3a f0       	brmi	.+14     	; 0xe66 <__divsf3_pse+0x70>
     e58:	9e 3f       	cpi	r25, 0xFE	; 254
     e5a:	51 05       	cpc	r21, r1
     e5c:	78 f0       	brcs	.+30     	; 0xe7c <__divsf3_pse+0x86>
     e5e:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_inf>
     e62:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_szero>
     e66:	5f 3f       	cpi	r21, 0xFF	; 255
     e68:	e4 f3       	brlt	.-8      	; 0xe62 <__divsf3_pse+0x6c>
     e6a:	98 3e       	cpi	r25, 0xE8	; 232
     e6c:	d4 f3       	brlt	.-12     	; 0xe62 <__divsf3_pse+0x6c>
     e6e:	86 95       	lsr	r24
     e70:	77 95       	ror	r23
     e72:	67 95       	ror	r22
     e74:	b7 95       	ror	r27
     e76:	f7 95       	ror	r31
     e78:	9f 5f       	subi	r25, 0xFF	; 255
     e7a:	c9 f7       	brne	.-14     	; 0xe6e <__divsf3_pse+0x78>
     e7c:	88 0f       	add	r24, r24
     e7e:	91 1d       	adc	r25, r1
     e80:	96 95       	lsr	r25
     e82:	87 95       	ror	r24
     e84:	97 f9       	bld	r25, 7
     e86:	08 95       	ret
     e88:	e1 e0       	ldi	r30, 0x01	; 1
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	88 1f       	adc	r24, r24
     e90:	bb 1f       	adc	r27, r27
     e92:	62 17       	cp	r22, r18
     e94:	73 07       	cpc	r23, r19
     e96:	84 07       	cpc	r24, r20
     e98:	ba 07       	cpc	r27, r26
     e9a:	20 f0       	brcs	.+8      	; 0xea4 <__divsf3_pse+0xae>
     e9c:	62 1b       	sub	r22, r18
     e9e:	73 0b       	sbc	r23, r19
     ea0:	84 0b       	sbc	r24, r20
     ea2:	ba 0b       	sbc	r27, r26
     ea4:	ee 1f       	adc	r30, r30
     ea6:	88 f7       	brcc	.-30     	; 0xe8a <__divsf3_pse+0x94>
     ea8:	e0 95       	com	r30
     eaa:	08 95       	ret

00000eac <__fixsfsi>:
     eac:	0e 94 5d 07 	call	0xeba	; 0xeba <__fixunssfsi>
     eb0:	68 94       	set
     eb2:	b1 11       	cpse	r27, r1
     eb4:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_szero>
     eb8:	08 95       	ret

00000eba <__fixunssfsi>:
     eba:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_splitA>
     ebe:	88 f0       	brcs	.+34     	; 0xee2 <__fixunssfsi+0x28>
     ec0:	9f 57       	subi	r25, 0x7F	; 127
     ec2:	98 f0       	brcs	.+38     	; 0xeea <__fixunssfsi+0x30>
     ec4:	b9 2f       	mov	r27, r25
     ec6:	99 27       	eor	r25, r25
     ec8:	b7 51       	subi	r27, 0x17	; 23
     eca:	b0 f0       	brcs	.+44     	; 0xef8 <__fixunssfsi+0x3e>
     ecc:	e1 f0       	breq	.+56     	; 0xf06 <__fixunssfsi+0x4c>
     ece:	66 0f       	add	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	1a f0       	brmi	.+6      	; 0xede <__fixunssfsi+0x24>
     ed8:	ba 95       	dec	r27
     eda:	c9 f7       	brne	.-14     	; 0xece <__fixunssfsi+0x14>
     edc:	14 c0       	rjmp	.+40     	; 0xf06 <__fixunssfsi+0x4c>
     ede:	b1 30       	cpi	r27, 0x01	; 1
     ee0:	91 f0       	breq	.+36     	; 0xf06 <__fixunssfsi+0x4c>
     ee2:	0e 94 13 08 	call	0x1026	; 0x1026 <__fp_zero>
     ee6:	b1 e0       	ldi	r27, 0x01	; 1
     ee8:	08 95       	ret
     eea:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__fp_zero>
     eee:	67 2f       	mov	r22, r23
     ef0:	78 2f       	mov	r23, r24
     ef2:	88 27       	eor	r24, r24
     ef4:	b8 5f       	subi	r27, 0xF8	; 248
     ef6:	39 f0       	breq	.+14     	; 0xf06 <__fixunssfsi+0x4c>
     ef8:	b9 3f       	cpi	r27, 0xF9	; 249
     efa:	cc f3       	brlt	.-14     	; 0xeee <__fixunssfsi+0x34>
     efc:	86 95       	lsr	r24
     efe:	77 95       	ror	r23
     f00:	67 95       	ror	r22
     f02:	b3 95       	inc	r27
     f04:	d9 f7       	brne	.-10     	; 0xefc <__fixunssfsi+0x42>
     f06:	3e f4       	brtc	.+14     	; 0xf16 <__fixunssfsi+0x5c>
     f08:	90 95       	com	r25
     f0a:	80 95       	com	r24
     f0c:	70 95       	com	r23
     f0e:	61 95       	neg	r22
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	8f 4f       	sbci	r24, 0xFF	; 255
     f14:	9f 4f       	sbci	r25, 0xFF	; 255
     f16:	08 95       	ret

00000f18 <__floatunsisf>:
     f18:	e8 94       	clt
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <__floatsisf+0x12>

00000f1c <__floatsisf>:
     f1c:	97 fb       	bst	r25, 7
     f1e:	3e f4       	brtc	.+14     	; 0xf2e <__floatsisf+0x12>
     f20:	90 95       	com	r25
     f22:	80 95       	com	r24
     f24:	70 95       	com	r23
     f26:	61 95       	neg	r22
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	8f 4f       	sbci	r24, 0xFF	; 255
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	99 23       	and	r25, r25
     f30:	a9 f0       	breq	.+42     	; 0xf5c <__floatsisf+0x40>
     f32:	f9 2f       	mov	r31, r25
     f34:	96 e9       	ldi	r25, 0x96	; 150
     f36:	bb 27       	eor	r27, r27
     f38:	93 95       	inc	r25
     f3a:	f6 95       	lsr	r31
     f3c:	87 95       	ror	r24
     f3e:	77 95       	ror	r23
     f40:	67 95       	ror	r22
     f42:	b7 95       	ror	r27
     f44:	f1 11       	cpse	r31, r1
     f46:	f8 cf       	rjmp	.-16     	; 0xf38 <__floatsisf+0x1c>
     f48:	fa f4       	brpl	.+62     	; 0xf88 <__floatsisf+0x6c>
     f4a:	bb 0f       	add	r27, r27
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__floatsisf+0x36>
     f4e:	60 ff       	sbrs	r22, 0
     f50:	1b c0       	rjmp	.+54     	; 0xf88 <__floatsisf+0x6c>
     f52:	6f 5f       	subi	r22, 0xFF	; 255
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	8f 4f       	sbci	r24, 0xFF	; 255
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	16 c0       	rjmp	.+44     	; 0xf88 <__floatsisf+0x6c>
     f5c:	88 23       	and	r24, r24
     f5e:	11 f0       	breq	.+4      	; 0xf64 <__floatsisf+0x48>
     f60:	96 e9       	ldi	r25, 0x96	; 150
     f62:	11 c0       	rjmp	.+34     	; 0xf86 <__floatsisf+0x6a>
     f64:	77 23       	and	r23, r23
     f66:	21 f0       	breq	.+8      	; 0xf70 <__floatsisf+0x54>
     f68:	9e e8       	ldi	r25, 0x8E	; 142
     f6a:	87 2f       	mov	r24, r23
     f6c:	76 2f       	mov	r23, r22
     f6e:	05 c0       	rjmp	.+10     	; 0xf7a <__floatsisf+0x5e>
     f70:	66 23       	and	r22, r22
     f72:	71 f0       	breq	.+28     	; 0xf90 <__floatsisf+0x74>
     f74:	96 e8       	ldi	r25, 0x86	; 134
     f76:	86 2f       	mov	r24, r22
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	2a f0       	brmi	.+10     	; 0xf88 <__floatsisf+0x6c>
     f7e:	9a 95       	dec	r25
     f80:	66 0f       	add	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	88 1f       	adc	r24, r24
     f86:	da f7       	brpl	.-10     	; 0xf7e <__floatsisf+0x62>
     f88:	88 0f       	add	r24, r24
     f8a:	96 95       	lsr	r25
     f8c:	87 95       	ror	r24
     f8e:	97 f9       	bld	r25, 7
     f90:	08 95       	ret

00000f92 <__fp_inf>:
     f92:	97 f9       	bld	r25, 7
     f94:	9f 67       	ori	r25, 0x7F	; 127
     f96:	80 e8       	ldi	r24, 0x80	; 128
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	08 95       	ret

00000f9e <__fp_nan>:
     f9e:	9f ef       	ldi	r25, 0xFF	; 255
     fa0:	80 ec       	ldi	r24, 0xC0	; 192
     fa2:	08 95       	ret

00000fa4 <__fp_pscA>:
     fa4:	00 24       	eor	r0, r0
     fa6:	0a 94       	dec	r0
     fa8:	16 16       	cp	r1, r22
     faa:	17 06       	cpc	r1, r23
     fac:	18 06       	cpc	r1, r24
     fae:	09 06       	cpc	r0, r25
     fb0:	08 95       	ret

00000fb2 <__fp_pscB>:
     fb2:	00 24       	eor	r0, r0
     fb4:	0a 94       	dec	r0
     fb6:	12 16       	cp	r1, r18
     fb8:	13 06       	cpc	r1, r19
     fba:	14 06       	cpc	r1, r20
     fbc:	05 06       	cpc	r0, r21
     fbe:	08 95       	ret

00000fc0 <__fp_round>:
     fc0:	09 2e       	mov	r0, r25
     fc2:	03 94       	inc	r0
     fc4:	00 0c       	add	r0, r0
     fc6:	11 f4       	brne	.+4      	; 0xfcc <__fp_round+0xc>
     fc8:	88 23       	and	r24, r24
     fca:	52 f0       	brmi	.+20     	; 0xfe0 <__fp_round+0x20>
     fcc:	bb 0f       	add	r27, r27
     fce:	40 f4       	brcc	.+16     	; 0xfe0 <__fp_round+0x20>
     fd0:	bf 2b       	or	r27, r31
     fd2:	11 f4       	brne	.+4      	; 0xfd8 <__fp_round+0x18>
     fd4:	60 ff       	sbrs	r22, 0
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <__fp_round+0x20>
     fd8:	6f 5f       	subi	r22, 0xFF	; 255
     fda:	7f 4f       	sbci	r23, 0xFF	; 255
     fdc:	8f 4f       	sbci	r24, 0xFF	; 255
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	08 95       	ret

00000fe2 <__fp_split3>:
     fe2:	57 fd       	sbrc	r21, 7
     fe4:	90 58       	subi	r25, 0x80	; 128
     fe6:	44 0f       	add	r20, r20
     fe8:	55 1f       	adc	r21, r21
     fea:	59 f0       	breq	.+22     	; 0x1002 <__fp_splitA+0x10>
     fec:	5f 3f       	cpi	r21, 0xFF	; 255
     fee:	71 f0       	breq	.+28     	; 0x100c <__fp_splitA+0x1a>
     ff0:	47 95       	ror	r20

00000ff2 <__fp_splitA>:
     ff2:	88 0f       	add	r24, r24
     ff4:	97 fb       	bst	r25, 7
     ff6:	99 1f       	adc	r25, r25
     ff8:	61 f0       	breq	.+24     	; 0x1012 <__fp_splitA+0x20>
     ffa:	9f 3f       	cpi	r25, 0xFF	; 255
     ffc:	79 f0       	breq	.+30     	; 0x101c <__fp_splitA+0x2a>
     ffe:	87 95       	ror	r24
    1000:	08 95       	ret
    1002:	12 16       	cp	r1, r18
    1004:	13 06       	cpc	r1, r19
    1006:	14 06       	cpc	r1, r20
    1008:	55 1f       	adc	r21, r21
    100a:	f2 cf       	rjmp	.-28     	; 0xff0 <__fp_split3+0xe>
    100c:	46 95       	lsr	r20
    100e:	f1 df       	rcall	.-30     	; 0xff2 <__fp_splitA>
    1010:	08 c0       	rjmp	.+16     	; 0x1022 <__fp_splitA+0x30>
    1012:	16 16       	cp	r1, r22
    1014:	17 06       	cpc	r1, r23
    1016:	18 06       	cpc	r1, r24
    1018:	99 1f       	adc	r25, r25
    101a:	f1 cf       	rjmp	.-30     	; 0xffe <__fp_splitA+0xc>
    101c:	86 95       	lsr	r24
    101e:	71 05       	cpc	r23, r1
    1020:	61 05       	cpc	r22, r1
    1022:	08 94       	sec
    1024:	08 95       	ret

00001026 <__fp_zero>:
    1026:	e8 94       	clt

00001028 <__fp_szero>:
    1028:	bb 27       	eor	r27, r27
    102a:	66 27       	eor	r22, r22
    102c:	77 27       	eor	r23, r23
    102e:	cb 01       	movw	r24, r22
    1030:	97 f9       	bld	r25, 7
    1032:	08 95       	ret

00001034 <__mulsf3>:
    1034:	0e 94 2d 08 	call	0x105a	; 0x105a <__mulsf3x>
    1038:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_round>
    103c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_pscA>
    1040:	38 f0       	brcs	.+14     	; 0x1050 <__mulsf3+0x1c>
    1042:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fp_pscB>
    1046:	20 f0       	brcs	.+8      	; 0x1050 <__mulsf3+0x1c>
    1048:	95 23       	and	r25, r21
    104a:	11 f0       	breq	.+4      	; 0x1050 <__mulsf3+0x1c>
    104c:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_inf>
    1050:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__fp_nan>
    1054:	11 24       	eor	r1, r1
    1056:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_szero>

0000105a <__mulsf3x>:
    105a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_split3>
    105e:	70 f3       	brcs	.-36     	; 0x103c <__mulsf3+0x8>

00001060 <__mulsf3_pse>:
    1060:	95 9f       	mul	r25, r21
    1062:	c1 f3       	breq	.-16     	; 0x1054 <__mulsf3+0x20>
    1064:	95 0f       	add	r25, r21
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	55 1f       	adc	r21, r21
    106a:	62 9f       	mul	r22, r18
    106c:	f0 01       	movw	r30, r0
    106e:	72 9f       	mul	r23, r18
    1070:	bb 27       	eor	r27, r27
    1072:	f0 0d       	add	r31, r0
    1074:	b1 1d       	adc	r27, r1
    1076:	63 9f       	mul	r22, r19
    1078:	aa 27       	eor	r26, r26
    107a:	f0 0d       	add	r31, r0
    107c:	b1 1d       	adc	r27, r1
    107e:	aa 1f       	adc	r26, r26
    1080:	64 9f       	mul	r22, r20
    1082:	66 27       	eor	r22, r22
    1084:	b0 0d       	add	r27, r0
    1086:	a1 1d       	adc	r26, r1
    1088:	66 1f       	adc	r22, r22
    108a:	82 9f       	mul	r24, r18
    108c:	22 27       	eor	r18, r18
    108e:	b0 0d       	add	r27, r0
    1090:	a1 1d       	adc	r26, r1
    1092:	62 1f       	adc	r22, r18
    1094:	73 9f       	mul	r23, r19
    1096:	b0 0d       	add	r27, r0
    1098:	a1 1d       	adc	r26, r1
    109a:	62 1f       	adc	r22, r18
    109c:	83 9f       	mul	r24, r19
    109e:	a0 0d       	add	r26, r0
    10a0:	61 1d       	adc	r22, r1
    10a2:	22 1f       	adc	r18, r18
    10a4:	74 9f       	mul	r23, r20
    10a6:	33 27       	eor	r19, r19
    10a8:	a0 0d       	add	r26, r0
    10aa:	61 1d       	adc	r22, r1
    10ac:	23 1f       	adc	r18, r19
    10ae:	84 9f       	mul	r24, r20
    10b0:	60 0d       	add	r22, r0
    10b2:	21 1d       	adc	r18, r1
    10b4:	82 2f       	mov	r24, r18
    10b6:	76 2f       	mov	r23, r22
    10b8:	6a 2f       	mov	r22, r26
    10ba:	11 24       	eor	r1, r1
    10bc:	9f 57       	subi	r25, 0x7F	; 127
    10be:	50 40       	sbci	r21, 0x00	; 0
    10c0:	9a f0       	brmi	.+38     	; 0x10e8 <__mulsf3_pse+0x88>
    10c2:	f1 f0       	breq	.+60     	; 0x1100 <__mulsf3_pse+0xa0>
    10c4:	88 23       	and	r24, r24
    10c6:	4a f0       	brmi	.+18     	; 0x10da <__mulsf3_pse+0x7a>
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	bb 1f       	adc	r27, r27
    10ce:	66 1f       	adc	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	88 1f       	adc	r24, r24
    10d4:	91 50       	subi	r25, 0x01	; 1
    10d6:	50 40       	sbci	r21, 0x00	; 0
    10d8:	a9 f7       	brne	.-22     	; 0x10c4 <__mulsf3_pse+0x64>
    10da:	9e 3f       	cpi	r25, 0xFE	; 254
    10dc:	51 05       	cpc	r21, r1
    10de:	80 f0       	brcs	.+32     	; 0x1100 <__mulsf3_pse+0xa0>
    10e0:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_inf>
    10e4:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_szero>
    10e8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ea:	e4 f3       	brlt	.-8      	; 0x10e4 <__mulsf3_pse+0x84>
    10ec:	98 3e       	cpi	r25, 0xE8	; 232
    10ee:	d4 f3       	brlt	.-12     	; 0x10e4 <__mulsf3_pse+0x84>
    10f0:	86 95       	lsr	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b7 95       	ror	r27
    10f8:	f7 95       	ror	r31
    10fa:	e7 95       	ror	r30
    10fc:	9f 5f       	subi	r25, 0xFF	; 255
    10fe:	c1 f7       	brne	.-16     	; 0x10f0 <__mulsf3_pse+0x90>
    1100:	fe 2b       	or	r31, r30
    1102:	88 0f       	add	r24, r24
    1104:	91 1d       	adc	r25, r1
    1106:	96 95       	lsr	r25
    1108:	87 95       	ror	r24
    110a:	97 f9       	bld	r25, 7
    110c:	08 95       	ret

0000110e <__ltoa_ncheck>:
    110e:	bb 27       	eor	r27, r27
    1110:	2a 30       	cpi	r18, 0x0A	; 10
    1112:	51 f4       	brne	.+20     	; 0x1128 <__ltoa_ncheck+0x1a>
    1114:	99 23       	and	r25, r25
    1116:	42 f4       	brpl	.+16     	; 0x1128 <__ltoa_ncheck+0x1a>
    1118:	bd e2       	ldi	r27, 0x2D	; 45
    111a:	90 95       	com	r25
    111c:	80 95       	com	r24
    111e:	70 95       	com	r23
    1120:	61 95       	neg	r22
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	8f 4f       	sbci	r24, 0xFF	; 255
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	0c 94 97 08 	jmp	0x112e	; 0x112e <__ultoa_common>

0000112c <__ultoa_ncheck>:
    112c:	bb 27       	eor	r27, r27

0000112e <__ultoa_common>:
    112e:	fa 01       	movw	r30, r20
    1130:	a6 2f       	mov	r26, r22
    1132:	62 17       	cp	r22, r18
    1134:	71 05       	cpc	r23, r1
    1136:	81 05       	cpc	r24, r1
    1138:	91 05       	cpc	r25, r1
    113a:	33 0b       	sbc	r19, r19
    113c:	30 fb       	bst	r19, 0
    113e:	66 f0       	brts	.+24     	; 0x1158 <__ultoa_common+0x2a>
    1140:	aa 27       	eor	r26, r26
    1142:	66 0f       	add	r22, r22
    1144:	77 1f       	adc	r23, r23
    1146:	88 1f       	adc	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	aa 1f       	adc	r26, r26
    114c:	a2 17       	cp	r26, r18
    114e:	10 f0       	brcs	.+4      	; 0x1154 <__ultoa_common+0x26>
    1150:	a2 1b       	sub	r26, r18
    1152:	63 95       	inc	r22
    1154:	38 50       	subi	r19, 0x08	; 8
    1156:	a9 f7       	brne	.-22     	; 0x1142 <__ultoa_common+0x14>
    1158:	a0 5d       	subi	r26, 0xD0	; 208
    115a:	aa 33       	cpi	r26, 0x3A	; 58
    115c:	08 f0       	brcs	.+2      	; 0x1160 <__ultoa_common+0x32>
    115e:	a9 5d       	subi	r26, 0xD9	; 217
    1160:	a1 93       	st	Z+, r26
    1162:	36 f7       	brtc	.-52     	; 0x1130 <__ultoa_common+0x2>
    1164:	b1 11       	cpse	r27, r1
    1166:	b1 93       	st	Z+, r27
    1168:	10 82       	st	Z, r1
    116a:	ca 01       	movw	r24, r20
    116c:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <strrev>

00001170 <strrev>:
    1170:	dc 01       	movw	r26, r24
    1172:	fc 01       	movw	r30, r24
    1174:	67 2f       	mov	r22, r23
    1176:	71 91       	ld	r23, Z+
    1178:	77 23       	and	r23, r23
    117a:	e1 f7       	brne	.-8      	; 0x1174 <strrev+0x4>
    117c:	32 97       	sbiw	r30, 0x02	; 2
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <strrev+0x18>
    1180:	7c 91       	ld	r23, X
    1182:	6d 93       	st	X+, r22
    1184:	70 83       	st	Z, r23
    1186:	62 91       	ld	r22, -Z
    1188:	ae 17       	cp	r26, r30
    118a:	bf 07       	cpc	r27, r31
    118c:	c8 f3       	brcs	.-14     	; 0x1180 <strrev+0x10>
    118e:	08 95       	ret

00001190 <_exit>:
    1190:	f8 94       	cli

00001192 <__stop_program>:
    1192:	ff cf       	rjmp	.-2      	; 0x1192 <__stop_program>
