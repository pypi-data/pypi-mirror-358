# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_prism_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.mgmt.EnvironmentType import EnvironmentType  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.mgmt.InstanceType import InstanceType  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.mgmt.LbAddress import LbAddress  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.mgmt.ProviderType import ProviderType  # noqa: F401,E501

class EnvironmentInfo(ExternalizableAbstractModel):

    """

    :param environment_type: (:attr:`environment_type`) 
    :type environment_type: 
    
    
    :param provider_type: (:attr:`provider_type`) 
    :type provider_type: 
    
    
    :param instance_type: (:attr:`instance_type`) 
    :type instance_type: 
    
    
    :param cell_fqdn: (:attr:`cell_fqdn`) This signifies region/az info. There can be different billing units for different region. CFS service running in PC and PE (in XI DC) currently pass this info along with metrix and spec to metering and telemetry pipeline. 
    :type cell_fqdn: 
    
    
    :param tenant_uuid: (:attr:`tenant_uuid`) The unique UUID provisioned to the tenant. 
    :type tenant_uuid: 
    
    
    :param pc_external_url: (:attr:`pc_external_url`) This field signifies DNS mapped fully qualified domain name provided by MCM. 
    :type pc_external_url: 
    
    
    :param local_az_name: (:attr:`local_az_name`) This field signifies local availability zone name derived from tenant region. 
    :type local_az_name: 
    
    
    :param cloud_site_name: (:attr:`cloud_site_name`) This field signifies cloud site name for a given company. A company can have multiple povisioned sites. This will be provided by customers on MCM UI. 
    :type cloud_site_name: 
    
    
    :param cloud_region_name: (:attr:`cloud_region_name`) This field signifies tenant region, to be selected by customers on MCM UI. 
    :type cloud_region_name: 
    
    
    :param my_nutanix_url: (:attr:`my_nutanix_url`) This field signifies mynutanix URL. 
    :type my_nutanix_url: 
    
    
    :param xlb_virtual_address: (:attr:`xlb_virtual_address`) 
    :type xlb_virtual_address: 
    
    
    :param olb_virtual_address: (:attr:`olb_virtual_address`) 
    :type olb_virtual_address: 
    
    
    :param billing_host: (:attr:`billing_host`) This field signifies the billing UI hostname. 
    :type billing_host: 
    
    
    :param billing_api_host: (:attr:`billing_api_host`) This field signifies billing API hostname which serves billing apis. 
    :type billing_api_host: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'environment_type': 'prism.v4.mgmt.EnvironmentType',
        'provider_type': 'prism.v4.mgmt.ProviderType',
        'instance_type': 'prism.v4.mgmt.InstanceType',
        'cell_fqdn': 'str',
        'tenant_uuid': 'str',
        'pc_external_url': 'str',
        'local_az_name': 'str',
        'cloud_site_name': 'str',
        'cloud_region_name': 'str',
        'my_nutanix_url': 'str',
        'xlb_virtual_address': 'prism.v4.mgmt.LbAddress',
        'olb_virtual_address': 'prism.v4.mgmt.LbAddress',
        'billing_host': 'str',
        'billing_api_host': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'environment_type': 'environmentType',
        'provider_type': 'providerType',
        'instance_type': 'instanceType',
        'cell_fqdn': 'cellFqdn',
        'tenant_uuid': 'tenantUuid',
        'pc_external_url': 'pcExternalUrl',
        'local_az_name': 'localAzName',
        'cloud_site_name': 'cloudSiteName',
        'cloud_region_name': 'cloudRegionName',
        'my_nutanix_url': 'myNutanixUrl',
        'xlb_virtual_address': 'xlbVirtualAddress',
        'olb_virtual_address': 'olbVirtualAddress',
        'billing_host': 'billingHost',
        'billing_api_host': 'billingApiHost',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, environment_type=None, provider_type=None, instance_type=None, cell_fqdn=None, tenant_uuid=None, pc_external_url=None, local_az_name=None, cloud_site_name=None, cloud_region_name=None, my_nutanix_url=None, xlb_virtual_address=None, olb_virtual_address=None, billing_host=None, billing_api_host=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__environment_type = None
        self.__provider_type = None
        self.__instance_type = None
        self.__cell_fqdn = None
        self.__tenant_uuid = None
        self.__pc_external_url = None
        self.__local_az_name = None
        self.__cloud_site_name = None
        self.__cloud_region_name = None
        self.__my_nutanix_url = None
        self.__xlb_virtual_address = None
        self.__olb_virtual_address = None
        self.__billing_host = None
        self.__billing_api_host = None
        self.discriminator = None
        if environment_type is not None:
            self.__environment_type = environment_type
        if provider_type is not None:
            self.__provider_type = provider_type
        if instance_type is not None:
            self.__instance_type = instance_type
        if cell_fqdn is not None:
            self.__cell_fqdn = cell_fqdn
        if tenant_uuid is not None:
            self.__tenant_uuid = tenant_uuid
        if pc_external_url is not None:
            self.__pc_external_url = pc_external_url
        if local_az_name is not None:
            self.__local_az_name = local_az_name
        if cloud_site_name is not None:
            self.__cloud_site_name = cloud_site_name
        if cloud_region_name is not None:
            self.__cloud_region_name = cloud_region_name
        if my_nutanix_url is not None:
            self.__my_nutanix_url = my_nutanix_url
        if xlb_virtual_address is not None:
            self.__xlb_virtual_address = xlb_virtual_address
        if olb_virtual_address is not None:
            self.__olb_virtual_address = olb_virtual_address
        if billing_host is not None:
            self.__billing_host = billing_host
        if billing_api_host is not None:
            self.__billing_api_host = billing_api_host

    def _initialize_object_type(self):
        return 'prism.v4.mgmt.EnvironmentInfo'

    def _initialize_object_version(self):
        return 'v4.r1'


    @property
    def environment_type(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.mgmt.EnvironmentType`
        """  # noqa: E501
        return self.__environment_type

    @environment_type.setter
    def environment_type(self, environment_type):

        self.__environment_type = environment_type

    @property
    def provider_type(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.mgmt.ProviderType`
        """  # noqa: E501
        return self.__provider_type

    @provider_type.setter
    def provider_type(self, provider_type):

        self.__provider_type = provider_type

    @property
    def instance_type(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.mgmt.InstanceType`
        """  # noqa: E501
        return self.__instance_type

    @instance_type.setter
    def instance_type(self, instance_type):

        self.__instance_type = instance_type

    @property
    def cell_fqdn(self):
        """
        This signifies region/az info. There can be different billing units for different region. CFS service running in PC and PE (in XI DC) currently pass this info along with metrix and spec to metering and telemetry pipeline. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cell_fqdn

    @cell_fqdn.setter
    def cell_fqdn(self, cell_fqdn):

        self.__cell_fqdn = cell_fqdn

    @property
    def tenant_uuid(self):
        """
        The unique UUID provisioned to the tenant. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__tenant_uuid

    @tenant_uuid.setter
    def tenant_uuid(self, tenant_uuid):
        if tenant_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', tenant_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `tenant_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__tenant_uuid = tenant_uuid

    @property
    def pc_external_url(self):
        """
        This field signifies DNS mapped fully qualified domain name provided by MCM. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__pc_external_url

    @pc_external_url.setter
    def pc_external_url(self, pc_external_url):
        if pc_external_url is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', pc_external_url):  # noqa: E501
            raise ValueError(r"Invalid value for `pc_external_url`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__pc_external_url = pc_external_url

    @property
    def local_az_name(self):
        """
        This field signifies local availability zone name derived from tenant region. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__local_az_name

    @local_az_name.setter
    def local_az_name(self, local_az_name):

        self.__local_az_name = local_az_name

    @property
    def cloud_site_name(self):
        """
        This field signifies cloud site name for a given company. A company can have multiple povisioned sites. This will be provided by customers on MCM UI. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cloud_site_name

    @cloud_site_name.setter
    def cloud_site_name(self, cloud_site_name):

        self.__cloud_site_name = cloud_site_name

    @property
    def cloud_region_name(self):
        """
        This field signifies tenant region, to be selected by customers on MCM UI. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cloud_region_name

    @cloud_region_name.setter
    def cloud_region_name(self, cloud_region_name):

        self.__cloud_region_name = cloud_region_name

    @property
    def my_nutanix_url(self):
        """
        This field signifies mynutanix URL. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__my_nutanix_url

    @my_nutanix_url.setter
    def my_nutanix_url(self, my_nutanix_url):
        if my_nutanix_url is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', my_nutanix_url):  # noqa: E501
            raise ValueError(r"Invalid value for `my_nutanix_url`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__my_nutanix_url = my_nutanix_url

    @property
    def xlb_virtual_address(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.mgmt.LbAddress`
        """  # noqa: E501
        return self.__xlb_virtual_address

    @xlb_virtual_address.setter
    def xlb_virtual_address(self, xlb_virtual_address):

        self.__xlb_virtual_address = xlb_virtual_address

    @property
    def olb_virtual_address(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.mgmt.LbAddress`
        """  # noqa: E501
        return self.__olb_virtual_address

    @olb_virtual_address.setter
    def olb_virtual_address(self, olb_virtual_address):

        self.__olb_virtual_address = olb_virtual_address

    @property
    def billing_host(self):
        """
        This field signifies the billing UI hostname. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__billing_host

    @billing_host.setter
    def billing_host(self, billing_host):

        self.__billing_host = billing_host

    @property
    def billing_api_host(self):
        """
        This field signifies billing API hostname which serves billing apis. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__billing_api_host

    @billing_api_host.setter
    def billing_api_host(self, billing_api_host):

        self.__billing_api_host = billing_api_host

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(EnvironmentInfo, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

