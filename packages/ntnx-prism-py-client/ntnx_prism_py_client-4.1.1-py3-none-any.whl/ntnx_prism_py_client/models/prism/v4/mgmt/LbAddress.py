# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_prism_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class LbAddress(ExternalizableAbstractModel):

    """

    :param ip: (:attr:`ip`) 
    :type ip: 
    
    
    :param ipv6: (:attr:`ipv6`) 
    :type ipv6: 
    
    
    :param fqdn: (:attr:`fqdn`) 
    :type fqdn: 
    
    
    :param port: (:attr:`port`) 
    :type port: 
    
    
    :param is_backup: (:attr:`is_backup`) 
    :type is_backup: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ip': 'str',
        'ipv6': 'str',
        'fqdn': 'str',
        'port': 'int',
        'is_backup': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ip': 'ip',
        'ipv6': 'ipv6',
        'fqdn': 'fqdn',
        'port': 'port',
        'is_backup': 'isBackup',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ip=None, ipv6=None, fqdn=None, port=None, is_backup=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__ip = None
        self.__ipv6 = None
        self.__fqdn = None
        self.__port = None
        self.__is_backup = None
        self.discriminator = None
        if ip is not None:
            self.__ip = ip
        if ipv6 is not None:
            self.__ipv6 = ipv6
        if fqdn is not None:
            self.__fqdn = fqdn
        if port is not None:
            self.__port = port
        if is_backup is not None:
            self.__is_backup = is_backup

    def _initialize_object_type(self):
        return 'prism.v4.mgmt.LbAddress'

    def _initialize_object_version(self):
        return 'v4.r1'


    @property
    def ip(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ip

    @ip.setter
    def ip(self, ip):

        self.__ip = ip

    @property
    def ipv6(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ipv6

    @ipv6.setter
    def ipv6(self, ipv6):

        self.__ipv6 = ipv6

    @property
    def fqdn(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__fqdn

    @fqdn.setter
    def fqdn(self, fqdn):

        self.__fqdn = fqdn

    @property
    def port(self):
        """
        

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__port

    @port.setter
    def port(self, port):

        self.__port = port

    @property
    def is_backup(self):
        """
        

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_backup

    @is_backup.setter
    def is_backup(self, is_backup):

        self.__is_backup = is_backup

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(LbAddress, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

