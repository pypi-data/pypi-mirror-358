# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
import ntnx_prism_py_client.models
from ntnx_prism_py_client.models.OneOfprism.v4.management.NutanixObjectsConfigcredentials import NutanixObjectsConfigcredentials  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.management.ConnectionConfig import ConnectionConfig  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.management.S3Config import S3Config  # noqa: F401,E501

class NutanixObjectsConfig(S3Config):

    """The base model of Nutanix Objects object store endpoint where the domain manager is backed up. 

    :param connection_config: (:attr:`connection_config`) 
    :type connection_config: 
    
    
    :param credentials: (:attr:`credentials`) This object is a container for credentials to access the object store. 
    :type credentials: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'connection_config': 'prism.v4.management.ConnectionConfig',
        'credentials': 'OneOfprism.v4.management.NutanixObjectsConfigcredentials',
        'bucket_name': 'str',
        'region': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'connection_config': 'connectionConfig',
        'credentials': 'credentials',
        'bucket_name': 'bucketName',
        'region': 'region',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, connection_config=None, credentials=None, bucket_name=None, region='us-east-1', *args, **kwargs):  # noqa: E501
        S3Config.__init__(self, bucket_name, region, *args, **kwargs)
        self.__connection_config = None
        self.__credentials = None
        self.discriminator = None
        if connection_config is not None:
            self.__connection_config = connection_config
        if credentials is not None:
            self.__credentials = credentials

    def _initialize_object_type(self):
        return 'prism.v4.management.NutanixObjectsConfig'

    def _initialize_object_version(self):
        return 'v4.r1'


    @property
    def connection_config(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.management.ConnectionConfig`
        """  # noqa: E501
        return self.__connection_config

    @connection_config.setter
    def connection_config(self, connection_config):

        self.__connection_config = connection_config

    @property
    def credentials(self):
        """
        This object is a container for credentials to access the object store. 

        :type:
                :class:`~ntnx_prism_py_client.models.prism.v4.management.AccessKeyCredentials`
        """  # noqa: E501
        return self.__credentials

    @credentials.setter
    def credentials(self, credentials):

        self.__credentials = credentials

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_prism_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(NutanixObjectsConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NutanixObjectsConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

