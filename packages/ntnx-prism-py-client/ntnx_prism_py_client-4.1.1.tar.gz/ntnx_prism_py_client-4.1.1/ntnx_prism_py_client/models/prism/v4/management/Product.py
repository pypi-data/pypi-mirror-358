# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_prism_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.management.EnablementState import EnablementState  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.management.ProductName import ProductName  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.management.ResourceSpec import ResourceSpec  # noqa: F401,E501

class Product(ExternalizableAbstractModel):

    """

    :param name: (:attr:`name`) 
    :type name: 
    
    
    :param version: (:attr:`version`) Version of the product (if any).
    :type version: 
    
    
    :param enablement_state: (:attr:`enablement_state`) 
    :type enablement_state: required
    
    
    :param service_enablement_time: (:attr:`service_enablement_time`) Timestamp at which the enablement was completed.
    :type service_enablement_time: 
    
    
    :param resize_time: (:attr:`resize_time`) Timestamp of resize operation performed for a given product.
    :type resize_time: 
    
    
    :param last_modified_time: (:attr:`last_modified_time`) Timestamp at which the last modification was done on enablement status or metadata.
    :type last_modified_time: 
    
    
    :param resource_spec: (:attr:`resource_spec`) 
    :type resource_spec: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'prism.v4.management.ProductName',
        'version': 'str',
        'enablement_state': 'prism.v4.management.EnablementState',
        'service_enablement_time': 'datetime',
        'resize_time': 'datetime',
        'last_modified_time': 'datetime',
        'resource_spec': 'prism.v4.management.ResourceSpec',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'enablement_state': 'enablementState',
        'service_enablement_time': 'serviceEnablementTime',
        'resize_time': 'resizeTime',
        'last_modified_time': 'lastModifiedTime',
        'resource_spec': 'resourceSpec',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, version=None, enablement_state=None, service_enablement_time=None, resize_time=None, last_modified_time=None, resource_spec=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__version = None
        self.__enablement_state = None
        self.__service_enablement_time = None
        self.__resize_time = None
        self.__last_modified_time = None
        self.__resource_spec = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if version is not None:
            self.__version = version
        self.__enablement_state = enablement_state
        if service_enablement_time is not None:
            self.__service_enablement_time = service_enablement_time
        if resize_time is not None:
            self.__resize_time = resize_time
        if last_modified_time is not None:
            self.__last_modified_time = last_modified_time
        if resource_spec is not None:
            self.__resource_spec = resource_spec

    def _initialize_object_type(self):
        return 'prism.v4.management.Product'

    def _initialize_object_version(self):
        return 'v4.r1'


    @property
    def name(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.management.ProductName`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):

        self.__name = name

    @property
    def version(self):
        """
        Version of the product (if any).

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__version

    @version.setter
    def version(self, version):

        self.__version = version

    @property
    def enablement_state(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.management.EnablementState`
        """  # noqa: E501
        return self.__enablement_state

    @enablement_state.setter
    def enablement_state(self, enablement_state):
        if enablement_state is None:
            raise ValueError("Invalid value for `enablement_state`, must not be `None`")  # noqa: E501

        self.__enablement_state = enablement_state

    @property
    def service_enablement_time(self):
        """
        Timestamp at which the enablement was completed.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__service_enablement_time

    @service_enablement_time.setter
    def service_enablement_time(self, service_enablement_time):

        self.__service_enablement_time = service_enablement_time

    @property
    def resize_time(self):
        """
        Timestamp of resize operation performed for a given product.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__resize_time

    @resize_time.setter
    def resize_time(self, resize_time):

        self.__resize_time = resize_time

    @property
    def last_modified_time(self):
        """
        Timestamp at which the last modification was done on enablement status or metadata.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):

        self.__last_modified_time = last_modified_time

    @property
    def resource_spec(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.management.ResourceSpec`
        """  # noqa: E501
        return self.__resource_spec

    @resource_spec.setter
    def resource_spec(self, resource_spec):

        self.__resource_spec = resource_spec

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Product, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

