# coding: utf-8


"""
IGNORE:
    Nutanix Prism APIs

    Manage Tasks, Category Associations and Submit Batch Operations.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_prism_py_client.models.prism.v4.trust.AuthMetadata import AuthMetadata  # noqa: F401,E501

class SignedCertDetails(object):

    """

    :param certificate_signing_request: (:attr:`certificate_signing_request`) Public key of the client in Certificate Signing Request format encoded in PEM format. 
    :type certificate_signing_request: 
    
    
    :param signed_certificate: (:attr:`signed_certificate`) Clients Public key signed by PC's intermedicate Certificate in PEM format. 
    :type signed_certificate: 
    
    
    :param ca_cert_chain: (:attr:`ca_cert_chain`) PC Component's cert chain in PEM format. 
    :type ca_cert_chain: 
    
    
    :param error: (:attr:`error`) An error string capturing any errors faced during trust setup, will be empty if operation is successful. 
    :type error: 
    
    
    :param auth_metadata: (:attr:`auth_metadata`) 
    :type auth_metadata: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'certificate_signing_request': 'str',
        'signed_certificate': 'str',
        'ca_cert_chain': 'str',
        'error': 'str',
        'auth_metadata': 'prism.v4.trust.AuthMetadata',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'certificate_signing_request': 'certificateSigningRequest',
        'signed_certificate': 'signedCertificate',
        'ca_cert_chain': 'caCertChain',
        'error': 'error',
        'auth_metadata': 'authMetadata',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, certificate_signing_request=None, signed_certificate=None, ca_cert_chain=None, error=None, auth_metadata=None, *args, **kwargs):  # noqa: E501
        self.__certificate_signing_request = None
        self.__signed_certificate = None
        self.__ca_cert_chain = None
        self.__error = None
        self.__auth_metadata = None
        self.discriminator = None
        if certificate_signing_request is not None:
            self.__certificate_signing_request = certificate_signing_request
        if signed_certificate is not None:
            self.__signed_certificate = signed_certificate
        if ca_cert_chain is not None:
            self.__ca_cert_chain = ca_cert_chain
        if error is not None:
            self.__error = error
        if auth_metadata is not None:
            self.__auth_metadata = auth_metadata
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'prism.v4.trust.SignedCertDetails'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def certificate_signing_request(self):
        """
        Public key of the client in Certificate Signing Request format encoded in PEM format. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__certificate_signing_request

    @certificate_signing_request.setter
    def certificate_signing_request(self, certificate_signing_request):

        self.__certificate_signing_request = certificate_signing_request

    @property
    def signed_certificate(self):
        """
        Clients Public key signed by PC's intermedicate Certificate in PEM format. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__signed_certificate

    @signed_certificate.setter
    def signed_certificate(self, signed_certificate):

        self.__signed_certificate = signed_certificate

    @property
    def ca_cert_chain(self):
        """
        PC Component's cert chain in PEM format. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ca_cert_chain

    @ca_cert_chain.setter
    def ca_cert_chain(self, ca_cert_chain):

        self.__ca_cert_chain = ca_cert_chain

    @property
    def error(self):
        """
        An error string capturing any errors faced during trust setup, will be empty if operation is successful. 

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__error

    @error.setter
    def error(self, error):

        self.__error = error

    @property
    def auth_metadata(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.trust.AuthMetadata`
        """  # noqa: E501
        return self.__auth_metadata

    @auth_metadata.setter
    def auth_metadata(self, auth_metadata):

        self.__auth_metadata = auth_metadata

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(SignedCertDetails, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignedCertDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

