# coding: utf-8


"""
IGNORE:
    Nutanix Data Policies APIs

    Manage Policies for Disaster Recovery and Storage.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_datapolicies_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.datapolicies.v4.config.CompressionSpec import CompressionSpec  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.datapolicies.v4.config.EncryptionSpec import EncryptionSpec  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.datapolicies.v4.config.FaultToleranceSpec import FaultToleranceSpec  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.datapolicies.v4.config.PolicyType import PolicyType  # noqa: F401,E501
from ntnx_datapolicies_py_client.models.datapolicies.v4.config.QosSpec import QosSpec  # noqa: F401,E501

class StoragePolicy(ExternalizableAbstractModel):

    """A model that represents a Storage Policy resource.

    :param name: (:attr:`name`) Indicates the Storage Policy name. Note that the name of the Storage Policy should be unique.
    :type name: 
     max=64 chars
    
    :param category_ext_ids: (:attr:`category_ext_ids`) List of external identifiers of Categories included or to be included in the Storage Policy.
    :type category_ext_ids: 
    
    
    :param compression_spec: (:attr:`compression_spec`) 
    :type compression_spec: 
    
    
    :param encryption_spec: (:attr:`encryption_spec`) 
    :type encryption_spec: 
    
    
    :param qos_spec: (:attr:`qos_spec`) 
    :type qos_spec: 
    
    
    :param fault_tolerance_spec: (:attr:`fault_tolerance_spec`) 
    :type fault_tolerance_spec: 
    
    
    :param policy_type: (:attr:`policy_type`) 
    :type policy_type: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'category_ext_ids': 'list[str]',
        'compression_spec': 'datapolicies.v4.config.CompressionSpec',
        'encryption_spec': 'datapolicies.v4.config.EncryptionSpec',
        'qos_spec': 'datapolicies.v4.config.QosSpec',
        'fault_tolerance_spec': 'datapolicies.v4.config.FaultToleranceSpec',
        'policy_type': 'datapolicies.v4.config.PolicyType',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'category_ext_ids': 'categoryExtIds',
        'compression_spec': 'compressionSpec',
        'encryption_spec': 'encryptionSpec',
        'qos_spec': 'qosSpec',
        'fault_tolerance_spec': 'faultToleranceSpec',
        'policy_type': 'policyType',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, category_ext_ids=None, compression_spec=None, encryption_spec=None, qos_spec=None, fault_tolerance_spec=None, policy_type=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__category_ext_ids = None
        self.__compression_spec = None
        self.__encryption_spec = None
        self.__qos_spec = None
        self.__fault_tolerance_spec = None
        self.__policy_type = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if category_ext_ids is not None:
            self.__category_ext_ids = category_ext_ids
        if compression_spec is not None:
            self.__compression_spec = compression_spec
        if encryption_spec is not None:
            self.__encryption_spec = encryption_spec
        if qos_spec is not None:
            self.__qos_spec = qos_spec
        if fault_tolerance_spec is not None:
            self.__fault_tolerance_spec = fault_tolerance_spec
        if policy_type is not None:
            self.__policy_type = policy_type

    def _initialize_object_type(self):
        return 'datapolicies.v4.config.StoragePolicy'

    def _initialize_object_version(self):
        return 'v4.r1'


    @property
    def name(self):
        """
        Indicates the Storage Policy name. Note that the name of the Storage Policy should be unique.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self.__name = name

    @property
    def category_ext_ids(self):
        """
        List of external identifiers of Categories included or to be included in the Storage Policy.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__category_ext_ids

    @category_ext_ids.setter
    def category_ext_ids(self, category_ext_ids):

        self.__category_ext_ids = category_ext_ids

    @property
    def compression_spec(self):
        """
        

        :type:
            :class:`~ntnx_datapolicies_py_client.models.datapolicies.v4.config.CompressionSpec`
        """  # noqa: E501
        return self.__compression_spec

    @compression_spec.setter
    def compression_spec(self, compression_spec):

        self.__compression_spec = compression_spec

    @property
    def encryption_spec(self):
        """
        

        :type:
            :class:`~ntnx_datapolicies_py_client.models.datapolicies.v4.config.EncryptionSpec`
        """  # noqa: E501
        return self.__encryption_spec

    @encryption_spec.setter
    def encryption_spec(self, encryption_spec):

        self.__encryption_spec = encryption_spec

    @property
    def qos_spec(self):
        """
        

        :type:
            :class:`~ntnx_datapolicies_py_client.models.datapolicies.v4.config.QosSpec`
        """  # noqa: E501
        return self.__qos_spec

    @qos_spec.setter
    def qos_spec(self, qos_spec):

        self.__qos_spec = qos_spec

    @property
    def fault_tolerance_spec(self):
        """
        

        :type:
            :class:`~ntnx_datapolicies_py_client.models.datapolicies.v4.config.FaultToleranceSpec`
        """  # noqa: E501
        return self.__fault_tolerance_spec

    @fault_tolerance_spec.setter
    def fault_tolerance_spec(self, fault_tolerance_spec):

        self.__fault_tolerance_spec = fault_tolerance_spec

    @property
    def policy_type(self):
        """
        

        :type:
            :class:`~ntnx_datapolicies_py_client.models.datapolicies.v4.config.PolicyType`
        """  # noqa: E501
        return self.__policy_type

    @policy_type.setter
    def policy_type(self, policy_type):

        self.__policy_type = policy_type

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(StoragePolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

