[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-code-prompter"
version = "0.6.0"
description = "Orchestrate AI-powered code maintenance workflows with sequential or conditional task execution"
authors = [{name = "Baiju Muthukadan"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["claude-code", "automation", "code-tidying", "development-tools"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Environment :: Console",
    "Operating System :: OS Independent",
]
dependencies = [
    "claude-code-sdk>=0.0.11",
]

[project.urls]
homepage = "https://github.com/baijum/prompter"
repository = "https://github.com/baijum/prompter"
documentation = "https://github.com/baijum/prompter"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "ruff>=0.1.0",
    "mypy>=1.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
]

[project.scripts]
prompter = "prompter.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "YTT", "S", "BLE", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = [
    "E501", "COM812", "ISC001",  # Line length and formatting
    "T201",  # Print statements (acceptable in CLI)
    "PLR0911", "PLR0912", "PLR0913", "PLR0915", "PLR2004",  # Complexity rules
    "TRY300", "TRY003",  # Exception handling patterns
    "BLE001",  # Broad exception handling (acceptable for CLI error handling)
    "B904",  # Exception chaining (not always necessary)
    "EM102",  # F-string in exception (acceptable for CLI)
    "G004",  # Logging f-strings (acceptable)
    "PTH123",  # Path.open vs open (both are fine)
    "S602",  # Shell=True (needed for verification commands)
    "PLC0415",  # Import placement (sometimes needed for conditional imports)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",  # Assert statements
    "ARG001", "ARG002",  # Unused arguments in mocks
    "S108",  # Hardcoded temp paths in tests
    "SIM117",  # Nested with statements (sometimes clearer)
    "B017", "PT011",  # Broad exception testing (acceptable in tests)
    "F841",  # Unused variables in test setup
    "RUF003", "RUF013",  # Various test-specific warnings
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
]

[tool.coverage.run]
branch = true
source = ["src/prompter"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"