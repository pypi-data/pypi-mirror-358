name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.0, etc.
    branches:
      - main  # Only deploy from main branch
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    # Only run if the tag is pushed to main branch
    if: github.ref_type == 'tag' && github.ref_name != 'main' || github.event_name == 'workflow_dispatch'
    environment: release
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Verify tag is on main branch
      run: |
        # Check if the tag is reachable from main branch
        git branch -r --contains ${{ github.ref_name }} | grep -q "origin/main" || {
          echo "❌ Tag ${{ github.ref_name }} is not on main branch"
          exit 1
        }
        echo "✅ Tag ${{ github.ref_name }} is on main branch"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Install package dependencies
      run: |
        python -m pip install -r requirements.txt

    - name: Extract version from tag
      id: get_version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_NAME#v}  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "📦 Building version: $VERSION"

    - name: Update version in setup.py
      run: |
        sed -i 's/version="[^"]*"/version="${{ steps.get_version.outputs.version }}"/' setup.py
        echo "✅ Updated setup.py version to ${{ steps.get_version.outputs.version }}"

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = "[^"]*"/version = "${{ steps.get_version.outputs.version }}"/' pyproject.toml
        echo "✅ Updated pyproject.toml version to ${{ steps.get_version.outputs.version }}"

    - name: Build package
      run: |
        echo "🔨 Building package..."
        python -m build
        echo "✅ Package built successfully"

    - name: Check distribution
      run: |
        echo "🔍 Checking distribution..."
        python -m twine check dist/*
        echo "✅ Distribution check passed"

    - name: List built files
      run: |
        echo "📦 Built files:"
        ls -la dist/

    - name: Test installation
      run: |
        echo "🧪 Testing package installation..."
        python -m pip install dist/*.whl
        azure-cost-analyzer --version
        echo "✅ Package installation test passed"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Using API token for private repository
        password: ${{ secrets.PYPI_API_TOKEN }}
        print-hash: true
        verbose: true

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag:** ${{ steps.get_version.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** main" >> $GITHUB_STEP_SUMMARY
        echo "- **Package:** azure-cost-analyzer-cli" >> $GITHUB_STEP_SUMMARY
        echo "- **PyPI:** https://pypi.org/project/azure-cost-analyzer-cli/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "pip install azure-cost-analyzer-cli==${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY 