<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="nxdlformat.xsl"?>
<!--
# NeXus - Neutron and X-ray Common Data Format
#
# Copyright (C) 2024-2025 NeXus International Advisory Committee (NIAC)
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
-->
<!--
symbols:
type: group-->
<definition xmlns="http://definition.nexusformat.org/nxdl/3.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="application" type="group" name="NXmicrostructure_gragles_config" extends="NXobject" xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd">
    <doc>
        Application definition for configuring GraGLeS.
        
        GraGLeS is a continuum-scale model for shared-memory-parallelized simulations
        of the isothermal evolution of 2D and 3D grain boundary networks with a level-set approach.
        CPU parallelization is achieved with OpenMP.
        
        The code has been implemented by C. Mießen in the group of G. Gottstein
        at the Institute für Metallkunde und Metallphysik, RWTH Aachen University.
        
        Details of the model are summarized in `C. Mießen &lt;https://publications.rwth-aachen.de/record/709678&gt;`_.
    </doc>
    <group type="NXentry">
        <field name="definition" type="NX_CHAR">
            <enumeration>
                <item value="NXmicrostructure_gragles_config"/>
            </enumeration>
        </field>
        <field name="identifier_simulation" type="NX_UINT">
            <doc>
                Simulation ID as an alias to refer to this simulation.
            </doc>
        </field>
        <field name="description" type="NX_CHAR">
            <doc>
                Discouraged free-text field to add further details to the computation.
            </doc>
        </field>
        <field name="start_time" type="NX_DATE_TIME"/>
        <field name="end_time" type="NX_DATE_TIME" recommended="true"/>
        <group name="profiling" type="NXcs_profiling" optional="true"/>
        <group type="NXuser" minOccurs="0" maxOccurs="unbounded"/>
        <group name="program1" type="NXprogram">
            <field name="program_name">
                <attribute name="version"/>
                <attribute name="url" recommended="true"/>
            </field>
        </group>
        <group name="environment" type="NXobject" optional="true">
            <doc>
                Programs and libraries representing the computational environment
            </doc>
            <group type="NXprogram" minOccurs="1" maxOccurs="unbounded">
                <field name="program" type="NX_CHAR">
                    <attribute name="version" type="NX_CHAR"/>
                </field>
            </group>
        </group>
        <group name="discretization" type="NXmicrostructure">
            <!--[read_from_file]  # poisson_voronoi_tessellation
0, E_READ_FROM_FILE, 1, E_GENERATE_WITH_VORONOY, 2, E_READ_VERTEX, // The edges need to be ordered 3, E_GENERATE_TESTCASE, 4, E_READ_VOXELIZED_MICROSTRUCTURE
read the next three from input file
<ReadFromFilename>Microstructure.SimID.10.GrainIDs.2D.1188.raw</ReadFromFilename> all in config file
<AdditionalFilename>Microstructure.SimID.10.uds</AdditionalFilename>
<LatticeType>0</LatticeType> 0, E_CUBIC, 1, E_HEXAGONAL fish from config file-->
            <group name="grid" type="NXnote">
                <doc>
                    From which file should the microstructure be instantiated.
                </doc>
                <field name="type"/>
                <field name="identifier"/>
                <field name="algorithm"/>
                <field name="checksum"/>
            </group>
            <field name="edge_length" type="NX_FLOAT" units="NX_LENGTH">
                <doc>
                    The formulation of mean curvature flow in the GraGLeS model is scale invariant.
                    Therefore, the discretization has to be scaled to the actual physical length
                    of the simulation domain (ve, ROI).
                    For GraGLeS the discretization is always a square or cubic axis-aligned
                    bounding box with a regular tiling into material points
                    (either squares or cubes respectively).
                    
                    Edge_length is the length of the entire domain along its edge not
                    the length of the Wigner-Seitz cell about each material point!
                </doc>
            </field>
        </group>
        <group name="sampling" type="NXobject">
            <doc>
                Configuration when snapshots of the system should be taken.
                
                Keep in mind that essentially geometry snapshot data store the
                polylines and polyhedra of all grains which can take substantial disk
                space.
            </doc>
            <field name="system" type="NX_UINT" units="NX_UNITLESS">
                <doc>
                    Generate a snapshot of the properties of the grains to follow
                    the evolution of the microstructure every :math:`n`-th iteration.
                    Setting zero causes that no property snapshots are taken.
                </doc>
            </field>
            <field name="geometry" type="NX_UINT" units="NX_UNITLESS">
                <doc>
                    Generate a snapshot of the geometry of the entire grain boundary network
                    every :math:`n`-th iteration. Setting zero instructs to store no geometry data.
                </doc>
            </field>
        </group>
        <!--<DiscreteSamplingRate>31</DiscreteSamplingRate> no more sampling <!-\- MODF number of bins-\->
<NeighbourTracking>1</NeighbourTracking>-->
        <group name="simulation_control" type="NXobject">
            <doc>
                Configuration when the simulation should be stopped in a controlled manner.
                Whichever criterion is fulfilled first triggers the controlled stop of
                and termination of GraGLeS.
            </doc>
            <field name="number_of_grains" type="NX_UINT" units="NX_UNITLESS">
                <doc>
                    The simulation stops if the total number of grains
                    becomes smaller than this criterion.
                </doc>
            </field>
            <field name="number_of_iterations" type="NX_UINT" units="NX_UNITLESS">
                <doc>
                    The simulation stops if more iterations than this criterion have been computed.
                </doc>
            </field>
        </group>
        <group name="numerics" type="NXobject">
            <doc>
                Configuration of numerical details of the solver.
            </doc>
            <!--use proper environment variable number_of_threads(NX_UINT):  # obsolete set 0<ExecuteInParallel>1</ExecuteInParallel> 16</MaximumNumberOfThreads>-->
            <field name="convolution_mode" type="NX_CHAR">
                <doc>
                    Which type of convolution kernel and model is used.
                </doc>
                <enumeration>
                    <item value="gaussian"/>
                    <item value="laplace"/>
                    <item value="laplace_ritchardson"/>
                </enumeration>
            </field>
            <field name="time_slope" type="NX_FLOAT" units="NX_ANY">
                <doc>
                    Constant to calibrate the real time scaling of the simulation.
                </doc>
            </field>
        </group>
        <!--when taking the E_GAUSSIAN convolution mode set the TimeSlopeFactor explicitly here, default Miessen, Liesenjohann was 0.8359-\->
<StartTime>0</StartTime>
<NumberOfParticles>12991</NumberOfParticles>  # read from file
discretization(NX_UINT) # <NumberOfPointsPerGrain>15</NumberOfPointsPerGrain>
<UserDefNumberOfPointsPerGrain>15</UserDefNumberOfPointsPerGrain>
domain_border_size(NX_UINT):  # <DomainBorderSize>7</DomainBorderSize>
<!-\- USAGE: 0, E_LAPLACE, 1, E_LAPLACE_RITCHARDSON, 2, E_GAUSSIAN,
only guru i.e. in C++ code configurable options
<ResearchMode>0</ResearchMode>
0, Energies defined by misorientation, 1, GB Energies and mobilities clambed to 1.0 but uses sectors and Triplejunction mobilities,
2, GB Energies clambed to 0.3 or 0.6 / mobilities clambed to 1.0 - use Texture == false
<ResearchProject>0</ResearchProject>  # 0, E_NO_PROJECT, 1 E_TRIPLE_JUNCTION_DRAG_SINGLE (fixes outermost tj at, 2 empty)
<GrainScheduler>1</GrainScheduler>  # 0, E_ITERATIVE, 1, E_SQUARES
<BoxDefaultStoredElasticEnergy>0.0</BoxDefaultStoredElasticEnergy>
<!-\- USAGE: set to 0.0 unless mode is DecoupleGrains and make studies of isolated circular grains under capillary and stored elastic energy evolution-\->-->
        <group name="grid_coarsement" type="NXobject">
            <doc>
                Configuration of the grid coarsement algorithm whereby the representation
                of the system is continuously rediscretized such that on average grains
                are discretized with discretization many material points along each
                direction.
                
                Grid coarsement can reduce the computational costs substantially although
                it cannot be ruled out completely that the rediscretizing may have an effect
                on the system evolution. Without grid coarsement the total number of material
                points to consider stays the same throughout the simulation.
            </doc>
            <field name="discretization" type="NX_UINT" units="NX_UNITLESS">
                <doc>
                    Number of material points along each direction to discretize the
                    average grain. The larger this value is chosen the finer the curvature
                    details are that can be resolved but also the longer the simulation
                    takes.
                </doc>
            </field>
            <field name="is_active" type="NX_BOOLEAN">
                <doc>
                    If true grid coarsement is active, otherwise it is not.
                </doc>
            </field>
            <field name="gradient" type="NX_FLOAT" units="NX_DIMENSIONLESS">
                <doc>
                    Fraction how strongly the number of grains has to reduce
                    to trigger a grid coarsement step in an iteration.
                </doc>
            </field>
        </group>
        <!--the next only guru i.e. in C++ code configurable options
<ConstantSectorRadius>3</ConstantSectorRadius>
<InterpolatingSectorRadius>2</InterpolatingSectorRadius>
<DecoupleGrains>0</DecoupleGrains>  # 0, DEFAULT, 1 skips comparison and let grains shring isolated-->
        <group name="grain_boundary_mobility" type="NXobject">
            <doc>
                Physically-based model of the assumed mobility of the grain boundaries.
                
                Grain boundary mobility is not an intrinsic property of a grain boundary but system-dependent
                especially as grain boundaries in reality are decorated with defects as a consequence of which
                the actual mobility is a combination of the mobility of the individual defects and the attached
                boundary patches. Grain boundaries have different degrees of microscopic freedom.
                Therefore, their mobility follows a distribution.
            </doc>
            <!--<IsIsotropicNetwork>0</IsIsotropicNetwork>
<IdentifyTwins>0</IdentifyTwins>  # <!-\- USAGE: Input is 0 or 1 as a boolean. For 1 a Sigma 3 GB are identified and considered as lowest angle GB. -\->-->
            <field name="model" type="NX_CHAR">
                <doc>
                    Fundamental model how :math:`m` is assumed a function of the disorientation
                    angle :math:`\Theta`.
                </doc>
                <enumeration>
                    <item value="rollett_holm"/>
                </enumeration>
            </field>
            <!--For rollett_holm :math:`m(\Theta) = m_0 \cdot (1 - c_1 * exp(-c_2 \cdot \frac{\Theta}{15}^{c_3}))`.-->
            <field name="m_null" type="NX_FLOAT" units="NX_ANY">
                <doc>
                    The assumed mobility :math:`m_0` of the fastest grain boundary in the system at the assumed
                    temperature. GraGLeS was developed for modelling isothermal annealing.
                </doc>
            </field>
            <field name="c_one" type="NX_FLOAT" units="NX_DIMENSIONLESS">
                <doc>
                    Mobility scaling factor :math:`c_1`. Typically 0.99 or higher but not one.
                </doc>
            </field>
            <!--<HAGB_Mobility>7.5e-14</HAGB_Mobility> <!-\-unit: m^4/Js approx exp(5.5)*exp(-289000/(8.314*(700+273.15)))-\->-->
            <field name="c_two" type="NX_FLOAT" units="NX_UNITLESS">
                <doc>
                    Mobility scaling factor :math:`c_2`. Typically 5.
                </doc>
            </field>
            <field name="c_three" type="NX_FLOAT" units="NX_UNITLESS">
                <doc>
                    Mobility scaling factor :math:`c_3`. Typically 9.
                </doc>
            </field>
        </group>
        <group name="grain_boundary_energy" type="NXobject">
            <doc>
                Physically-based model of the assumed grain boundary surface energy.
                
                Like for the grain boundary mobility, defects cause a distribution of energies for the
                patches of which the boundary is composed. In practice a too complicated dependency
                of the energy and mobility model is observed as a function of the type and chemical
                decoration of the defects. Therefore, simplifying assumptions are typically made.
            </doc>
            <field name="type" type="NX_CHAR">
                <doc>
                    Fundamental type of assumption if energies are considered isotropic or not.
                </doc>
                <enumeration>
                    <item value="isotropic"/>
                    <item value="anisotropic"/>
                </enumeration>
            </field>
            <field name="model" type="NX_CHAR">
                <doc>
                    Fundamental model how :math:`\gamma` is assumed a function of the disorientation
                    angle :math:`\Theta`.
                </doc>
                <enumeration>
                    <item value="read_shockley"/>
                </enumeration>
            </field>
            <field name="gamma" type="NX_FLOAT" units="NX_ANY">
                <doc>
                    Mean grain boundary surface energy that is assumed a function of the
                    disorientation angle :math:`\Theta` of the adjoining grains :math:`\gamma(\Theta)`.
                    This value factorizes the curvature_driving_force model.
                </doc>
            </field>
        </group>
        <!--For GraGLeS :math:`\gamma(\Theta) = \{\begin{array}1 \text{for} \Theta > 1. \\ 0.01 \text{for} \Theta \leq 1.\end{array}`.
<EnergyModelScalingA>1.0</EnergyModelScalingA>
<EnergyModelScalingB>0.01</EnergyModelScalingB>
<!-\- INFORMATION: Scaling A is the disorientation angle cutoff in degrees, B the value assigned when nan-s occurred
these Scaling parameter are not read as well but utilized in the ReadShockley energy model-\->-->
        <group name="curvature_driving_force" type="NXobject">
            <doc>
                A continuum-scale curvature of an interface causes the interface to
                migrate towards the center of the curvature radius.
            </doc>
            <field name="is_active" type="NX_BOOLEAN">
                <doc>
                    If true the curvature_driving_force is considered, otherwise it is not.
                </doc>
            </field>
        </group>
        <group name="stored_elastic_energy" type="NXobject">
            <doc>
                A continuum-scale difference of the stored elastic energy in dislocation
                configurations across a grain boundary can exert a driving force on the
                grain boundary such that the boundary migrates into the volume with the
                higher stored elastic energy.
            </doc>
            <field name="is_active" type="NX_BOOLEAN">
                <doc>
                    If true the dislocation_driving_force is considered, otherwise it is not.
                </doc>
            </field>
            <field name="line_energy" type="NX_FLOAT" units="NX_ANY">
                <doc>
                    Prefactor :math:`0.5Gb^2` that factorizes the average
                    stored elastic energy per length dislocation line.
                </doc>
            </field>
        </group>
        <group name="magnetic_field" type="NXobject">
            <doc>
                In case of an applied magnetic field, a difference of the magnetic
                susceptibility can exert a driving force on the grain boundary such that
                the boundary migrates into the volume with the higher magnetic energy.
            </doc>
            <field name="is_active" type="NX_BOOLEAN">
                <doc>
                    If true the magnetic_driving_force is considered, otherwise it is not.
                </doc>
            </field>
        </group>
        <!--<MagneticParams> MagneticField.xml </MagneticParams>
https://github.com/GraGLeS/GraGLeS2D/blob/master/params/MagneticField.xml-->
        <group name="triple_line_mobility" type="NXobject">
            <doc>
                A triple line mediates the atomic arrangement differences between three
                interface patches. Therefore, the triple line is a defect that may not
                have the same mobility as adjoining grain boundaries and thus it may
                exert what can be conceptualized as a drag (resistance) to the motion
                of the adjoining interface patches.
            </doc>
            <field name="drag" type="NX_FLOAT" units="NX_ANY">
                <doc>
                    Assumed triple junction drag.
                </doc>
            </field>
        </group>
    </group>
    <!--<TriplePointDrag>1.0e10</TriplePointDrag> <!-\- USAGE:    0.0        off Input is a number larger than 0. This number is the absolute mobility of the point. 10.000 is quite large-\->
isotropic, anisotropic
<UseMobilityModel>1</UseMobilityModel> <!-\- USAGE: input is 0 or 1 as a boolean. For 1 a mobility model is applied. -\->
<UseTexture>1</UseTexture> <!-\- USAGE: 1, simulate fibre texture, 0 for random -> <MaxMisOrientation>25</MaxMisOrientation>
<!-\- USAGE: If UseTexture == 1, Orientations are sampled by randomly misorienting from a fixed ori with a maximum angle. -\->-->
</definition>
