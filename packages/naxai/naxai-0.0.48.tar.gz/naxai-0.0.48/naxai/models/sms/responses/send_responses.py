"""
SMS sending response models for the Naxai SDK.

This module defines the data structures for responses from SMS sending API operations,
providing models for tracking message delivery, batch processing, and message identifiers.
"""

from pydantic import BaseModel, Field

class BaseMessageModel(BaseModel):
    """
    Base model representing a single message in the Naxai messaging system.
    
    This class defines the core structure for message data, providing essential
    information about a message's recipient and unique identifier. It serves as
    a component in messaging responses and as a foundation for more specialized
    message models.
    
    Attributes:
        to (str): The recipient's phone number or identifier. This is the destination
            where the message was or will be sent. May be None if not specified.
        message_id (str): Unique identifier for the individual message. This ID can be
            used for tracking and status queries. Mapped from JSON key 'messageId'.
            May be None if not yet assigned.
    
    Example:
        >>> message = BaseMessageModel(
        ...     to="+1234567890",
        ...     messageId="msg_123abc456def"
        ... )
        >>> print(f"Message to: {message.to}")
        >>> print(f"Message ID: {message.message_id}")
        Message to: +1234567890
        Message ID: msg_123abc456def
        
        >>> # Message without an ID (e.g., before sending)
        >>> draft_message = BaseMessageModel(to="+1234567890")
        >>> print(f"Draft message to: {draft_message.to}")
        >>> print(f"Message ID not yet assigned" if draft_message.message_id is None else\
        >>>       f"ID: {draft_message.message_id}")
        Draft message to: +1234567890
        Message ID not yet assigned
    
    Note:
        - This class is typically used as a component in messaging responses
        - The message_id is generated by the system when the message is accepted for delivery
        - This ID should be stored if you need to track the message's status later
        - The to field typically contains a phone number in E.164 format (e.g., "+1234567890")
        - Both fields may be None depending on the context and state of the message
    
    See Also:
        SendSMSResponse: For the complete response structure when sending messages
    """
    to: str = Field(default=None)
    message_id: str = Field(alias="messageId", default=None)

class SendSMSResponse(BaseModel):
    """
    Model representing the response from sending SMS messages in the Naxai messaging system.
    
    This class defines the structure for the API response when successfully submitting
    SMS messages for delivery. It contains information about the batch, the number of
    messages processed, and details about each individual message.
    
    Attributes:
        batch_id (str): Unique identifier for the batch of messages. This ID can be used
            to track the entire batch. Mapped from JSON key 'batchId'. May be None if
            not applicable or not assigned.
        count (int): The number of messages included in this batch. May be None if not specified.
        messages (list[BaseMessageModel]): List of individual message objects containing
            recipient information and unique message IDs. May be None if not provided.
    
    Example:
        >>> response = SendSMSResponse(
        ...     batchId="batch_123abc",
        ...     count=3,
        ...     messages=[
        ...         BaseMessageModel(to="+1234567890", messageId="msg_123abc"),
        ...         BaseMessageModel(to="+2345678901", messageId="msg_456def"),
        ...         BaseMessageModel(to="+3456789012", messageId="msg_789ghi")
        ...     ]
        ... )
        >>> print(f"Batch ID: {response.batch_id}")
        >>> print(f"Messages sent: {response.count}")
        >>> for msg in response.messages:
        ...     print(f"Message to {msg.to}: ID {msg.message_id}")
        Batch ID: batch_123abc
        Messages sent: 3
        Message to +1234567890: ID msg_123abc
        Message to +2345678901: ID msg_456def
        Message to +3456789012: ID msg_789ghi
        
        >>> # Check if all messages have IDs assigned
        >>> all_have_ids = all(msg.message_id is not None for msg in response.messages)
        >>> print(f"All messages have IDs: {all_have_ids}")
        All messages have IDs: True
    
    Note:
        - The batch_id is generated by the system when the batch is accepted for delivery
        - This ID can be used to track the status of the entire batch
        - The count field indicates how many messages were accepted for processing
        - Each message in the messages list has its own unique message_id for individual tracking
        - Successful response means the messages were accepted for delivery, not that
          they were delivered
        - Message delivery status must be checked separately using the message_id or batch_id
    
    See Also:
        BaseMessageModel: For the structure of individual message objects
    """
    batch_id: str = Field(alias="batchId", default=None)
    count: int = Field(default=None)
    messages: list[BaseMessageModel] = Field(default=None)
