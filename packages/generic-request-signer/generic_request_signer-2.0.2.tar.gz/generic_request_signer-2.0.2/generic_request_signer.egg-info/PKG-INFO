Metadata-Version: 2.4
Name: generic-request-signer
Version: 2.0.2
Summary: A python library for signing http requests.
Home-page: https://github.com/imtapps/generic-request-signer
Author: imtapps
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: BSD License
Classifier: Topic :: Internet
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Framework :: Django
Classifier: Framework :: Django :: 1.11
Classifier: Framework :: Django :: 2.2
Classifier: Framework :: Django :: 3.2
Classifier: Framework :: Django :: 4.2
Classifier: Framework :: Django :: 5.2
License-File: LICENSE
Requires-Dist: apysigner==3.0.2; python_version < "3.0"
Requires-Dist: apysigner<4.1,>=3.0.2; python_version > "3.0"
Requires-Dist: six<2,>=1.10.0
Requires-Dist: django<6,>=1.11
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: summary

I simple utility to sign http requests given some private key

To run the python tests

1. pip install -r requirements/test.txt
2. nosetests

To run the example using flask

1. pip install -r requirements/example.txt
2. python app.py
3. open a browser and point to http://localhost:5000/

After you invoke the GET request above you should see a request in the terminal

GET /verify?__client_id=example&username=foo&password=bar&__signature=somestrangestuffhere

This shows the client in action but at this time our example does not truly verify the signed request
