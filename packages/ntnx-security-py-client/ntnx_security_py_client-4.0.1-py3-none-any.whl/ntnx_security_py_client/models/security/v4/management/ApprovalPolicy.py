# coding: utf-8


"""
IGNORE:
    Nutanix Security APIs

    Manage security features, such as encryption, certificates, or platform hardening.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_security_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_security_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_security_py_client.models.security.v4.management.ApproverGroup import ApproverGroup  # noqa: F401,E501
from ntnx_security_py_client.models.security.v4.management.SecuredPolicy import SecuredPolicy  # noqa: F401,E501

class ApprovalPolicy(ExternalizableAbstractModel):

    """Specification of the configured approval policy.

    :param name: (:attr:`name`) Name of the approval policy.
    :type name: required
     min=4 chars, max=199 chars
    
    :param description: (:attr:`description`) Description of the approval policy.
    :type description: 
     max=499 chars
    
    :param approver_groups: (:attr:`approver_groups`) List of approver sets.
    :type approver_groups: required
    
    
    :param secured_policies: (:attr:`secured_policies`) List of secured policies.
    :type secured_policies: 
    
    
    :param last_updated_by: (:attr:`last_updated_by`) The user who last updated the approval policy.
    :type last_updated_by: 
    
    
    :param last_update_time: (:attr:`last_update_time`) The timestamp of the last update of the approval policy.
    :type last_update_time: 
    
    
    :param is_update_pending: (:attr:`is_update_pending`) Current update status of the approval request update.
    :type is_update_pending: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'approver_groups': 'list[security.v4.management.ApproverGroup]',
        'secured_policies': 'list[security.v4.management.SecuredPolicy]',
        'last_updated_by': 'str',
        'last_update_time': 'datetime',
        'is_update_pending': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'approver_groups': 'approverGroups',
        'secured_policies': 'securedPolicies',
        'last_updated_by': 'lastUpdatedBy',
        'last_update_time': 'lastUpdateTime',
        'is_update_pending': 'isUpdatePending',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, approver_groups=None, secured_policies=None, last_updated_by=None, last_update_time=None, is_update_pending=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__approver_groups = None
        self.__secured_policies = None
        self.__last_updated_by = None
        self.__last_update_time = None
        self.__is_update_pending = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        self.__approver_groups = approver_groups
        if secured_policies is not None:
            self.__secured_policies = secured_policies
        if last_updated_by is not None:
            self.__last_updated_by = last_updated_by
        if last_update_time is not None:
            self.__last_update_time = last_update_time
        if is_update_pending is not None:
            self.__is_update_pending = is_update_pending

    def _initialize_object_type(self):
        return 'security.v4.management.ApprovalPolicy'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the approval policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 199:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `199`")  # noqa: E501
        if name is not None and len(name) < 4:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `4`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Description of the approval policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 499:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `499`")  # noqa: E501

        self.__description = description

    @property
    def approver_groups(self):
        """
        List of approver sets.

        :type:
             list[ :class:`~ntnx_security_py_client.models.security.v4.management.ApproverGroup` ]
        """  # noqa: E501
        return self.__approver_groups

    @approver_groups.setter
    def approver_groups(self, approver_groups):
        if approver_groups is None:
            raise ValueError("Invalid value for `approver_groups`, must not be `None`")  # noqa: E501

        self.__approver_groups = approver_groups

    @property
    def secured_policies(self):
        """
        List of secured policies.

        :type:
             list[ :class:`~ntnx_security_py_client.models.security.v4.management.SecuredPolicy` ]
        """  # noqa: E501
        return self.__secured_policies

    @secured_policies.setter
    def secured_policies(self, secured_policies):

        self.__secured_policies = secured_policies

    @property
    def last_updated_by(self):
        """
        The user who last updated the approval policy.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):

        self.__last_updated_by = last_updated_by

    @property
    def last_update_time(self):
        """
        The timestamp of the last update of the approval policy.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):

        self.__last_update_time = last_update_time

    @property
    def is_update_pending(self):
        """
        Current update status of the approval request update.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_update_pending

    @is_update_pending.setter
    def is_update_pending(self, is_update_pending):

        self.__is_update_pending = is_update_pending

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ApprovalPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApprovalPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

