# coding: utf-8


"""
IGNORE:
    Nutanix Security APIs

    Manage security features, such as encryption, certificates, or platform hardening.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_security_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_security_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class SecurityConfigVisibilitySetting(ExternalizableAbstractModel):

    """Contains the configuration for PC UI visibility status of all security configs settings.

    :param is_high_strength_password_visible: (:attr:`is_high_strength_password_visible`) Represents the visibility of high strength password state.
    :type is_high_strength_password_visible: 
    
    
    :param is_aide_visible: (:attr:`is_aide_visible`) Represents the visibility of aide service state.
    :type is_aide_visible: 
    
    
    :param is_scma_visible: (:attr:`is_scma_visible`) Represents the visibility of security configuration management automation state.
    :type is_scma_visible: 
    
    
    :param is_secure_boot_visible: (:attr:`is_secure_boot_visible`) Represents the visibility of host secure boot state.
    :type is_secure_boot_visible: 
    
    
    :param is_network_segmentation_visible: (:attr:`is_network_segmentation_visible`) Represents the visibility of network segmentation state.
    :type is_network_segmentation_visible: 
    
    
    :param is_cluster_lockdown_visible: (:attr:`is_cluster_lockdown_visible`) Represents the visibility of cluster lockdown state.
    :type is_cluster_lockdown_visible: 
    
    
    :param is_log_forwarding_visible: (:attr:`is_log_forwarding_visible`) Represents the visibility of log forwarding state.
    :type is_log_forwarding_visible: 
    
    
    :param is_defense_consent_banner_visible: (:attr:`is_defense_consent_banner_visible`) Represents the visibility of banner state.
    :type is_defense_consent_banner_visible: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'is_high_strength_password_visible': 'bool',
        'is_aide_visible': 'bool',
        'is_scma_visible': 'bool',
        'is_secure_boot_visible': 'bool',
        'is_network_segmentation_visible': 'bool',
        'is_cluster_lockdown_visible': 'bool',
        'is_log_forwarding_visible': 'bool',
        'is_defense_consent_banner_visible': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'is_high_strength_password_visible': 'isHighStrengthPasswordVisible',
        'is_aide_visible': 'isAideVisible',
        'is_scma_visible': 'isScmaVisible',
        'is_secure_boot_visible': 'isSecureBootVisible',
        'is_network_segmentation_visible': 'isNetworkSegmentationVisible',
        'is_cluster_lockdown_visible': 'isClusterLockdownVisible',
        'is_log_forwarding_visible': 'isLogForwardingVisible',
        'is_defense_consent_banner_visible': 'isDefenseConsentBannerVisible',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, is_high_strength_password_visible=None, is_aide_visible=None, is_scma_visible=None, is_secure_boot_visible=None, is_network_segmentation_visible=None, is_cluster_lockdown_visible=None, is_log_forwarding_visible=None, is_defense_consent_banner_visible=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__is_high_strength_password_visible = None
        self.__is_aide_visible = None
        self.__is_scma_visible = None
        self.__is_secure_boot_visible = None
        self.__is_network_segmentation_visible = None
        self.__is_cluster_lockdown_visible = None
        self.__is_log_forwarding_visible = None
        self.__is_defense_consent_banner_visible = None
        self.discriminator = None
        if is_high_strength_password_visible is not None:
            self.__is_high_strength_password_visible = is_high_strength_password_visible
        if is_aide_visible is not None:
            self.__is_aide_visible = is_aide_visible
        if is_scma_visible is not None:
            self.__is_scma_visible = is_scma_visible
        if is_secure_boot_visible is not None:
            self.__is_secure_boot_visible = is_secure_boot_visible
        if is_network_segmentation_visible is not None:
            self.__is_network_segmentation_visible = is_network_segmentation_visible
        if is_cluster_lockdown_visible is not None:
            self.__is_cluster_lockdown_visible = is_cluster_lockdown_visible
        if is_log_forwarding_visible is not None:
            self.__is_log_forwarding_visible = is_log_forwarding_visible
        if is_defense_consent_banner_visible is not None:
            self.__is_defense_consent_banner_visible = is_defense_consent_banner_visible

    def _initialize_object_type(self):
        return 'security.v4.config.SecurityConfigVisibilitySetting'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def is_high_strength_password_visible(self):
        """
        Represents the visibility of high strength password state.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_high_strength_password_visible

    @is_high_strength_password_visible.setter
    def is_high_strength_password_visible(self, is_high_strength_password_visible):

        self.__is_high_strength_password_visible = is_high_strength_password_visible

    @property
    def is_aide_visible(self):
        """
        Represents the visibility of aide service state.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_aide_visible

    @is_aide_visible.setter
    def is_aide_visible(self, is_aide_visible):

        self.__is_aide_visible = is_aide_visible

    @property
    def is_scma_visible(self):
        """
        Represents the visibility of security configuration management automation state.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_scma_visible

    @is_scma_visible.setter
    def is_scma_visible(self, is_scma_visible):

        self.__is_scma_visible = is_scma_visible

    @property
    def is_secure_boot_visible(self):
        """
        Represents the visibility of host secure boot state.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_secure_boot_visible

    @is_secure_boot_visible.setter
    def is_secure_boot_visible(self, is_secure_boot_visible):

        self.__is_secure_boot_visible = is_secure_boot_visible

    @property
    def is_network_segmentation_visible(self):
        """
        Represents the visibility of network segmentation state.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_network_segmentation_visible

    @is_network_segmentation_visible.setter
    def is_network_segmentation_visible(self, is_network_segmentation_visible):

        self.__is_network_segmentation_visible = is_network_segmentation_visible

    @property
    def is_cluster_lockdown_visible(self):
        """
        Represents the visibility of cluster lockdown state.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_cluster_lockdown_visible

    @is_cluster_lockdown_visible.setter
    def is_cluster_lockdown_visible(self, is_cluster_lockdown_visible):

        self.__is_cluster_lockdown_visible = is_cluster_lockdown_visible

    @property
    def is_log_forwarding_visible(self):
        """
        Represents the visibility of log forwarding state.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_log_forwarding_visible

    @is_log_forwarding_visible.setter
    def is_log_forwarding_visible(self, is_log_forwarding_visible):

        self.__is_log_forwarding_visible = is_log_forwarding_visible

    @property
    def is_defense_consent_banner_visible(self):
        """
        Represents the visibility of banner state.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_defense_consent_banner_visible

    @is_defense_consent_banner_visible.setter
    def is_defense_consent_banner_visible(self, is_defense_consent_banner_visible):

        self.__is_defense_consent_banner_visible = is_defense_consent_banner_visible

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(SecurityConfigVisibilitySetting, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityConfigVisibilitySetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

