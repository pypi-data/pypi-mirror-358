# coding: utf-8


"""
IGNORE:
    Nutanix Security APIs

    Manage security features, such as encryption, certificates, or platform hardening.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class AzureAccessInformation(object):

    """Access information for the Azure Key Vault.

    :param endpoint_url: (:attr:`endpoint_url`) Endpoint URL for the Azure Key Vault.
    :type endpoint_url: required
     max=1024 chars
    
    :param key_id: (:attr:`key_id`) Master key identifier for the Azure Key Vault.
    :type key_id: required
     max=256 chars
    
    :param tenant_id: (:attr:`tenant_id`) Tetant identifier for the Azure Key Vault.
    :type tenant_id: required
     max=256 chars
    
    :param client_id: (:attr:`client_id`) Client identifier for the Azure Key Vault.
    :type client_id: required
     max=256 chars
    
    :param client_secret: (:attr:`client_secret`) Client secret for the Azure Key Vault.
    :type client_secret: required
    
    
    :param truncated_client_secret: (:attr:`truncated_client_secret`) Truncated client secret for the Azure Key Vault.
    :type truncated_client_secret: 
     min=8 chars, max=256 chars
    
    :param credential_expiry_date: (:attr:`credential_expiry_date`) When the client secret is going to expire.
    :type credential_expiry_date: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'endpoint_url': 'str',
        'key_id': 'str',
        'tenant_id': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'truncated_client_secret': 'str',
        'credential_expiry_date': 'date',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'endpoint_url': 'endpointUrl',
        'key_id': 'keyId',
        'tenant_id': 'tenantId',
        'client_id': 'clientId',
        'client_secret': 'clientSecret',
        'truncated_client_secret': 'truncatedClientSecret',
        'credential_expiry_date': 'credentialExpiryDate',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, endpoint_url=None, key_id=None, tenant_id=None, client_id=None, client_secret=None, truncated_client_secret=None, credential_expiry_date=None, *args, **kwargs):  # noqa: E501
        self.__endpoint_url = None
        self.__key_id = None
        self.__tenant_id = None
        self.__client_id = None
        self.__client_secret = None
        self.__truncated_client_secret = None
        self.__credential_expiry_date = None
        self.discriminator = None
        self.__endpoint_url = endpoint_url
        self.__key_id = key_id
        self.__tenant_id = tenant_id
        self.__client_id = client_id
        self.__client_secret = client_secret
        if truncated_client_secret is not None:
            self.__truncated_client_secret = truncated_client_secret
        self.__credential_expiry_date = credential_expiry_date
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'security.v4.config.AzureAccessInformation'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def endpoint_url(self):
        """
        Endpoint URL for the Azure Key Vault.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        if endpoint_url is None:
            raise ValueError("Invalid value for `endpoint_url`, must not be `None`")  # noqa: E501
        if endpoint_url is not None and len(endpoint_url) > 1024:
            raise ValueError("Invalid value for `endpoint_url`, length must be less than or equal to `1024`")  # noqa: E501
        if endpoint_url is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', endpoint_url):  # noqa: E501
            raise ValueError(r"Invalid value for `endpoint_url`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__endpoint_url = endpoint_url

    @property
    def key_id(self):
        """
        Master key identifier for the Azure Key Vault.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__key_id

    @key_id.setter
    def key_id(self, key_id):
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")  # noqa: E501
        if key_id is not None and len(key_id) > 256:
            raise ValueError("Invalid value for `key_id`, length must be less than or equal to `256`")  # noqa: E501

        self.__key_id = key_id

    @property
    def tenant_id(self):
        """
        Tetant identifier for the Azure Key Vault.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501
        if tenant_id is not None and len(tenant_id) > 256:
            raise ValueError("Invalid value for `tenant_id`, length must be less than or equal to `256`")  # noqa: E501

        self.__tenant_id = tenant_id

    @property
    def client_id(self):
        """
        Client identifier for the Azure Key Vault.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__client_id

    @client_id.setter
    def client_id(self, client_id):
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501
        if client_id is not None and len(client_id) > 256:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `256`")  # noqa: E501

        self.__client_id = client_id

    @property
    def client_secret(self):
        """
        Client secret for the Azure Key Vault.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self.__client_secret = client_secret

    @property
    def truncated_client_secret(self):
        """
        Truncated client secret for the Azure Key Vault.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__truncated_client_secret

    @truncated_client_secret.setter
    def truncated_client_secret(self, truncated_client_secret):
        if truncated_client_secret is not None and len(truncated_client_secret) > 256:
            raise ValueError("Invalid value for `truncated_client_secret`, length must be less than or equal to `256`")  # noqa: E501
        if truncated_client_secret is not None and len(truncated_client_secret) < 8:
            raise ValueError("Invalid value for `truncated_client_secret`, length must be greater than or equal to `8`")  # noqa: E501

        self.__truncated_client_secret = truncated_client_secret

    @property
    def credential_expiry_date(self):
        """
        When the client secret is going to expire.

        :type:
                :class:`~date`
        """  # noqa: E501
        return self.__credential_expiry_date

    @credential_expiry_date.setter
    def credential_expiry_date(self, credential_expiry_date):
        if credential_expiry_date is None:
            raise ValueError("Invalid value for `credential_expiry_date`, must not be `None`")  # noqa: E501

        self.__credential_expiry_date = credential_expiry_date

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AzureAccessInformation, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureAccessInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

