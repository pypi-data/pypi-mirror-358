# coding: utf-8


"""
IGNORE:
    Nutanix Security APIs

    Manage security features, such as encryption, certificates, or platform hardening.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_security_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_security_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_security_py_client.models.security.v4.common.Timescale import Timescale  # noqa: F401,E501
from ntnx_security_py_client.models.security.v4.report.IssueSummary import IssueSummary  # noqa: F401,E501

class Summary(ExternalizableAbstractModel):

    """Number of security related issues for a single cluster

    :param cluster_ext_id: (:attr:`cluster_ext_id`) UUID of the cluster.
    :type cluster_ext_id: 
    
    
    :param security_config_summary: (:attr:`security_config_summary`) 
    :type security_config_summary: 
    
    
    :param stig_summary: (:attr:`stig_summary`) 
    :type stig_summary: 
    
    
    :param vulnerabilities_summary: (:attr:`vulnerabilities_summary`) 
    :type vulnerabilities_summary: 
    
    
    :param password_summary: (:attr:`password_summary`) 
    :type password_summary: 
    
    
    :param trend_type: (:attr:`trend_type`) 
    :type trend_type: 
    
    
    :param last_refresh_time: (:attr:`last_refresh_time`) The date the dashboard information was last refreshed
    :type last_refresh_time: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cluster_ext_id': 'str',
        'security_config_summary': 'security.v4.report.IssueSummary',
        'stig_summary': 'security.v4.report.IssueSummary',
        'vulnerabilities_summary': 'security.v4.report.IssueSummary',
        'password_summary': 'security.v4.report.IssueSummary',
        'trend_type': 'security.v4.common.Timescale',
        'last_refresh_time': 'datetime',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cluster_ext_id': 'clusterExtId',
        'security_config_summary': 'securityConfigSummary',
        'stig_summary': 'stigSummary',
        'vulnerabilities_summary': 'vulnerabilitiesSummary',
        'password_summary': 'passwordSummary',
        'trend_type': 'trendType',
        'last_refresh_time': 'lastRefreshTime',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cluster_ext_id=None, security_config_summary=None, stig_summary=None, vulnerabilities_summary=None, password_summary=None, trend_type=None, last_refresh_time=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__cluster_ext_id = None
        self.__security_config_summary = None
        self.__stig_summary = None
        self.__vulnerabilities_summary = None
        self.__password_summary = None
        self.__trend_type = None
        self.__last_refresh_time = None
        self.discriminator = None
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        if security_config_summary is not None:
            self.__security_config_summary = security_config_summary
        if stig_summary is not None:
            self.__stig_summary = stig_summary
        if vulnerabilities_summary is not None:
            self.__vulnerabilities_summary = vulnerabilities_summary
        if password_summary is not None:
            self.__password_summary = password_summary
        if trend_type is not None:
            self.__trend_type = trend_type
        if last_refresh_time is not None:
            self.__last_refresh_time = last_refresh_time

    def _initialize_object_type(self):
        return 'security.v4.report.Summary'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def cluster_ext_id(self):
        """
        UUID of the cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def security_config_summary(self):
        """
        

        :type:
            :class:`~ntnx_security_py_client.models.security.v4.report.IssueSummary`
        """  # noqa: E501
        return self.__security_config_summary

    @security_config_summary.setter
    def security_config_summary(self, security_config_summary):

        self.__security_config_summary = security_config_summary

    @property
    def stig_summary(self):
        """
        

        :type:
            :class:`~ntnx_security_py_client.models.security.v4.report.IssueSummary`
        """  # noqa: E501
        return self.__stig_summary

    @stig_summary.setter
    def stig_summary(self, stig_summary):

        self.__stig_summary = stig_summary

    @property
    def vulnerabilities_summary(self):
        """
        

        :type:
            :class:`~ntnx_security_py_client.models.security.v4.report.IssueSummary`
        """  # noqa: E501
        return self.__vulnerabilities_summary

    @vulnerabilities_summary.setter
    def vulnerabilities_summary(self, vulnerabilities_summary):

        self.__vulnerabilities_summary = vulnerabilities_summary

    @property
    def password_summary(self):
        """
        

        :type:
            :class:`~ntnx_security_py_client.models.security.v4.report.IssueSummary`
        """  # noqa: E501
        return self.__password_summary

    @password_summary.setter
    def password_summary(self, password_summary):

        self.__password_summary = password_summary

    @property
    def trend_type(self):
        """
        

        :type:
            :class:`~ntnx_security_py_client.models.security.v4.common.Timescale`
        """  # noqa: E501
        return self.__trend_type

    @trend_type.setter
    def trend_type(self, trend_type):

        self.__trend_type = trend_type

    @property
    def last_refresh_time(self):
        """
        The date the dashboard information was last refreshed

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__last_refresh_time

    @last_refresh_time.setter
    def last_refresh_time(self, last_refresh_time):

        self.__last_refresh_time = last_refresh_time

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Summary, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Summary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

