# coding: utf-8


"""
IGNORE:
    Nutanix Security APIs

    Manage security features, such as encryption, certificates, or platform hardening.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_security_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_security_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_security_py_client.models.security.v4.report.SoftwareType import SoftwareType  # noqa: F401,E501

class VulnerabilitySummary(ExternalizableAbstractModel):

    """Cluster vulnerability report

    :param cluster_ext_id: (:attr:`cluster_ext_id`) UUID of the cluster.
    :type cluster_ext_id: 
    
    
    :param installed_version: (:attr:`installed_version`) AOS version on that cluster
    :type installed_version: 
     max=199 chars
    
    :param cve_ids: (:attr:`cve_ids`) The CVE ids associated with this CESA
    :type cve_ids: 
    
    
    :param software_type: (:attr:`software_type`) 
    :type software_type: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cluster_ext_id': 'str',
        'installed_version': 'str',
        'cve_ids': 'list[str]',
        'software_type': 'security.v4.report.SoftwareType',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cluster_ext_id': 'clusterExtId',
        'installed_version': 'installedVersion',
        'cve_ids': 'cveIds',
        'software_type': 'softwareType',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cluster_ext_id=None, installed_version=None, cve_ids=None, software_type=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__cluster_ext_id = None
        self.__installed_version = None
        self.__cve_ids = None
        self.__software_type = None
        self.discriminator = None
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        if installed_version is not None:
            self.__installed_version = installed_version
        if cve_ids is not None:
            self.__cve_ids = cve_ids
        if software_type is not None:
            self.__software_type = software_type

    def _initialize_object_type(self):
        return 'security.v4.report.VulnerabilitySummary'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def cluster_ext_id(self):
        """
        UUID of the cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def installed_version(self):
        """
        AOS version on that cluster

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__installed_version

    @installed_version.setter
    def installed_version(self, installed_version):
        if installed_version is not None and len(installed_version) > 199:
            raise ValueError("Invalid value for `installed_version`, length must be less than or equal to `199`")  # noqa: E501

        self.__installed_version = installed_version

    @property
    def cve_ids(self):
        """
        The CVE ids associated with this CESA

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__cve_ids

    @cve_ids.setter
    def cve_ids(self, cve_ids):

        self.__cve_ids = cve_ids

    @property
    def software_type(self):
        """
        

        :type:
            :class:`~ntnx_security_py_client.models.security.v4.report.SoftwareType`
        """  # noqa: E501
        return self.__software_type

    @software_type.setter
    def software_type(self, software_type):

        self.__software_type = software_type

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VulnerabilitySummary, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilitySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

