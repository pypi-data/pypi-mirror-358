# coding: utf-8


"""
IGNORE:
    Nutanix Security APIs

    Manage security features, such as encryption, certificates, or platform hardening.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_security_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_security_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class StigSummary(ExternalizableAbstractModel):

    """Cluster STIG summary.

    :param cluster_ext_id: (:attr:`cluster_ext_id`) UUID of the cluster.
    :type cluster_ext_id: 
    
    
    :param passed_count: (:attr:`passed_count`) Count of total resources in the cluster.
    :type passed_count: 
    
    
    :param failed_count: (:attr:`failed_count`) Count of resources with failed STIG tests.
    :type failed_count: 
    
    
    :param not_applicable_count: (:attr:`not_applicable_count`) Count of resources with STIG test not applicable.
    :type not_applicable_count: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'cluster_ext_id': 'str',
        'passed_count': 'int',
        'failed_count': 'int',
        'not_applicable_count': 'int',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cluster_ext_id': 'clusterExtId',
        'passed_count': 'passedCount',
        'failed_count': 'failedCount',
        'not_applicable_count': 'notApplicableCount',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cluster_ext_id=None, passed_count=None, failed_count=None, not_applicable_count=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__cluster_ext_id = None
        self.__passed_count = None
        self.__failed_count = None
        self.__not_applicable_count = None
        self.discriminator = None
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        if passed_count is not None:
            self.__passed_count = passed_count
        if failed_count is not None:
            self.__failed_count = failed_count
        if not_applicable_count is not None:
            self.__not_applicable_count = not_applicable_count

    def _initialize_object_type(self):
        return 'security.v4.report.StigSummary'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def cluster_ext_id(self):
        """
        UUID of the cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def passed_count(self):
        """
        Count of total resources in the cluster.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__passed_count

    @passed_count.setter
    def passed_count(self, passed_count):

        self.__passed_count = passed_count

    @property
    def failed_count(self):
        """
        Count of resources with failed STIG tests.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__failed_count

    @failed_count.setter
    def failed_count(self, failed_count):

        self.__failed_count = failed_count

    @property
    def not_applicable_count(self):
        """
        Count of resources with STIG test not applicable.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__not_applicable_count

    @not_applicable_count.setter
    def not_applicable_count(self, not_applicable_count):

        self.__not_applicable_count = not_applicable_count

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(StigSummary, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StigSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

