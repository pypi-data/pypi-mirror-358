# coding: utf-8


"""
IGNORE:
    Nutanix Security APIs

    Manage security features, such as encryption, certificates, or platform hardening.  # noqa: E501

    OpenAPI spec version: 4.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_security_py_client.models.security.v4.management.EventType import EventType  # noqa: F401,E501
from ntnx_security_py_client.models.security.v4.management.SecuredEntityType import SecuredEntityType  # noqa: F401,E501

class SecurityValidationSpec(object):

    """Specifications required to trigger a security validation job.

    :param secured_entity_type: (:attr:`secured_entity_type`) 
    :type secured_entity_type: required
    
    
    :param secured_entity_name: (:attr:`secured_entity_name`) Name of the secured entity.
    :type secured_entity_name: required
     min=4 chars, max=199 chars
    
    :param secured_entity_ext_id: (:attr:`secured_entity_ext_id`) UUID of the secured entity.
    :type secured_entity_ext_id: required
    
    
    :param event_type: (:attr:`event_type`) 
    :type event_type: required
    
    
    :param secured_policy_ext_id: (:attr:`secured_policy_ext_id`) UUID of secured policy
    :type secured_policy_ext_id: 
    
    
    :param secured_entity_location: (:attr:`secured_entity_location`) Location of the secured entity.
    :type secured_entity_location: 
    
    
    :param requester_ext_id: (:attr:`requester_ext_id`) IAM UUID of the requester.
    :type requester_ext_id: required
    
    
    :param fully_qualified_secured_entity_name: (:attr:`fully_qualified_secured_entity_name`) Qualified entity type. For example dataprotection:config:recovery-point
    :type fully_qualified_secured_entity_name: 
     max=199 chars
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'secured_entity_type': 'security.v4.management.SecuredEntityType',
        'secured_entity_name': 'str',
        'secured_entity_ext_id': 'str',
        'event_type': 'security.v4.management.EventType',
        'secured_policy_ext_id': 'str',
        'secured_entity_location': 'str',
        'requester_ext_id': 'str',
        'fully_qualified_secured_entity_name': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'secured_entity_type': 'securedEntityType',
        'secured_entity_name': 'securedEntityName',
        'secured_entity_ext_id': 'securedEntityExtId',
        'event_type': 'eventType',
        'secured_policy_ext_id': 'securedPolicyExtId',
        'secured_entity_location': 'securedEntityLocation',
        'requester_ext_id': 'requesterExtId',
        'fully_qualified_secured_entity_name': 'fullyQualifiedSecuredEntityName',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, secured_entity_type=None, secured_entity_name=None, secured_entity_ext_id=None, event_type=None, secured_policy_ext_id=None, secured_entity_location=None, requester_ext_id=None, fully_qualified_secured_entity_name=None, *args, **kwargs):  # noqa: E501
        self.__secured_entity_type = None
        self.__secured_entity_name = None
        self.__secured_entity_ext_id = None
        self.__event_type = None
        self.__secured_policy_ext_id = None
        self.__secured_entity_location = None
        self.__requester_ext_id = None
        self.__fully_qualified_secured_entity_name = None
        self.discriminator = None
        self.__secured_entity_type = secured_entity_type
        self.__secured_entity_name = secured_entity_name
        self.__secured_entity_ext_id = secured_entity_ext_id
        self.__event_type = event_type
        if secured_policy_ext_id is not None:
            self.__secured_policy_ext_id = secured_policy_ext_id
        if secured_entity_location is not None:
            self.__secured_entity_location = secured_entity_location
        self.__requester_ext_id = requester_ext_id
        if fully_qualified_secured_entity_name is not None:
            self.__fully_qualified_secured_entity_name = fully_qualified_secured_entity_name
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'security.v4.management.SecurityValidationSpec'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def secured_entity_type(self):
        """
        

        :type:
            :class:`~ntnx_security_py_client.models.security.v4.management.SecuredEntityType`
        """  # noqa: E501
        return self.__secured_entity_type

    @secured_entity_type.setter
    def secured_entity_type(self, secured_entity_type):
        if secured_entity_type is None:
            raise ValueError("Invalid value for `secured_entity_type`, must not be `None`")  # noqa: E501

        self.__secured_entity_type = secured_entity_type

    @property
    def secured_entity_name(self):
        """
        Name of the secured entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__secured_entity_name

    @secured_entity_name.setter
    def secured_entity_name(self, secured_entity_name):
        if secured_entity_name is None:
            raise ValueError("Invalid value for `secured_entity_name`, must not be `None`")  # noqa: E501
        if secured_entity_name is not None and len(secured_entity_name) > 199:
            raise ValueError("Invalid value for `secured_entity_name`, length must be less than or equal to `199`")  # noqa: E501
        if secured_entity_name is not None and len(secured_entity_name) < 4:
            raise ValueError("Invalid value for `secured_entity_name`, length must be greater than or equal to `4`")  # noqa: E501

        self.__secured_entity_name = secured_entity_name

    @property
    def secured_entity_ext_id(self):
        """
        UUID of the secured entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__secured_entity_ext_id

    @secured_entity_ext_id.setter
    def secured_entity_ext_id(self, secured_entity_ext_id):
        if secured_entity_ext_id is None:
            raise ValueError("Invalid value for `secured_entity_ext_id`, must not be `None`")  # noqa: E501
        if secured_entity_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', secured_entity_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `secured_entity_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__secured_entity_ext_id = secured_entity_ext_id

    @property
    def event_type(self):
        """
        

        :type:
            :class:`~ntnx_security_py_client.models.security.v4.management.EventType`
        """  # noqa: E501
        return self.__event_type

    @event_type.setter
    def event_type(self, event_type):
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501

        self.__event_type = event_type

    @property
    def secured_policy_ext_id(self):
        """
        UUID of secured policy

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__secured_policy_ext_id

    @secured_policy_ext_id.setter
    def secured_policy_ext_id(self, secured_policy_ext_id):
        if secured_policy_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', secured_policy_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `secured_policy_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__secured_policy_ext_id = secured_policy_ext_id

    @property
    def secured_entity_location(self):
        """
        Location of the secured entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__secured_entity_location

    @secured_entity_location.setter
    def secured_entity_location(self, secured_entity_location):
        if secured_entity_location is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', secured_entity_location):  # noqa: E501
            raise ValueError(r"Invalid value for `secured_entity_location`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__secured_entity_location = secured_entity_location

    @property
    def requester_ext_id(self):
        """
        IAM UUID of the requester.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__requester_ext_id

    @requester_ext_id.setter
    def requester_ext_id(self, requester_ext_id):
        if requester_ext_id is None:
            raise ValueError("Invalid value for `requester_ext_id`, must not be `None`")  # noqa: E501
        if requester_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', requester_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `requester_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__requester_ext_id = requester_ext_id

    @property
    def fully_qualified_secured_entity_name(self):
        """
        Qualified entity type. For example dataprotection:config:recovery-point

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__fully_qualified_secured_entity_name

    @fully_qualified_secured_entity_name.setter
    def fully_qualified_secured_entity_name(self, fully_qualified_secured_entity_name):
        if fully_qualified_secured_entity_name is not None and len(fully_qualified_secured_entity_name) > 199:
            raise ValueError("Invalid value for `fully_qualified_secured_entity_name`, length must be less than or equal to `199`")  # noqa: E501

        self.__fully_qualified_secured_entity_name = fully_qualified_secured_entity_name

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(SecurityValidationSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityValidationSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

