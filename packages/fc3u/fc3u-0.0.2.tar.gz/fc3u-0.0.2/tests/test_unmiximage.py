# -*- coding: utf-8 -*-

__author__ = "Robert Denham"
__copyright__ = "Robert Denham"
__license__ = "mit"

import numpy

from fractionalcover3.unmixcover import unmix_fractional_cover
from fractionalcover3 import data


def test_unmix_l7dbg_tf():
    """
    Test that we get a result for the tensorflow method.

    """
    b1 = numpy.fromstring(""" 562 568 576 553 520 478 455 459 549 454 566 560 548 555 568 498 508 529 479 493 528 541 542 531 529 544 525 550 503 446 553 543 543 529 508 529 508 459 504 446 525 519 542 525 553 507 557 510 489 483 497 517 518 522 543 503 536 485 484 522 499 514 535 548 490 444 502 554 499 529 541 525 501 522 473 470 519 526 466 538 561 492 510 485 503 524 549 554 518 514 524 465 461 508 482 484 515 532 524 491""", dtype=int, sep=' ').reshape(10,10)
    b2 = numpy.fromstring(""" 825 860 899 875 789 770 723 729 745 696 880 842 867 881 789 763 729 804 723 705 851 802 784 832 804 763 771 772 723 681 804 784 784 827 827 778 752 729 723 705 771 784 759 797 875 752 734 783 764 729 760 780 784 791 833 745 790 757 782 778 763 774 722 767 700 723 745 778 738 778 771 745 791 765 759 753 785 746 700 752 790 747 757 809 796 818 845 853 759 797 745 765 708 778 802 778 791 809 770 723""", dtype=int, sep=' ').reshape(10,10)
    b3 = numpy.fromstring(""" 1088 1169 1232 1169 1062 946 842 936 1012 927 1161 1142 1222 1177 1062 960 956 997 989 862 1189 1112 1055 1134 1084 1002 969 989 946 863 1169 1036 1014 1126 1084 1041 977 977 927 863 1054 994 1055 1012 1084 1041 942 942 971 955 973 1048 995 1022 1057 989 951 942 961 1034 1001 981 996 1004 977 957 904 1021 960 1041 1023 988 1003 980 995 986 973 1011 855 1027 1014 979 1005 942 987 1053 1054 1040 995 1022 989 928 962 998 976 978 1038 1028 989 957""", dtype=int, sep=' ').reshape(10,10)
    b4 = numpy.fromstring(""" 2056 2087 2121 2080 1904 1785 1738 1846 1830 1785 2115 2079 2104 2095 1949 1861 1800 1843 1830 1741 2164 2008 1936 2046 1988 1907 1830 1827 1876 1784 2078 1979 1979 2032 1939 1939 1843 1796 1827 1742 2014 1979 1982 2014 2034 1895 1856 1810 1876 1846 1938 1963 1937 1950 1890 1924 1923 1812 1904 2050 1904 1863 1903 1903 1814 1861 1923 1893 1904 1988 1981 1921 1950 1950 1937 1918 1935 1873 1858 1965 1920 1888 1950 1999 2009 2012 1968 2028 1937 1907 1923 1826 1903 1936 1979 1982 1968 1996 1969 1861""", dtype=int, sep=' ').reshape(10,10)
    b5 = numpy.fromstring(""" 2951 2985 3068 3143 2963 2767 2720 2794 2762 2767 3119 3093 3036 3064 2879 2801 2772 2765 2762 2661 3040 2900 2792 3015 2929 2822 2805 2757 2762 2616 3072 2891 2703 2966 2944 2880 2786 2743 2651 2579 2932 2870 2771 2932 2993 2842 2770 2791 2828 2771 2836 2797 2793 2856 2831 2832 2828 2819 2860 2884 2731 2718 2711 2768 2650 2613 2703 2665 2627 2799 2822 2719 2772 2730 2709 2676 2664 2651 2507 2682 2689 2606 2683 2754 2754 2739 2741 2786 2605 2514 2575 2515 2467 2744 2719 2658 2712 2683 2661 2511""", dtype=int, sep=' ').reshape(10,10)
    b6 = numpy.fromstring(""" 2187 2290 2403 2406 2227 2005 2068 1963 2006 2005 2327 2278 2317 2364 2227 2042 2027 2085 2006 1943 2209 2242 2147 2300 2217 2042 2068 2064 1943 1880 2280 2143 2020 2280 2153 2153 2085 1958 1939 1883 2194 2143 2086 2194 2217 2090 2104 2040 2135 2026 2087 2060 2025 2040 2083 2068 2135 2044 2106 1977 1980 1985 1921 2038 1921 1923 2005 1900 1856 1963 2017 2005 1979 1979 2025 2000 1899 1939 1741 1883 2001 1955 1976 1981 1938 2004 2006 2211 1963 1805 1942 1872 1785 2022 2020 1959 2002 2040 1942 1863""", dtype=int, sep=' ').reshape(10,10)

    inref = numpy.stack([b1, b2, b3, b4, b5, b6], axis=0) * 0.0001
    # we'll use the default model
    fractions = unmix_fractional_cover(inref,
                                       fc_model=data.get_model(),
                                       inNull=100, outNull=-10
                                       )
