[project]
name = "burnysc2"
version = "7.1.0"
description = "A StarCraft II API Client for Python 3"
authors = [{ name = "BurnySc2", email = "gamingburny@gmail.com" }]
requires-python = ">=3.9, <3.14"
keywords = ["StarCraft", "StarCraft 2", "StarCraft II", "AI", "Bot"]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Games/Entertainment",
    "Topic :: Games/Entertainment :: Real Time Strategy",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS :: MacOS X",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
readme = "README.md"

dependencies = [
    "aiohttp>=3.11.10",
    "loguru>=0.7.3",
    "mpyq>=0.2.5",
    "numpy>=2.1.0; python_full_version >= '3.13'",
    "numpy>=2.0.0; python_full_version < '3.13'",
    "portpicker>=1.6.0",
    "protobuf<4.0.0",
    "s2clientprotocol>=5.0.14.93333.0",
    "scipy>=1.14.1; python_full_version >= '3.13'",
    "scipy>=1.7.1; python_full_version < '3.13'",
]

[dependency-groups]
dev = [
    "coverage>=7.6.9",
    "hypothesis>=6.122.3",
    "matplotlib>=3.9.4",
    "mypy>=1.13.0",
    "pillow>=11.0.0",
    "pre-commit>=4.0.1",
    "pyglet>=2.0.20",
    "pylint>=3.3.2",
    # Type checker
    "pyrefly>=0.21.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.0",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.0.0",
    "radon>=6.0.1",
    # Linter
    "ruff>=0.8.3",
    "sphinx-book-theme>=1.1.3",
    "sphinx>=7.4.7",
    "sphinx-autodoc-typehints>=2.3.0",
    "toml>=0.10.2",
    "yapf>=0.43.0",
]

[tool.setuptools]
license-files = []
package-dir = { sc2 = "sc2" }

[build-system]
# https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-a-build-backend
# https://setuptools.pypa.io/en/latest/userguide/package_discovery.html#custom-discovery
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project.urls]
Repository = "https://github.com/Burnysc2/python-sc2"
Documentation = "https://burnysc2.github.io/python-sc2"

[tool.yapf]
based_on_style = "pep8"
column_limit = 120
split_arguments_when_comma_terminated = true
dedent_closing_brackets = true
allow_split_before_dict_value = false

[tool.pyrefly]
project_includes = ["sc2", "examples", "test"]

[tool.ruff]
target-version = 'py310'
line-length = 120

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "C4",  # flake8-comprehensions
    "E",   # Error
    "F",   # pyflakes
    "BLE", # flake8-blind-except
    # "I",   # isort
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "W",   # Warning
    "Q",   # flake8-quotes
    "YTT", # flake8-2020
    "UP",  # pyupgrade
    #    "A",  # flake8-builtins
]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
pep8-naming.classmethod-decorators = ["pydantic.validator", "classmethod"]
ignore = [
    "E501",   # Line too long
    "E402",   # Module level import not at top of file
    "F841",   # Local variable `...` is assigned to but never used
    "BLE001", # Do not catch blind exception: `Exception`
    "N802",   # Function name `...` should be lowercase
    "N806",   # Variable `...` in function should be lowercase.
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "UP007",  # Use `X | Y` for type annotations
    "UP038",  # Use `X | Y` in `isinstance` call instead of `(X, Y)`
]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
# Remove once support for py3.8 and 3.9 is dropped
keep-runtime-typing = true

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator", "classmethod"]
