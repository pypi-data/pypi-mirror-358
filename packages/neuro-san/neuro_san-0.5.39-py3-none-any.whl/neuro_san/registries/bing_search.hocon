
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT

# The schema specifications for this file are documented here:
# https://github.com/cognizant-ai-lab/neuro-san/blob/main/docs/agent_hocon_reference.md

{
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # These tool definitions do not have to be in any particular order
        # How they are linked and call each other is defined within their
        # own specs.  This could be a graph, potentially even with cycles.

        # This first guy is the "Front Man".  He is identified as such because
        # he is the only one with no parameters in his function definition,
        # and therefore he needs to talk to the outside world to get things rolling.
        {
            "name": "searcher",
            "instructions": "Use your tool to respond to the inquiry.",
             "function": {
                "description": "Assist user with answer from internet."
             }
            "tools": ["search_tool"]
        },
        {
            "name": "search_tool",
            # The "toolbox" specifies which tool in the toolbox should be instantiated.
            # In this case, "bing_search" is chosen, which allows querying Bing for search results.

            # Note that tools in toolbox can be either langchain tools or coded tools
            
            # Documentation on the Bing search tool:
            # - LangChain's Bing Search Tool: https://python.langchain.com/docs/integrations/tools/bing_search
            # - Microsoft Bing Search API: https://learn.microsoft.com/en-us/bing/search-apis/
            
            "toolbox": "bing_search",

            # "args" contains the parameters that will be passed to the selected tool.
            # These arguments must align with the tool’s expected function signature.
            # 
            # For "bing_search", one of the key parameters is "num_results", which determines 
            # how many search results should be returned from Bing.
            # 
            # Other tools will have different required/optional arguments, so be sure to refer to
            # the tool’s documentation to understand what parameters can be configured.

            "args": {
                "num_results": 3
            }

            # -------------------------------------------------------------------------------
            # CURRENTLY AVAILABLE TOOLS
            # The following tools can be used as values for "toolbox":
            #
            # Langchain Tools
            #
            #   1️)  "bing_search" - Uses Bing to perform web searches.
            #   2️)  "tavily_search" - Uses Tavily for search queries.
            #   3️)  "requests_get" - Makes an HTTP GET request.
            #   4️)  "requests_post" - Makes an HTTP POST request.
            #   5️)  "requests_patch" - Makes an HTTP PATCH request.
            #   6️)  "requests_put" - Makes an HTTP PUT request.
            #   7️)  "requests_delete" - Makes an HTTP DELETE request.
            #   8)  "requests_toolkit" - Contains all of the request tools.
            #
            # Coded Tools
            #
            #   9)  "website_search" - Search internet with DuckduckgoSearch.
            #   10) "google_serper" - Search internet with Google Serper
            #   11) "rag_retriever" - Perform retrival-augmented generation on given urls.
            #
            # Each of these tools may require specific arguments in the "args" section.
            # Refer to the tool's documentation for more details.
            # -------------------------------------------------------------------------------

            # -------------------------------------------------------------------------------
            # EXTENSIBILITY
            # - Tool registration can be done without modifying core code by specifying the 
            #   tool configuration file (HOCON format) via the AGENT_TOOLBOX_INFO_FILE environment variable.
            # - The default tool configuration file is located at: 
            #   neuro_san/internals/run_context/langchain/toolbox/toolbox_info.hocon
            # -------------------------------------------------------------------------------

        }
    ]
}
