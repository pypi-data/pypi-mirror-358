"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from tofupilot_py import errors, models, utils
from tofupilot_py._hooks import HookContext
from tofupilot_py.types import OptionalNullable, UNSET
from tofupilot_py.utils import get_security_from_env
from typing import Any, List, Mapping, Optional, Union


class Runs(BaseSDK):
    def run_create(
        self,
        *,
        unit_under_test: Union[models.UnitUnderTest, models.UnitUnderTestTypedDict],
        run_passed: bool,
        procedure_id: str,
        serial_number: Optional[str] = None,
        part_number: Optional[str] = None,
        batch_number: Optional[str] = None,
        revision: Optional[str] = None,
        sub_units: Optional[
            Union[List[models.RunCreateSubUnit], List[models.RunCreateSubUnitTypedDict]]
        ] = None,
        outcome: Optional[models.Outcome] = None,
        procedure_version: OptionalNullable[str] = UNSET,
        started_at: OptionalNullable[datetime] = UNSET,
        duration: Optional[str] = "PT0S",
        ended_at: Optional[datetime] = None,
        docstring: Optional[str] = None,
        logs: Optional[Union[List[models.Log], List[models.LogTypedDict]]] = None,
        phases: Optional[Union[List[models.Phase], List[models.PhaseTypedDict]]] = None,
        steps: Optional[Union[List[models.Step], List[models.StepTypedDict]]] = None,
        procedure_name: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RunCreateResponse:
        r"""Create a new run

        Creates a new run for a unit with associated procedure, phases, and measurements

        :param unit_under_test:
        :param run_passed:
        :param procedure_id:
        :param serial_number:
        :param part_number:
        :param batch_number:
        :param revision:
        :param sub_units:
        :param outcome:
        :param procedure_version:
        :param started_at:
        :param duration:
        :param ended_at:
        :param docstring:
        :param logs:
        :param phases:
        :param steps: The `steps` field is deprecated in favor of `phases` and `measurements`, which provide more detailed test logging. Existing `steps` will be auto-converted into a `phase`, with a `measurement` if they include a numeric value.
        :param procedure_name:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RunCreateRequest(
            unit_under_test=utils.get_pydantic_model(
                unit_under_test, models.UnitUnderTest
            ),
            serial_number=serial_number,
            part_number=part_number,
            batch_number=batch_number,
            revision=revision,
            sub_units=utils.get_pydantic_model(
                sub_units, Optional[List[models.RunCreateSubUnit]]
            ),
            run_passed=run_passed,
            outcome=outcome,
            procedure_id=procedure_id,
            procedure_version=procedure_version,
            started_at=started_at,
            duration=duration,
            ended_at=ended_at,
            docstring=docstring,
            logs=utils.get_pydantic_model(logs, Optional[List[models.Log]]),
            phases=utils.get_pydantic_model(phases, Optional[List[models.Phase]]),
            steps=utils.get_pydantic_model(steps, Optional[List[models.Step]]),
            procedure_name=procedure_name,
        )

        req = self._build_request(
            method="POST",
            path="/v1/runs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.RunCreateRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="run-create",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.RunCreateResponse)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorBADREQUESTData
            )
            raise errors.ErrorBADREQUEST(data=response_data)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorNOTFOUNDData
            )
            raise errors.ErrorNOTFOUND(data=response_data)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ERRORINTERNALSERVERERRORData
            )
            raise errors.ERRORINTERNALSERVERERROR(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def run_create_async(
        self,
        *,
        unit_under_test: Union[models.UnitUnderTest, models.UnitUnderTestTypedDict],
        run_passed: bool,
        procedure_id: str,
        serial_number: Optional[str] = None,
        part_number: Optional[str] = None,
        batch_number: Optional[str] = None,
        revision: Optional[str] = None,
        sub_units: Optional[
            Union[List[models.RunCreateSubUnit], List[models.RunCreateSubUnitTypedDict]]
        ] = None,
        outcome: Optional[models.Outcome] = None,
        procedure_version: OptionalNullable[str] = UNSET,
        started_at: OptionalNullable[datetime] = UNSET,
        duration: Optional[str] = "PT0S",
        ended_at: Optional[datetime] = None,
        docstring: Optional[str] = None,
        logs: Optional[Union[List[models.Log], List[models.LogTypedDict]]] = None,
        phases: Optional[Union[List[models.Phase], List[models.PhaseTypedDict]]] = None,
        steps: Optional[Union[List[models.Step], List[models.StepTypedDict]]] = None,
        procedure_name: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RunCreateResponse:
        r"""Create a new run

        Creates a new run for a unit with associated procedure, phases, and measurements

        :param unit_under_test:
        :param run_passed:
        :param procedure_id:
        :param serial_number:
        :param part_number:
        :param batch_number:
        :param revision:
        :param sub_units:
        :param outcome:
        :param procedure_version:
        :param started_at:
        :param duration:
        :param ended_at:
        :param docstring:
        :param logs:
        :param phases:
        :param steps: The `steps` field is deprecated in favor of `phases` and `measurements`, which provide more detailed test logging. Existing `steps` will be auto-converted into a `phase`, with a `measurement` if they include a numeric value.
        :param procedure_name:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RunCreateRequest(
            unit_under_test=utils.get_pydantic_model(
                unit_under_test, models.UnitUnderTest
            ),
            serial_number=serial_number,
            part_number=part_number,
            batch_number=batch_number,
            revision=revision,
            sub_units=utils.get_pydantic_model(
                sub_units, Optional[List[models.RunCreateSubUnit]]
            ),
            run_passed=run_passed,
            outcome=outcome,
            procedure_id=procedure_id,
            procedure_version=procedure_version,
            started_at=started_at,
            duration=duration,
            ended_at=ended_at,
            docstring=docstring,
            logs=utils.get_pydantic_model(logs, Optional[List[models.Log]]),
            phases=utils.get_pydantic_model(phases, Optional[List[models.Phase]]),
            steps=utils.get_pydantic_model(steps, Optional[List[models.Step]]),
            procedure_name=procedure_name,
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/runs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.RunCreateRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="run-create",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.RunCreateResponse)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorBADREQUESTData
            )
            raise errors.ErrorBADREQUEST(data=response_data)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorNOTFOUNDData
            )
            raise errors.ErrorNOTFOUND(data=response_data)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ERRORINTERNALSERVERERRORData
            )
            raise errors.ERRORINTERNALSERVERERROR(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def run_get_runs_by_serial_number(
        self,
        *,
        serial_number: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RunGetRunsBySerialNumberResponse:
        r"""Get runs by serial number

        Retrieves all runs associated with a specific unit identified by serial number

        :param serial_number: The serial number of the unit to get runs for
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RunGetRunsBySerialNumberRequest(
            serial_number=serial_number,
        )

        req = self._build_request(
            method="GET",
            path="/v1/runs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="run-getRunsBySerialNumber",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "403", "404", "409", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.RunGetRunsBySerialNumberResponse
            )
        if utils.match_response(http_res, "400", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorBADREQUESTData
            )
            raise errors.ErrorBADREQUEST(data=response_data)
        if utils.match_response(http_res, "403", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorFORBIDDENData
            )
            raise errors.ErrorFORBIDDEN(data=response_data)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorNOTFOUNDData
            )
            raise errors.ErrorNOTFOUND(data=response_data)
        if utils.match_response(http_res, "409", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorCONFLICTData
            )
            raise errors.ErrorCONFLICT(data=response_data)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ERRORINTERNALSERVERERRORData
            )
            raise errors.ERRORINTERNALSERVERERROR(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def run_get_runs_by_serial_number_async(
        self,
        *,
        serial_number: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RunGetRunsBySerialNumberResponse:
        r"""Get runs by serial number

        Retrieves all runs associated with a specific unit identified by serial number

        :param serial_number: The serial number of the unit to get runs for
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RunGetRunsBySerialNumberRequest(
            serial_number=serial_number,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/runs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="run-getRunsBySerialNumber",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "403", "404", "409", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.RunGetRunsBySerialNumberResponse
            )
        if utils.match_response(http_res, "400", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorBADREQUESTData
            )
            raise errors.ErrorBADREQUEST(data=response_data)
        if utils.match_response(http_res, "403", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorFORBIDDENData
            )
            raise errors.ErrorFORBIDDEN(data=response_data)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorNOTFOUNDData
            )
            raise errors.ErrorNOTFOUND(data=response_data)
        if utils.match_response(http_res, "409", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorCONFLICTData
            )
            raise errors.ErrorCONFLICT(data=response_data)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ERRORINTERNALSERVERERRORData
            )
            raise errors.ERRORINTERNALSERVERERROR(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def run_delete_single(
        self,
        *,
        id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RunDeleteSingleResponse:
        r"""Delete run

        Permanently removes a run identified by its ID

        :param id: The ID of the run to delete
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RunDeleteSingleRequest(
            id=id,
        )

        req = self._build_request(
            method="DELETE",
            path="/v1/runs/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="run-deleteSingle",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.RunDeleteSingleResponse)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorNOTFOUNDData
            )
            raise errors.ErrorNOTFOUND(data=response_data)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ERRORINTERNALSERVERERRORData
            )
            raise errors.ERRORINTERNALSERVERERROR(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def run_delete_single_async(
        self,
        *,
        id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RunDeleteSingleResponse:
        r"""Delete run

        Permanently removes a run identified by its ID

        :param id: The ID of the run to delete
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RunDeleteSingleRequest(
            id=id,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/v1/runs/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="run-deleteSingle",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.RunDeleteSingleResponse)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ErrorNOTFOUNDData
            )
            raise errors.ErrorNOTFOUND(data=response_data)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(
                http_res.text, errors.ERRORINTERNALSERVERERRORData
            )
            raise errors.ERRORINTERNALSERVERERROR(data=response_data)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
