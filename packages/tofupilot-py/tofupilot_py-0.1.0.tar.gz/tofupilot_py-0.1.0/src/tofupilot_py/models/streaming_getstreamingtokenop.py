"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from tofupilot_py.types import BaseModel
from typing import Any, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ClientOptionsTypedDict(TypedDict):
    r"""options which will be passed to paho.mqtt.Client"""

    transport: str
    protocol: int
    reconnect_on_failure: bool


class ClientOptions(BaseModel):
    r"""options which will be passed to paho.mqtt.Client"""

    transport: str

    protocol: int

    reconnect_on_failure: bool


class WillOptionsTypedDict(TypedDict):
    r"""options which will be passed to paho.mqtt.Client.will_set"""

    topic: str
    payload: str
    qos: NotRequired[Any]
    retain: NotRequired[bool]


class WillOptions(BaseModel):
    r"""options which will be passed to paho.mqtt.Client.will_set"""

    topic: str

    payload: str

    qos: Optional[Any] = None

    retain: Optional[bool] = None


class ConnectOptionsTypedDict(TypedDict):
    r"""options which will be passed to paho.mqtt.Client.connect"""

    host: str
    r"""url of the MQTT server"""
    port: int
    keepalive: int


class ConnectOptions(BaseModel):
    r"""options which will be passed to paho.mqtt.Client.connect"""

    host: str
    r"""url of the MQTT server"""

    port: int

    keepalive: int


class PublishOptionsTypedDict(TypedDict):
    r"""options which will be passed to paho.mqtt.Client.publish"""

    topic: str
    r"""topic to publish to"""
    retain: NotRequired[bool]
    qos: NotRequired[Any]


class PublishOptions(BaseModel):
    r"""options which will be passed to paho.mqtt.Client.publish"""

    topic: str
    r"""topic to publish to"""

    retain: Optional[bool] = None

    qos: Optional[Any] = None


class SubscribeOptionsTypedDict(TypedDict):
    r"""options which will be passed to paho.mqtt.Client.subscribe"""

    topic: str
    r"""topic to subscribe to"""
    qos: NotRequired[Any]


class SubscribeOptions(BaseModel):
    r"""options which will be passed to paho.mqtt.Client.subscribe"""

    topic: str
    r"""topic to subscribe to"""

    qos: Optional[Any] = None


class StreamingGetStreamingTokenResponseTypedDict(TypedDict):
    r"""Streaming token generated successfully"""

    token: str
    r"""JWT used for authentication"""
    operator_page: str
    client_options: ClientOptionsTypedDict
    r"""options which will be passed to paho.mqtt.Client"""
    will_options: WillOptionsTypedDict
    r"""options which will be passed to paho.mqtt.Client.will_set"""
    connect_options: ConnectOptionsTypedDict
    r"""options which will be passed to paho.mqtt.Client.connect"""
    publish_options: PublishOptionsTypedDict
    r"""options which will be passed to paho.mqtt.Client.publish"""
    subscribe_options: SubscribeOptionsTypedDict
    r"""options which will be passed to paho.mqtt.Client.subscribe"""


class StreamingGetStreamingTokenResponse(BaseModel):
    r"""Streaming token generated successfully"""

    token: str
    r"""JWT used for authentication"""

    operator_page: Annotated[str, pydantic.Field(alias="operatorPage")]

    client_options: Annotated[ClientOptions, pydantic.Field(alias="clientOptions")]
    r"""options which will be passed to paho.mqtt.Client"""

    will_options: Annotated[WillOptions, pydantic.Field(alias="willOptions")]
    r"""options which will be passed to paho.mqtt.Client.will_set"""

    connect_options: Annotated[ConnectOptions, pydantic.Field(alias="connectOptions")]
    r"""options which will be passed to paho.mqtt.Client.connect"""

    publish_options: Annotated[PublishOptions, pydantic.Field(alias="publishOptions")]
    r"""options which will be passed to paho.mqtt.Client.publish"""

    subscribe_options: Annotated[
        SubscribeOptions, pydantic.Field(alias="subscribeOptions")
    ]
    r"""options which will be passed to paho.mqtt.Client.subscribe"""
