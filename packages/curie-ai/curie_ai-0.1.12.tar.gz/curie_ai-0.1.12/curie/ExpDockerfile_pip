# Base image with Python and Conda
FROM continuumio/miniconda3:latest

# copy the curie directory to the /curie
COPY ./curie /curie

# Set the working directory inside the container
WORKDIR /curie

# Set environment variables to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Update package index and install dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    build-essential \
    vim \
    make \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 20.x and npm
RUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && \
    apt-get update && \
    apt-get install -y nodejs && \
    npm install -g npm@latest


# Verify Node.js version
RUN node --version

# Install micromamba
ENV MAMBA_ROOT_PREFIX=/opt/micromamba
ENV PATH=$MAMBA_ROOT_PREFIX/bin:$PATH

RUN arch=$(uname -m) && \
    if [ "$arch" = "x86_64" ]; then \
    wget -qO- https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba; \
    elif [ "$arch" = "aarch64" ]; then \
    wget -qO- https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj bin/micromamba; \
    elif [ "$arch" = "ppc64le" ]; then \
    wget -qO- https://micro.mamba.pm/api/micromamba/linux-ppc64le/latest | tar -xvj bin/micromamba; \
    else \
    echo "Unsupported architecture: $arch"; exit 1; \
    fi && \
    mv bin/micromamba /usr/local/bin/ && \
    rmdir bin

# Create base environment with micromamba
RUN micromamba create -n curie -f /curie/environment.yml && \
    micromamba clean --all --yes

ENV MAMBA_DEFAULT_ENV=curie
ENV PATH=/opt/micromamba/envs/curie/bin:$PATH

RUN micromamba install -y -c conda-forge python=3.12 "nodejs>=20" poetry && micromamba clean --all -y

# Create the keyrings directory and add Docker's official GPG key
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# Set up the Docker repository
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" \
    | tee /etc/apt/sources.list.d/docker.list > /dev/null

# Update package index again and install Docker Engine
RUN apt-get update && apt-get install -y \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-compose-plugin 

RUN mkdir -p /helper
# Clone OpenHands repository
RUN cd /helper && git clone https://github.com/All-Hands-AI/OpenHands.git && cd OpenHands && git checkout 02bc7de36dda10d890d39ac05fee16a0d55193f6
RUN cd /helper/OpenHands && make build

# Install additional Python packages using micromamba
RUN micromamba run -n curie pip install langchain-core==0.3.29 langgraph==0.2.52


# To support docker initialization from Curie
RUN sed -i '238i \                "/var/run/docker.sock": {"bind": "/var/run/docker.sock", "mode": "rw"},' /helper/OpenHands/openhands/runtime/impl/docker/docker_runtime.py
RUN sed -i '36i\    user_id = 123 if user_id == 0 else user_id' /helper/OpenHands/openhands/runtime/utils/runtime_init.py

# Create necessary directories
RUN mkdir -p /workspace
RUN mkdir -p /logs


# Set PATH to activate the Conda environment automatically in the container
ENV PATH=/opt/micromamba/envs/curie/bin:$PATH

# Ensure bash is the default shell
SHELL ["/bin/bash", "-c"]

# Keep container running
CMD ["tail", "-f", "/dev/null"]