Metadata-Version: 2.1
Name: DDFacet
Version: 0.8.0.1
Summary: Facet-based radio astronomy continuum imager
Author-Email: Cyril Tasse <cyril.tasse@obspm.fr>
Maintainer-Email: Benjamin Hugo <bhugo@sarao.ac.za>
License:                     GNU GENERAL PUBLIC LICENSE
                                Version 2, June 1991
         
          Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
          51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
          Everyone is permitted to copy and distribute verbatim copies
          of this license document, but changing it is not allowed.
         
                                     Preamble
         
           The licenses for most software are designed to take away your
         freedom to share and change it.  By contrast, the GNU General Public
         License is intended to guarantee your freedom to share and change free
         software--to make sure the software is free for all its users.  This
         General Public License applies to most of the Free Software
         Foundation's software and to any other program whose authors commit to
         using it.  (Some other Free Software Foundation software is covered by
         the GNU Lesser General Public License instead.)  You can apply it to
         your programs, too.
         
           When we speak of free software, we are referring to freedom, not
         price.  Our General Public Licenses are designed to make sure that you
         have the freedom to distribute copies of free software (and charge for
         this service if you wish), that you receive source code or can get it
         if you want it, that you can change the software or use pieces of it
         in new free programs; and that you know you can do these things.
         
           To protect your rights, we need to make restrictions that forbid
         anyone to deny you these rights or to ask you to surrender the rights.
         These restrictions translate to certain responsibilities for you if you
         distribute copies of the software, or if you modify it.
         
           For example, if you distribute copies of such a program, whether
         gratis or for a fee, you must give the recipients all the rights that
         you have.  You must make sure that they, too, receive or can get the
         source code.  And you must show them these terms so they know their
         rights.
         
           We protect your rights with two steps: (1) copyright the software, and
         (2) offer you this license which gives you legal permission to copy,
         distribute and/or modify the software.
         
           Also, for each author's protection and ours, we want to make certain
         that everyone understands that there is no warranty for this free
         software.  If the software is modified by someone else and passed on, we
         want its recipients to know that what they have is not the original, so
         that any problems introduced by others will not reflect on the original
         authors' reputations.
         
           Finally, any free program is threatened constantly by software
         patents.  We wish to avoid the danger that redistributors of a free
         program will individually obtain patent licenses, in effect making the
         program proprietary.  To prevent this, we have made it clear that any
         patent must be licensed for everyone's free use or not licensed at all.
         
           The precise terms and conditions for copying, distribution and
         modification follow.
         
                             GNU GENERAL PUBLIC LICENSE
            TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
         
           0. This License applies to any program or other work which contains
         a notice placed by the copyright holder saying it may be distributed
         under the terms of this General Public License.  The "Program", below,
         refers to any such program or work, and a "work based on the Program"
         means either the Program or any derivative work under copyright law:
         that is to say, a work containing the Program or a portion of it,
         either verbatim or with modifications and/or translated into another
         language.  (Hereinafter, translation is included without limitation in
         the term "modification".)  Each licensee is addressed as "you".
         
         Activities other than copying, distribution and modification are not
         covered by this License; they are outside its scope.  The act of
         running the Program is not restricted, and the output from the Program
         is covered only if its contents constitute a work based on the
         Program (independent of having been made by running the Program).
         Whether that is true depends on what the Program does.
         
           1. You may copy and distribute verbatim copies of the Program's
         source code as you receive it, in any medium, provided that you
         conspicuously and appropriately publish on each copy an appropriate
         copyright notice and disclaimer of warranty; keep intact all the
         notices that refer to this License and to the absence of any warranty;
         and give any other recipients of the Program a copy of this License
         along with the Program.
         
         You may charge a fee for the physical act of transferring a copy, and
         you may at your option offer warranty protection in exchange for a fee.
         
           2. You may modify your copy or copies of the Program or any portion
         of it, thus forming a work based on the Program, and copy and
         distribute such modifications or work under the terms of Section 1
         above, provided that you also meet all of these conditions:
         
             a) You must cause the modified files to carry prominent notices
             stating that you changed the files and the date of any change.
         
             b) You must cause any work that you distribute or publish, that in
             whole or in part contains or is derived from the Program or any
             part thereof, to be licensed as a whole at no charge to all third
             parties under the terms of this License.
         
             c) If the modified program normally reads commands interactively
             when run, you must cause it, when started running for such
             interactive use in the most ordinary way, to print or display an
             announcement including an appropriate copyright notice and a
             notice that there is no warranty (or else, saying that you provide
             a warranty) and that users may redistribute the program under
             these conditions, and telling the user how to view a copy of this
             License.  (Exception: if the Program itself is interactive but
             does not normally print such an announcement, your work based on
             the Program is not required to print an announcement.)
         
         These requirements apply to the modified work as a whole.  If
         identifiable sections of that work are not derived from the Program,
         and can be reasonably considered independent and separate works in
         themselves, then this License, and its terms, do not apply to those
         sections when you distribute them as separate works.  But when you
         distribute the same sections as part of a whole which is a work based
         on the Program, the distribution of the whole must be on the terms of
         this License, whose permissions for other licensees extend to the
         entire whole, and thus to each and every part regardless of who wrote it.
         
         Thus, it is not the intent of this section to claim rights or contest
         your rights to work written entirely by you; rather, the intent is to
         exercise the right to control the distribution of derivative or
         collective works based on the Program.
         
         In addition, mere aggregation of another work not based on the Program
         with the Program (or with a work based on the Program) on a volume of
         a storage or distribution medium does not bring the other work under
         the scope of this License.
         
           3. You may copy and distribute the Program (or a work based on it,
         under Section 2) in object code or executable form under the terms of
         Sections 1 and 2 above provided that you also do one of the following:
         
             a) Accompany it with the complete corresponding machine-readable
             source code, which must be distributed under the terms of Sections
             1 and 2 above on a medium customarily used for software interchange; or,
         
             b) Accompany it with a written offer, valid for at least three
             years, to give any third party, for a charge no more than your
             cost of physically performing source distribution, a complete
             machine-readable copy of the corresponding source code, to be
             distributed under the terms of Sections 1 and 2 above on a medium
             customarily used for software interchange; or,
         
             c) Accompany it with the information you received as to the offer
             to distribute corresponding source code.  (This alternative is
             allowed only for noncommercial distribution and only if you
             received the program in object code or executable form with such
             an offer, in accord with Subsection b above.)
         
         The source code for a work means the preferred form of the work for
         making modifications to it.  For an executable work, complete source
         code means all the source code for all modules it contains, plus any
         associated interface definition files, plus the scripts used to
         control compilation and installation of the executable.  However, as a
         special exception, the source code distributed need not include
         anything that is normally distributed (in either source or binary
         form) with the major components (compiler, kernel, and so on) of the
         operating system on which the executable runs, unless that component
         itself accompanies the executable.
         
         If distribution of executable or object code is made by offering
         access to copy from a designated place, then offering equivalent
         access to copy the source code from the same place counts as
         distribution of the source code, even though third parties are not
         compelled to copy the source along with the object code.
         
           4. You may not copy, modify, sublicense, or distribute the Program
         except as expressly provided under this License.  Any attempt
         otherwise to copy, modify, sublicense or distribute the Program is
         void, and will automatically terminate your rights under this License.
         However, parties who have received copies, or rights, from you under
         this License will not have their licenses terminated so long as such
         parties remain in full compliance.
         
           5. You are not required to accept this License, since you have not
         signed it.  However, nothing else grants you permission to modify or
         distribute the Program or its derivative works.  These actions are
         prohibited by law if you do not accept this License.  Therefore, by
         modifying or distributing the Program (or any work based on the
         Program), you indicate your acceptance of this License to do so, and
         all its terms and conditions for copying, distributing or modifying
         the Program or works based on it.
         
           6. Each time you redistribute the Program (or any work based on the
         Program), the recipient automatically receives a license from the
         original licensor to copy, distribute or modify the Program subject to
         these terms and conditions.  You may not impose any further
         restrictions on the recipients' exercise of the rights granted herein.
         You are not responsible for enforcing compliance by third parties to
         this License.
         
           7. If, as a consequence of a court judgment or allegation of patent
         infringement or for any other reason (not limited to patent issues),
         conditions are imposed on you (whether by court order, agreement or
         otherwise) that contradict the conditions of this License, they do not
         excuse you from the conditions of this License.  If you cannot
         distribute so as to satisfy simultaneously your obligations under this
         License and any other pertinent obligations, then as a consequence you
         may not distribute the Program at all.  For example, if a patent
         license would not permit royalty-free redistribution of the Program by
         all those who receive copies directly or indirectly through you, then
         the only way you could satisfy both it and this License would be to
         refrain entirely from distribution of the Program.
         
         If any portion of this section is held invalid or unenforceable under
         any particular circumstance, the balance of the section is intended to
         apply and the section as a whole is intended to apply in other
         circumstances.
         
         It is not the purpose of this section to induce you to infringe any
         patents or other property right claims or to contest validity of any
         such claims; this section has the sole purpose of protecting the
         integrity of the free software distribution system, which is
         implemented by public license practices.  Many people have made
         generous contributions to the wide range of software distributed
         through that system in reliance on consistent application of that
         system; it is up to the author/donor to decide if he or she is willing
         to distribute software through any other system and a licensee cannot
         impose that choice.
         
         This section is intended to make thoroughly clear what is believed to
         be a consequence of the rest of this License.
         
           8. If the distribution and/or use of the Program is restricted in
         certain countries either by patents or by copyrighted interfaces, the
         original copyright holder who places the Program under this License
         may add an explicit geographical distribution limitation excluding
         those countries, so that distribution is permitted only in or among
         countries not thus excluded.  In such case, this License incorporates
         the limitation as if written in the body of this License.
         
           9. The Free Software Foundation may publish revised and/or new versions
         of the General Public License from time to time.  Such new versions will
         be similar in spirit to the present version, but may differ in detail to
         address new problems or concerns.
         
         Each version is given a distinguishing version number.  If the Program
         specifies a version number of this License which applies to it and "any
         later version", you have the option of following the terms and conditions
         either of that version or of any later version published by the Free
         Software Foundation.  If the Program does not specify a version number of
         this License, you may choose any version ever published by the Free Software
         Foundation.
         
           10. If you wish to incorporate parts of the Program into other free
         programs whose distribution conditions are different, write to the author
         to ask for permission.  For software which is copyrighted by the Free
         Software Foundation, write to the Free Software Foundation; we sometimes
         make exceptions for this.  Our decision will be guided by the two goals
         of preserving the free status of all derivatives of our free software and
         of promoting the sharing and reuse of software generally.
         
                                     NO WARRANTY
         
           11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
         FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
         OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
         PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
         OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
         MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
         TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
         PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
         REPAIR OR CORRECTION.
         
           12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
         WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
         REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
         INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
         OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
         TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
         YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
         PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
         POSSIBILITY OF SUCH DAMAGES.
         
                              END OF TERMS AND CONDITIONS
         
                     How to Apply These Terms to Your New Programs
         
           If you develop a new program, and you want it to be of the greatest
         possible use to the public, the best way to achieve this is to make it
         free software which everyone can redistribute and change under these terms.
         
           To do so, attach the following notices to the program.  It is safest
         to attach them to the start of each source file to most effectively
         convey the exclusion of warranty; and each file should have at least
         the "copyright" line and a pointer to where the full notice is found.
         
             <one line to give the program's name and a brief idea of what it does.>
             Copyright (C) <year>  <name of author>
         
             This program is free software; you can redistribute it and/or modify
             it under the terms of the GNU General Public License as published by
             the Free Software Foundation; either version 2 of the License, or
             (at your option) any later version.
         
             This program is distributed in the hope that it will be useful,
             but WITHOUT ANY WARRANTY; without even the implied warranty of
             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             GNU General Public License for more details.
         
             You should have received a copy of the GNU General Public License along
             with this program; if not, write to the Free Software Foundation, Inc.,
             51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
         
         Also add information on how to contact you by electronic and paper mail.
         
         If the program is interactive, make it output a short notice like this
         when it starts in an interactive mode:
         
             Gnomovision version 69, Copyright (C) year name of author
             Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
             This is free software, and you are welcome to redistribute it
             under certain conditions; type `show c' for details.
         
         The hypothetical commands `show w' and `show c' should show the appropriate
         parts of the General Public License.  Of course, the commands you use may
         be called something other than `show w' and `show c'; they could even be
         mouse-clicks or menu items--whatever suits your program.
         
         You should also get your employer (if you work as a programmer) or your
         school, if any, to sign a "copyright disclaimer" for the program, if
         necessary.  Here is a sample; alter the names:
         
           Yoyodyne, Inc., hereby disclaims all copyright interest in the program
           `Gnomovision' (which makes passes at compilers) written by James Hacker.
         
           <signature of Ty Coon>, 1 April 1989
           Ty Coon, President of Vice
         
         This General Public License does not permit incorporating your program into
         proprietary programs.  If your program is a subroutine library, you may
         consider it more useful to permit linking proprietary applications with the
         library.  If this is what you want to do, use the GNU Lesser General
         Public License instead of this License.
         
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU General Public License v2 (GPLv2)
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python
Classifier: Topic :: Scientific/Engineering :: Astronomy
Project-URL: Homepage, http://github.com/saopicc/DDFacet
Requires-Python: <3.11,>=3.8
Requires-Dist: Cython<=0.29.30,>=0.25.2; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: numpy<=1.22.4,>=1.15.1; python_version >= "3.10" and python_version < "3.11"
Requires-Dist: numpy<=1.22.4,>=1.15.1; python_version >= "3.8" and python_version < "3.10"
Requires-Dist: sharedarray<=3.2.4,>=3.2.0; python_version >= "3.10" and python_version < "3.11"
Requires-Dist: sharedarray<=3.2.1,>=3.2.0; python_version >= "3.8" and python_version < "3.10"
Requires-Dist: Polygon3<=3.0.9.1,>=3.0.8; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: pyFFTW<=0.12.0,>=0.10.4; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: astropy<=5.3.4,>=3.0; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: deap<=1.4.1,>=1.0.1; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: ptyprocess<=0.7.0,>=0.5; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: ipdb<=0.13.13,>=0.10.3; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: python-casacore<=3.5.2,>=3.0.0; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: pyephem>=3.7.6.0; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: numexpr<=2.9.0,>=2.6.2; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: matplotlib<=3.8.2,>=2.0.0; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: scipy<=1.11.4,>=1.3.3; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: astLib<=0.11.10,>=0.8.0; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: psutil<=5.9.8,>=5.2.2; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: py-cpuinfo<=9.0.0,>=3.2.0; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: tables<=3.9.2,>=3.6.0; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: prettytable<=3.9.0,>=0.7.2; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: pybind11<=2.11.1,>=2.2.2; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: configparser<=6.0.0,>=3.7.1; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: pandas<=2.0.3,>=0.23.3; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: ruamel.yaml<=0.18.6,>=0.15.92; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: pylru<=1.2.1,>=1.1.0; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: six<=1.16.0,>=1.12.0; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: dask[array]<=2023.5.0; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: codex-africanus[dask]<=0.3.5; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: regions<=0.5; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: pywavelets<=1.4.1; python_version >= "3.8" and python_version < "3.11"
Requires-Dist: tqdm<=4.64.0; python_version >= "3.8" and python_version < "3.11"
Provides-Extra: dft-support
Requires-Dist: montblanc<=0.7.3.2,>=0.6.1; python_version >= "3.8" and python_version < "3.11" and extra == "dft-support"
Requires-Dist: tensorflow==2.12.0; python_version >= "3.10" and python_version < "3.11" and extra == "dft-support"
Provides-Extra: moresane-support
Requires-Dist: pymoresane>=0.3.0; python_version >= "3.8" and python_version < "3.11" and extra == "moresane-support"
Provides-Extra: fits-beam-support
Requires-Dist: meqtrees-cattery<=1.7.9; python_version >= "3.8" and python_version < "3.11" and extra == "fits-beam-support"
Provides-Extra: kms-support
Requires-Dist: bdsf<=1.11.1,>1.8.15; python_version >= "3.10" and python_version < "3.11" and extra == "kms-support"
Requires-Dist: bdsf<=1.10.1,>1.8.15; python_version >= "3.8" and python_version < "3.10" and extra == "kms-support"
Provides-Extra: alternate-data-backends
Requires-Dist: dask-ms[xarray]<=0.2.20; python_version >= "3.8" and python_version < "3.11" and extra == "alternate-data-backends"
Requires-Dist: xarray<=2023.12.0; python_version >= "3.8" and python_version < "3.11" and extra == "alternate-data-backends"
Provides-Extra: testing-requirements
Requires-Dist: nose>=1.3.7; python_version >= "3" and python_version < "3.9" and extra == "testing-requirements"
Requires-Dist: pynose>=1.4.8; python_version >= "3.9" and python_version < "3.11" and extra == "testing-requirements"
Requires-Dist: owlcat>=1.7.5; python_version >= "3.8" and python_version < "3.11" and extra == "testing-requirements"
Description-Content-Type: text/x-rst

DDFacet
###################################
A facet-based radio imaging package

Copyright (C) 2013-2024  Cyril Tasse, l'Observatoire de Paris,
SKA South Africa, South African Radio Astronomy Observatory, Rhodes University

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

(Users / Recommended - Docker based) Run via. Stimela >= 0.2.9 
===============================================================
We recommend running the imaging package through the Stimela framework <https://github.com/SpheMakh/Stimela>, built on a
widely supported containerization framework, called Docker. This package is on PiPY and and is purely python-based, requiring no dependencies other than Docker. It gives the user instantanious access to other commonly used packages such as Meqtrees, CASA, etc.


1. Install the latest docker from the Docker PPA: <https://docs.docker.com/engine/installation/linux/ubuntu/>. If you're not running Debian then select the suitable distribution. 

2. Ensure to add your user to the ``docker`` group. On Debian-based systems this can be done as follows::

        $ sudo usermod -aG docker $USER

3. Set up a virtual environment, activate it and upgrade pip, setuptools and wheel to the latest PyPI versions::

        $ virtualenv stimelavenv
        $ source stimelavenv/bin/activate
        (stimelavenv)$ pip install -U pip wheel setuptools
        (stimelavenv)$ pip install stimela

4. Run ``stimela pull`` and ``stimela build`` to pull all the latest astronomy software from DockerHub (this will take a while and is several GiB in size, so ensure you're on a fast link)::

        (stimelavenv)$ stimela pull
        (stimelavenv)$ stimela build

5. ``stimela cabs -i ddfacet`` lists all available options for the imager.

6. You can then add DDFacet as part of a larger reduction script, for example::

          1 import stimela
          2 
          3 INPUT="input"
          4 OUTPUT="output"
          5 MSDIR="msdir"
          6 
          7 recipe = stimela.Recipe("Test DDFacet imaging", ms_dir=MSDIR)
          8 # ...any other calibration steps here...
          9 recipe.add("cab/ddfacet", "ddfacet_test",
         10            {
         11                "Data-MS": ["3C147.MS/SUBMSS/D147-LO-NOIFS-NOPOL-4M5S.MS"],
         12                "Output-Name": "testimg",
         13                "Image-NPix": 2048,
         14                "Image-Cell": 2,
         15                "Cache-Reset": True,
         16                "Freq-NBand": 3,
         17                "Weight-ColName": "WEIGHT",
         18                "Beam-Model": "FITS",
         19                "Beam-FITSFile": "'beams/JVLA-L-centred_$(corr)_$(reim).fits'",
         20                "Data-ChunkHours": 0.5,
         21                "Data-Sort": True
         22            },
         23            input=INPUT, output=OUTPUT, shared_memory="14gb",
         24            label="test_image:: Make a test image using ddfacet")
         25 # ... any post imaging / additional calibration steps here ...
         26 recipe.run()

7. Run the script with::

        (stimelavenv)$ stimela run myscriptname.py

8. When you're done deactivate the virtual environment::

        (stimelavenv)$ deactivate
        
        
(Users / PyPI alternative) Virtual environment and pip:
==========================================================
We prefer that users use DDFacet though Docker. However, if this is not available (e.g. cluster
environments) we recommend you use a virtual environment. If you install it directly into your system packages you're
on your own -- be warned!!

**WARNING: you may encounter issues if you have previously installed numpy in the environment - build isolation
will fail if the numpy you have installed is older than the build system pulls during isolation.
You may need to use --no-build-isolation when installing or, even better, ensure that you install DDF and KillMS
in an empty new virtual environment.**

1. Install each of the debian dependencies. The latest full list of apt dependencies can be be found in the Dockerfile <https://github.com/saopicc/DDFacet/blob/master/docker.2204>

2. Create a virtual environment somewhere on your system and activate::

        virtualenv ddfacet
        source ddfacet/bin/activate
        
3. Then, install directly from the Python Package Index (PyPI) using pip - **ensure your venv is activated**::

        pip install -U pip
        pip install DDFacet

5. When you're done with your imaging business::

        deactivate
        
(Users/Optional) FitsBeam, Montblanc, Moresane, Killms support
================================================================
Optional requirements like the FITS beam can be installed by specifying them in brackets.
E.g. pip install "/src/DDFacet/[dft-support,moresane-support,testing-requirements,fits-beam-support,kms-support]"

(Users/Troubleshooting) Configure max shared memory
================================================================
Running DDFacet on large images requires a lot of shared memory. Most systems limit the amount of shared memory to about 10%. To increase this limit add the following line to your ``/etc/default/tmpfs`` file::

        SHM_SIZE=100%

A restart will be required for this change to reflect. If you would prefer a once off solution execute the following line::

        sudo mount -o remount,size=100% /run/shm

It may also be necessary to run the following to remove the kernel security limit on mlock pinning. Without this things may
be slower than usual::

        echo "*        -   memlock     unlimited" > /etc/security/limits.conf

(Developers/Note): Architecture dependent binary
==========================================================
The default build system configuration **DOES NOT** produce portable binaries at the cost of a slight improvement in runtime. 
You have to modify pyproject.toml and set the following line **before** compiling packages:

```
cmake.define = {ENABLE_NATIVE_TUNING = "ON", ENABLE_FAST_MATH = "ON", ENABLE_PYTHON_2 = "OFF", ENABLE_PYTHON_3 = "ON"}
```

(Developers/Recommended): setting up your dev environment
==========================================================
**NOTE:Setup your virtual environment just as specified in the user section above. Ensure you activate!**
**WARNING: you may encounter issues if you have previously installed numpy in the environment - build isolation**
**will fail if the numpy you have installed is older than the build system pulls during isolation.**
**You may need to use --no-build-isolation when installing or, even better, ensure that you install DDF and KillMS**
**in an empty new virtual environment.**

To setup your local development environment navigate clone DDFacet and run::

        (ddfvenv) $ git clone https://github.com/cyriltasse/DDFacet
        (ddfvenv) $ pip install -e DDFacet/

**IMPORTANT NOTE: You may need to remove the development version before running PIP when installing. If you**
**are switching between release and debug versions of the backend -- or recompiling in a different configuration -- **
**you should remove the DDFacet/DDFacet/cbuild directory and everything in it**

Note that Python3.8 support is deprecated and editable installation is only tested to work on Python 3.10.

(Developers/Testing) Docker-based build
==========================================================
1. Simply pull the latest DDFacet and build the Docker image::

    git clone git@github.com:cyriltasse/DDFacet.git
    cd DDFacet
    docker build -t ddf -f docker.2204 .

2. You should now be able to run DDFacet in a container. Note that your parsets must have filenames relative to the mounted volume inside the container, for instance::

    docker run --shm-size 6g -v /scratch/TEST_DATA:/mnt ddf /mnt/test-master1.parset

**Important: if you ran ``git submodule update --init --recursive`` before you may need to remove the cached SkyModel before building the docker image with ``git rm --cached SkyModel``**

(Developers/Debugging) Build a few libraries (by hand with custom flags)
=========================================================================
You can build against custom versions of libraries such is libPython and custom numpy versions.
To do this modify pyproject.toml. Find and modify the following lines::
```
cmake.build-type = "ReleaseWithDebugSymbols" # can be set to Debug e.g.
cmake.define = {ENABLE_NATIVE_TUNING = "OFF", ENABLE_FAST_MATH = "ON", ENABLE_PYTHON_2 = "OFF", ENABLE_PYTHON_3 = "ON"} # can be tuned to enable processor specific marching
```
You can also specify path settings for other libraries if you have custom built, e.g. numpy through these ```cmake.define```

(Developers/Acceptance tests)
==========================================================
Paths
---------------------------------------------------------
Add this to your ``.bashrc``::

        export DDFACET_TEST_DATA_DIR=[folder where you keep the acceptance test data and images]
        export DDFACET_TEST_OUTPUT_DIR=[folder where you want the acceptance test output to be dumped]

To test your branch against the master branch using Jenkins
------------------------------------------------------------
Most of the core use cases will in the nearby future have reference images and an automated acceptance test.

Please **do not** commit against cyriltasse/master. The correct strategy is to branch/fork and do a pull request on Github
to merge changes into master. Once you opened a pull request add the following comment: "ok to test". This will let the Jenkins server know to start testing. You should see that the pull request and commit statusses shows "Pending". If the test succeeds you should see "All checks have passed" above the green merge button. Once the code is reviewed it will be merged into the master branch.

To run the tests on your local machine:
---------------------------------------------------------
You can run the automated tests by grabbing the latest set of measurements and reference images from the web and
extracting them to the directory you set up in your **DDFACET_TEST_DATA_DIR** environment variable. You can run
the automated tests by navigating to your DDFacet directory and running nosetests.

Each of the test cases is labeled by a class name and has reference images and a parset file with the same
name, ie. if the test case that has failed is called "TestWidefieldDirty" the reference images will be called the same. You should investigate the reason for any severe discrepancies between the output of the test case and the images produced by your changed codebase. See the docstring at the top of the class ClassCompareFITSImage for help and
filename conventions.

Acceptance test data can be found on the Jenkins server in the **/var/lib/jenkins/test-data** directory.

Adding more tests and creating new reference images.
---------------------------------------------------------
To resimulate images and add more tests:

In the Jenkins server data directory add a recipe to the makefile simulate and/or set up new reference images. This should only be done with the ``origin/master`` branch - not your branch or fork! Use the ddfacet-generate-refims task
to do this. You should manually verify that all the reference images are correct when you regenerate them. Each time you add a new option to DDFacet also add an option to the makefile in this directory. Once the option is set up in the makefile you can build the reference images on Jenkins.



