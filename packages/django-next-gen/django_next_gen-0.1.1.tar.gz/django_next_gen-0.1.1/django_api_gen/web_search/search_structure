"use client";

import React, {{ useCallback, useEffect, useRef, useState }} from "react";
import {{ Select, Spin }} from "antd";
import type {{ SelectProps }} from "antd";
import use{pascal_model}Service from "../{model_file_name}.service";
import {{ {pascal_model} }} from "../{model_file_name}.model";

interface SearchInputProps
  extends Omit<SelectProps<number>, "options" | "onSearch"> {{
  placeholder?: string;
  detail?: {pascal_model};
}}

const {pascal_model}SearchInput: React.FC<SearchInputProps> = ({{
  placeholder = "Search {pascal_model}s",
  value,
  detail,
  onChange,
  ...restProps
}}) => {{
  const [loading, setLoading] = useState(false);
  const [options, setOptions] = useState<SelectProps["options"]>([]);
  const [searchTerm, setSearchTerm] = useState<string>();
  const [hasMore, setHasMore] = useState(true);
  const {camel_model}Service = use{pascal_model}Service();
  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);
  const currentPageRef = useRef(1);

  const fetchData = useCallback(
    async (term: string = "", page: number = 1, append: boolean = false) => {{
      setLoading(true);
      try {{
        const {{ data: {{ results, next }} }} = await {camel_model}Service.get{pascal_model}s({{
          search: term?.trim(),
          ps: 10,
          pn: page,
        }});

        const formatted = results?.map(({camel_model}: {pascal_model}) => ({{
          value: {camel_model}.id,
              label: {camel_model}.name,
        }}));

        setOptions(prev => {{
          if (append) {{
            const newOptions = formatted.filter(
              newOpt => !prev?.some(prevOpt => prevOpt.value === newOpt.value)
            );
            return [...(prev || []), ...newOptions];
          }}
          return formatted;
        }});

        setHasMore(!!next);
      }} finally {{
        setLoading(false);
      }}
    }},
    [{camel_model}Service]
  );

  // Handle adding detail to options
  useEffect(() => {{
    if (detail && value) {{
      setOptions(prev => {{
        const exists = prev?.some(opt => opt.value === detail.id);
        if (!exists) {{
          return [...(prev || []), {{ value: detail.id, label: detail.name }}];
        }}
        return prev;
      }});
    }}
  }}, [detail?.id, detail?.name, value]);

  const handlePopupScroll = useCallback(
    (e: React.UIEvent<HTMLDivElement>) => {{
      const {{ scrollTop, offsetHeight, scrollHeight }} = e.currentTarget;
      const isBottom = scrollTop + offsetHeight === scrollHeight;

      if (isBottom && !loading && hasMore) {{
        const nextPage = currentPageRef.current + 1;
        currentPageRef.current = nextPage;
        fetchData(searchTerm || "", nextPage, true);
      }}
    }},
    [loading, hasMore, searchTerm, fetchData]
  );

  const handleSearch = useCallback((value: string) => {{
    setSearchTerm(value);
  }}, []);

  useEffect(() => {{
    if (timeoutRef.current) {{
      clearTimeout(timeoutRef.current);
    }}

    timeoutRef.current = setTimeout(() => {{
      currentPageRef.current = 1;
      setHasMore(true);
      setOptions([]);
      fetchData(searchTerm || "", 1);
    }}, 300);

    return () => {{
      if (timeoutRef.current) {{
        clearTimeout(timeoutRef.current);
      }}
    }};
  }}, [searchTerm, fetchData]);

  return (
    <Select
      showSearch
      value={{value}}
      placeholder={{placeholder}}
      defaultActiveFirstOption={{false}}
      suffixIcon={{loading ? <Spin size="small" /> : undefined}}
      filterOption={{false}}
      notFoundContent={{loading ? <Spin size="small" /> : "No results found"}}
      onSearch={{handleSearch}}
      onPopupScroll={{handlePopupScroll}}
      onChange={{onChange}}
      options={{options}}
      loading={{loading}}
      {{...restProps}}
    />
  );
}};

export default {pascal_model}SearchInput;
