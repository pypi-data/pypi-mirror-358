# autogenerated by ssc-gen DO NOT_EDIT

import re
from typing import List, Dict, TypedDict, Union, Optional
from contextlib import suppress


from parsel import Selector, SelectorList

T_OngoingPage = TypedDict(
    "T_OngoingPage",
    {
        "url": str,
        "title": str,
        "thumbnail": str,
        "counts": str,
    },
)
T_SearchPage = TypedDict(
    "T_SearchPage",
    {
        "url": str,
        "title": str,
        "thumbnail": str,
        "counts": str,
    },
)
T_EpisodesView = TypedDict(
    "T_EpisodesView",
    {
        "title": str,
        "url": str,
    },
)
T_AnimePage = TypedDict(
    "T_AnimePage",
    {
        "title": str,
        "description": str,
        "thumbnail": str,
        "episodes": List[T_EpisodesView],
    },
)
T_SourceView = Dict[str, Optional[str]]
T_SourcePage = TypedDict(
    "T_SourcePage",
    {
        "videos": T_SourceView,
    },
)


class OngoingPage:
    """usage:

        POST https://jut.su/anime/ongoing/
        ajax_load=yes&start_from_page=1&show_search=&anime_of_user=



    [
        {
            "url": "String",
            "title": "String",
            "thumbnail": "String",
            "counts": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, v: Union[Selector, SelectorList]) -> SelectorList:
        return v.css(".all_anime_global")

    def _parse_url(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("a")
        v1 = v0.attrib["href"]
        return f"https://jut.su{v1}"

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".aaname")
        return "".join(v0.css("::text").getall())

    def _parse_thumbnail(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".all_anime_image[style]")
        v1 = v0.attrib["style"]
        return re.search(r"'(https?://.*?)'", v1)[1]

    def _parse_counts(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".aailines")
        v1 = v0.css("::text").getall()
        v2 = [i.strip("\r\n ") for i in v1]
        return " ".join(v2)

    def parse(self) -> List[T_OngoingPage]:
        return [
            {
                "url": self._parse_url(el),
                "title": self._parse_title(el),
                "thumbnail": self._parse_thumbnail(el),
                "counts": self._parse_counts(el),
            }
            for el in self._split_doc(self._document)
        ]


class SearchPage:
    """
        POST https://jut.su/anime/
        ajax_load=yes&start_from_page=1&show_search=<QUERY>&anime_of_user=

        EXAMPLE:
            POST https://jut.su/anime/
            ajax_load=yes&start_from_page=1&show_search=LA&anime_of_user=


    [
        {
            "url": "String",
            "title": "String",
            "thumbnail": "String",
            "counts": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, v: Union[Selector, SelectorList]) -> SelectorList:
        return v.css(".all_anime_global")

    def _parse_url(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("a")
        v1 = v0.attrib["href"]
        return f"https://jut.su{v1}"

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".aaname")
        return "".join(v0.css("::text").getall())

    def _parse_thumbnail(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".all_anime_image[style]")
        v1 = v0.attrib["style"]
        return re.search(r"'(https?://.*?)'", v1)[1]

    def _parse_counts(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".aailines")
        v1 = v0.css("::text").getall()
        v2 = [i.strip("\r\n ") for i in v1]
        return " ".join(v2)

    def parse(self) -> List[T_SearchPage]:
        return [
            {
                "url": self._parse_url(el),
                "title": self._parse_title(el),
                "thumbnail": self._parse_thumbnail(el),
                "counts": self._parse_counts(el),
            }
            for el in self._split_doc(self._document)
        ]


class EpisodesView:
    """

    [
        {
            "title": "String",
            "url": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, v: Union[Selector, SelectorList]) -> SelectorList:
        return v.css(".video")

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = "".join(v.css("::text").getall())
        return v0.strip(" ")

    def _parse_url(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.attrib["href"]
        return f"https://jut.su{v0}"

    def parse(self) -> List[T_EpisodesView]:
        return [
            {
                "title": self._parse_title(el),
                "url": self._parse_url(el),
            }
            for el in self._split_doc(self._document)
        ]


class AnimePage:
    """
        GET https://jut.su/<ANIME PATH>

        EXAMPLE:
            GET https://jut.su/kime-no-yaiba/


    {
        "title": "String",
        "description": "String",
        "thumbnail": "String",
        "episodes": [
            {
                "title": "String",
                "url": "String"
            },
            "..."
        ]
    }"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".anime_padding_for_title")
        v1 = "".join(v0.css("::text").getall())
        return re.search(r"Смотреть\s*(.*?)\s*все", v1)[1]

    def _parse_description(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".uv_rounded_bottom span")
        v1 = v0.css("::text").getall()
        return " ".join(v1)

    def _parse_thumbnail(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".all_anime_title[style]")
        v1 = v0.attrib["style"]
        return re.search(r"'(https?://.*?)'", v1)[1]

    def _parse_episodes(self, v: Union[Selector, SelectorList]) -> List[T_EpisodesView]:
        return EpisodesView(v).parse()

    def parse(self) -> T_AnimePage:
        return {
            "title": self._parse_title(self._document),
            "description": self._parse_description(self._document),
            "thumbnail": self._parse_thumbnail(self._document),
            "episodes": self._parse_episodes(self._document),
        }


class SourceView:
    """

    {
        "QUALITY": "URL"
    }"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, v: Union[Selector, SelectorList]) -> SelectorList:
        return v.css("#my-player > source")

    def _parse_key(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v
        with suppress(Exception):
            return v0.attrib["res"]
        return "null"

    def _parse_value(self, v: Union[Selector, SelectorList]) -> Optional[str]:
        v0 = v
        with suppress(Exception):
            return v0.attrib["src"]
        return None

    def parse(self) -> T_SourceView:
        return {self._parse_key(el): self._parse_value(el) for el in self._split_doc(self._document)}


class SourcePage:
    """
        GET https://jut.su/<ANIME PATH>/<SEASON?>/episode-<NUM>.html

        NOTE: VIDEO PLAY REQUEST SHOULD HAVE THE SAME USER-AGENT AS AN API CLIENT

        eg:

        cl = Client(headers={"user-agent": "X"})

        ...

        s = SourcePage(doc).parse()

        mpv s["url_1080"] # 403, FORBIDDEN

        mpv s["url_1080"] --user-agent="Y" # 403, FORBIDDEN

        mpv s["url_1080"] --user-agent="X" # 200, OK

        EXAMPLE:
            GET https://jut.su/kime-no-yaiba/season-1/episode-1.html

        ISSUES:
            CHECK 'null' KEY in 'video'. if it contains - videos not available

            check block reasons regex patterns:

            - 'block_video_text_str_everywhere\\+' - К сожалению, это видео недоступно.
            - 'block_video_text_str\\+' - К сожалению, в России это видео недоступно.


    {
        "videos": {
            "QUALITY": "URL"
        }
    }"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _parse_videos(self, v: Union[Selector, SelectorList]) -> T_SourceView:
        return SourceView(v).parse()

    def parse(self) -> T_SourcePage:
        return {
            "videos": self._parse_videos(self._document),
        }
