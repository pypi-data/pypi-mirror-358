# autogenerated by ssc-gen DO NOT_EDIT

import re
from typing import List, TypedDict, Union, Optional
from contextlib import suppress


from parsel import Selector, SelectorList

T_OngoingPage = TypedDict(
    "T_OngoingPage",
    {
        "title": str,
        "thumbnail": str,
        "alt_title": str,
        "url": str,
    },
)
T_SearchPage = TypedDict(
    "T_SearchPage",
    {
        "title": str,
        "thumbnail": str,
        "alt_title": str,
        "url": str,
    },
)
T_EpisodeView = TypedDict(
    "T_EpisodeView",
    {
        "url": str,
        "thumbnail": str,
        "title": str,
    },
)
T_AnimePage = TypedDict(
    "T_AnimePage",
    {
        "title": str,
        "description": Optional[str],
        "thumbnail": str,
        "video_url": Optional[str],
        "episodes": List[T_EpisodeView],
    },
)


class OngoingPage:
    """
        GET https://sovetromantica.com/anime


    [
        {
            "title": "String",
            "thumbnail": "String",
            "alt_title": "String",
            "url": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, v: Union[Selector, SelectorList]) -> SelectorList:
        return v.css(".anime--block__desu")

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".anime--block__name > span")
        v1 = v0[-1]
        return "".join(v1.css("::text").getall())

    def _parse_thumbnail(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".anime--poster--loading > img[src]")
        return v0.attrib["src"]

    def _parse_alt_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".anime--block__name > span")
        return "".join(v0.css("::text").getall())

    def _parse_url(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".anime--block__desu a[href]")
        return v0.attrib["href"]

    def parse(self) -> List[T_OngoingPage]:
        return [
            {
                "title": self._parse_title(el),
                "thumbnail": self._parse_thumbnail(el),
                "alt_title": self._parse_alt_title(el),
                "url": self._parse_url(el),
            }
            for el in self._split_doc(self._document)
        ]


class SearchPage:
    """Get all search results by query

        GET https://sovetromantica.com/anime
        query=<QUERY>

        EXAMPLE:
            GET https://sovetromantica.com/anime
            query=LAIN


    [
        {
            "title": "String",
            "thumbnail": "String",
            "alt_title": "String",
            "url": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, v: Union[Selector, SelectorList]) -> SelectorList:
        return v.css(".anime--block__desu")

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".anime--block__name > span")
        v1 = v0[-1]
        return "".join(v1.css("::text").getall())

    def _parse_thumbnail(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".anime--poster--loading > img[src]")
        return v0.attrib["src"]

    def _parse_alt_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".anime--block__name > span")
        return "".join(v0.css("::text").getall())

    def _parse_url(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".anime--block__desu a[href]")
        return v0.attrib["href"]

    def parse(self) -> List[T_SearchPage]:
        return [
            {
                "title": self._parse_title(el),
                "thumbnail": self._parse_thumbnail(el),
                "alt_title": self._parse_alt_title(el),
                "url": self._parse_url(el),
            }
            for el in self._split_doc(self._document)
        ]


class EpisodeView:
    """WARNING!

        target page maybe does not contain video!

        GET https://sovetromantica.com/anime/<ANIME PATH>

        EXAMPLE:
            GET https://sovetromantica.com/anime/1459-sousou-no-frieren



    [
        {
            "url": "String",
            "thumbnail": "String",
            "title": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, v: Union[Selector, SelectorList]) -> SelectorList:
        return v.css(".episodes-slick_item")

    def _parse_url(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("a[href]")
        v1 = v0.attrib["href"]
        return f"https://sovetromantica.com{v1}"

    def _parse_thumbnail(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("img[src]")
        return v0.attrib["src"]

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("img[alt]")
        return v0.attrib["alt"]

    def parse(self) -> List[T_EpisodeView]:
        return [
            {
                "url": self._parse_url(el),
                "thumbnail": self._parse_thumbnail(el),
                "title": self._parse_title(el),
            }
            for el in self._split_doc(self._document)
        ]


class AnimePage:
    """Anime page information

        GET https://sovetromantica.com/anime/<ANIME PATH>

        EXAMPLE:
            GET https://sovetromantica.com/anime/1459-sousou-no-frieren

        ISSUES:
            - description maybe does not exist and return null (CHECK IT)
            - video key maybe returns null (not available)


    {
        "title": "String",
        "description": "String",
        "thumbnail": "String",
        "video_url": "String",
        "episodes": [
            {
                "url": "String",
                "thumbnail": "String",
                "title": "String"
            },
            "..."
        ]
    }"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".anime-name .block--container")
        return "".join(v0.css("::text").getall())

    def _parse_description(self, v: Union[Selector, SelectorList]) -> Optional[str]:
        v0 = v
        with suppress(Exception):
            v1 = v0.css("#js-description_open-full")
            return "".join(v1.css("::text").getall())
        return None

    def _parse_thumbnail(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("#poster[src]")
        v1 = v0.attrib["src"]
        return f"https://sovetromantica.com{v1}"

    def _parse_video_url(self, v: Union[Selector, SelectorList]) -> Optional[str]:
        v0 = v
        with suppress(Exception):
            v1 = v0.get()
            return re.search(r'"file":"([^>]+\.m3u8)"\s*}', v1)[1]
        return None

    def _parse_episodes(self, v: Union[Selector, SelectorList]) -> List[T_EpisodeView]:
        return EpisodeView(v).parse()

    def parse(self) -> T_AnimePage:
        return {
            "title": self._parse_title(self._document),
            "description": self._parse_description(self._document),
            "thumbnail": self._parse_thumbnail(self._document),
            "video_url": self._parse_video_url(self._document),
            "episodes": self._parse_episodes(self._document),
        }
