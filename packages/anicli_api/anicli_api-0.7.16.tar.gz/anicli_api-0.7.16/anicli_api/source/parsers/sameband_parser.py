# autogenerated by ssc-gen DO NOT_EDIT

import re
from typing import List, TypedDict, Union


from parsel import Selector, SelectorList

T_OngoingPage = TypedDict(
    "T_OngoingPage",
    {
        "url": str,
        "title": str,
        "thumbnail": str,
    },
)
T_SearchPage = TypedDict(
    "T_SearchPage",
    {
        "title": str,
        "thumbnail": str,
        "url": str,
    },
)
T_AnimePage = TypedDict(
    "T_AnimePage",
    {
        "title": str,
        "alt_title": str,
        "description": str,
        "thumbnail": str,
        "player_url": str,
    },
)
T_PlaylistURLPage = TypedDict(
    "T_PlaylistURLPage",
    {
        "playlist_url": str,
    },
)


class OngoingPage:
    """GET https://sameband.studio/novinki

    [
        {
            "url": "String",
            "title": "String",
            "thumbnail": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, v: Union[Selector, SelectorList]) -> SelectorList:
        return v.css(".col-auto")

    def _parse_url(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("a[href]")
        return v0.attrib["href"]

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".col-auto .poster[title]")
        return v0.attrib["title"]

    def _parse_thumbnail(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("img.swiper-lazy[src]")
        v1 = v0.attrib["src"]
        return f"https://sameband.studio{v1}"

    def parse(self) -> List[T_OngoingPage]:
        return [
            {
                "url": self._parse_url(el),
                "title": self._parse_title(el),
                "thumbnail": self._parse_thumbnail(el),
            }
            for el in self._split_doc(self._document)
        ]


class SearchPage:
    """
        POST https://sameband.studio/index.php?do=search
        do=search&subaction=search&search_start=0&full_search=0&result_from=1&story=<QUERY>

        NOTE:
            search query len should be 4 or more characters. And in manual tests, works only cyrillic queries

        EXAMPLE:
            POST https://sameband.studio/index.php?do=search
        do=search&subaction=search&search_start=0&full_search=0&result_from=1&story=ВЕДЬ


    [
        {
            "title": "String",
            "thumbnail": "String",
            "url": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _split_doc(self, v: Union[Selector, SelectorList]) -> SelectorList:
        return v.css(".col-auto")

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".col-auto .poster[title]")
        return v0.attrib["title"]

    def _parse_thumbnail(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("img.swiper-lazy[src]")
        v1 = v0.attrib["src"]
        return f"https://sameband.studio{v1}"

    def _parse_url(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".image[href]")
        return v0.attrib["href"]

    def parse(self) -> List[T_SearchPage]:
        return [
            {
                "title": self._parse_title(el),
                "thumbnail": self._parse_thumbnail(el),
                "url": self._parse_url(el),
            }
            for el in self._split_doc(self._document)
        ]


class AnimePage:
    """
        GET https://sameband.studio/anime/<ANIME PATH>.html

        EXAMPLE:
            # https://sameband.studio/anime/20-госпожа-кагуя-3.html
            GET https://sameband.studio/anime/20-%D0%B3%D0%BE%D1%81%D0%BF%D0%BE%D0%B6%D0%B0-%D0%BA%D0%B0%D0%B3%D1%83%D1%8F-3.html


    {
        "title": "String",
        "alt_title": "String",
        "description": "String",
        "thumbnail": "String",
        "player_url": "String"
    }"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("h1.m-0")
        return "".join(v0.css("::text").getall())

    def _parse_alt_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".help")
        return "".join(v0.css("::text").getall())

    def _parse_description(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".limiter span")
        v1 = v0.css("::text").getall()
        return " ".join(v1)

    def _parse_thumbnail(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".image > img[src]")
        v1 = v0.attrib["src"]
        return f"https://sameband.studio{v1}"

    def _parse_player_url(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css(".player > .player-content > iframe[src]")
        v1 = v0.attrib["src"]
        return f"https://sameband.studio{v1}"

    def parse(self) -> T_AnimePage:
        return {
            "title": self._parse_title(self._document),
            "alt_title": self._parse_alt_title(self._document),
            "description": self._parse_description(self._document),
            "thumbnail": self._parse_thumbnail(self._document),
            "player_url": self._parse_player_url(self._document),
        }


class PlaylistURLPage:
    """GET https://sameband.studio/pl/a/<PLAYLIST NAME>.html

        EXAMPLE:
            GET https://sameband.studio/pl/a/Mashle_2nd_Season.html


    {
        "playlist_url": "String"
    }"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = Selector(document) if isinstance(document, str) else document

    def _parse_playlist_url(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.get()
        v1 = re.search("Playerjs[^>]+file:\\s*[\\\"']([^>]+)[\\\"']", v0)[1]
        v2 = v1.replace(" ", "_")
        return f"https://sameband.studio{v2}"

    def parse(self) -> T_PlaylistURLPage:
        return {
            "playlist_url": self._parse_playlist_url(self._document),
        }
