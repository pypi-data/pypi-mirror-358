{
  "shell.app.cli_handled": "CLI arguments processed, preparing to exit",
  "shell.app.init_environs": "Initializing environment system",
  "shell.app.apply_prompt": "Applying prompt configuration",
  "shell.app.launching": "Startup complete, entering debug mode",

  "shell.docs.manuals.init.opening_doc": "Opening help document: {target}",
  "shell.docs.manuals.init.doc_not_found": "Help document not found: {target}",
  "shell.docs.manuals.init.not_found_fallback": "No help found for command: {cmd}.md",

  "shell.engine.dispatcher.input_received": "Received user input '{line}'",
  "shell.engine.dispatcher.history_expanded": "History expanded '{original}' ‚Üí '{expanded}'",
  "shell.engine.dispatcher.parsed": "Parsed command: cmd='{cmd}', args={args}",
  "shell.engine.dispatcher.empty_skipped": "Empty command, skipping execution",
  "shell.engine.dispatcher.check_builtin": "Checking built-in command '{cmd}'",
  "shell.engine.dispatcher.fallback": "Falling back to external command '{cmd}'",
  "shell.engine.dispatcher.fallback_done": "External command '{cmd}' completed with exit code={code}",
  "shell.engine.exclamation.no_prev": "No previous command available",
  "shell.engine.exclamation.no_valid": "No valid previous command found",
  "shell.engine.exclamation.out_of_range": "History index out of range: !{idx}",
  "shell.engine.exclamation.no_match": "No matching command found for: !{prefix}",
  "shell.engine.fallback.not_found": "Command not found: {cmd}",
  "shell.engine.fallback.forbidden": "Command not allowed in pysh",
  "shell.engine.fallback.fallback_tag": "[fallback] Executing",
  "shell.engine.register.found": "Found built-in command: {cmd}",
  "shell.engine.register.not_found": "Built-in command not found: {cmd}",
  "shell.engine.register.exec_start": "Executing built-in command {cmd}, args: {args}",
  "shell.engine.register.exec_done": "Built-in command '{cmd}' finished with exit code={code}",
  "shell.engine.register.call_libc_trace": "{cmd} internal function call trace",
  "shell.engine.resolver.alias_expansion": "Alias expansion '{alias}' ‚Üí '{target}'",

  "shell.engine.builtin.alias.invalid_value": "invalid value for alias '{name}'",
  "shell.engine.builtin.alias.not_found": "alias: '{name}' not found",
  "shell.engine.builtin.arch.label": "Architecture:",
  "shell.engine.builtin.arch.label_raw": "Architecture (raw):",
  "shell.engine.builtin.arch.not_available": "No architecture information found",
  "shell.engine.builtin.arch.raw_failed_code": "Raw 'arch' command failed with exit code %d",
  "shell.engine.builtin.arch.not_found": "Raw 'arch' command not found",
  "shell.engine.builtin.arch.raw_unexpected": "Unexpected error while executing raw 'arch': %s",
  "shell.engine.builtin.arch.info_unexpected": "Failed to get architecture info: %s",
  "shell.engine.builtin.cd.not_found": "cd: no such file or directory: {path}",
  "shell.engine.builtin.cd.not_a_directory": "cd: not a directory: {path}",
  "shell.engine.builtin.cd.permission_denied": "cd: permission denied: {path}",
  "shell.engine.builtin.cd.unexpected_error": "cd: unexpected error: %s",
  "shell.engine.builtin.clear.unexpected_args": "clear: this command takes no arguments",
  "shell.engine.builtin.copyright.unexpected_args": "copyright: this command takes no arguments",
  "shell.engine.builtin.copyright.error_not_found": "(No copyright information found)",
  "shell.engine.builtin.date.invalid_option": "date: invalid option '{opt}'",
  "shell.engine.builtin.date.conflicting_options": "date: cannot use --iso and --timestamp together",
  "shell.engine.builtin.debug.enabled": "Debug mode: ON - current counter: {counter}",
  "shell.engine.builtin.debug.disabled": "Debug mode: OFF",
  "shell.engine.builtin.debug.invalid_args": "debug: invalid arguments",
  "shell.engine.builtin.debug.usage": "Usage: debug [reset|status|off|help]",
  "shell.engine.builtin.echo.invalid_option": "echo: invalid option '{opt}'",
  "shell.engine.builtin.echo.usage": "Usage: echo [-n] [text...]",
  "shell.engine.builtin.echo.error": "echo: error: {msg}",
  "shell.engine.builtin.env.too_many_args": "env: too many arguments",
  "shell.engine.builtin.env.invalid_option": "env: invalid option '{opt}'",
  "shell.engine.builtin.env.usage": "Usage: env [--json]",
  "shell.engine.builtin.env.no_env": "(No environment variables found)",
  "shell.engine.builtin.env.error_retrieval": "env: failed to retrieve environment variables: {msg}",
  "shell.engine.builtin.exit.too_many_args": "exit: too many arguments",
  "shell.engine.builtin.exit.invalid_range": "exit: exit code must be between 0 and 255",
  "shell.engine.builtin.exit.invalid_int": "exit: '{arg}' is not a valid integer",
  "shell.engine.builtin.exit.usage": "Usage: exit [exit_code]",
  "shell.engine.builtin.exit.session_end": "Session ended",
  "shell.engine.builtin.export.missing_args": "export: missing arguments",
  "shell.engine.builtin.export.usage": "Usage: export VAR=value [VAR2=value2 ...]",
  "shell.engine.builtin.export.tip_more_info": "Run 'help export' or '? export' for more information.",
  "shell.engine.builtin.export.invalid_format": "export: invalid format: {arg}",
  "shell.engine.builtin.export.expected_format": "Expected format: VAR=value",
  "shell.engine.builtin.export.protected_key": "export: '{key}' is a system environment variable and cannot be modified.",
  "shell.engine.builtin.export.internal_key_once": "export: '{key}' is protected and cannot be modified once set.",
  "shell.engine.builtin.export.error_set": "export: failed to set '{key}': {error}",
  "shell.engine.builtin.export.unexpected_error": "export: unexpected error: %s",
  "shell.engine.builtin.help.too_many_args": "help: too many arguments",
  "shell.engine.builtin.help.usage": "Usage: help [command]",
  "shell.engine.builtin.help.usage_list_docs": "       help -l | --list-docs",
  "shell.engine.builtin.help.available_topics": "Available Help Topics",
  "shell.engine.builtin.help.total_topics": "Total: {count} topic(s)",
  "shell.engine.builtin.help.show_index": "Showing help index (?)",
  "shell.engine.builtin.help.invalid_command": "help: invalid command name '{0}'",
  "shell.engine.builtin.help.viewer_error": "help: error running {0}: {1}",
  "shell.engine.builtin.help.countdown": "üìò Fallback to 'less' in {i} seconds...",
  "shell.engine.builtin.help.less_error": "help: error running less: {0}",
  "shell.engine.builtin.help.less_unavailable": "less is not available.",
  "shell.engine.builtin.help.fallback_path": "Manual page available at: {0}",
  "shell.engine.builtin.help.unexpected_error": "help: unexpected error: {0}",
  "shell.engine.builtin.help.no_viewer_found": "(No markdown viewer found)",
  "shell.engine.builtin.help.hint.brew": "Try `brew install glow` for a better TUI experience.",
  "shell.engine.builtin.help.hint.apt": "Download from https://github.com/charmbracelet/glow/releases instead of using apt.",
  "shell.engine.builtin.help.hint.yum": "Download from https://github.com/charmbracelet/glow/releases instead of using yum.",
  "shell.engine.builtin.help.hint.url": "Visit https://github.com/charmbracelet/glow to install glow manually.",
  "shell.engine.builtin.history.unexpected_args": "history: this command takes no arguments",
  "shell.engine.builtin.history.usage": "Usage: history",
  "shell.engine.builtin.history.empty": "(No command history)",
  "shell.engine.builtin.history.error_read": "history: error reading command history",
  "shell.engine.builtin.license.unexpected_args": "license: this command takes no arguments",
  "shell.engine.builtin.license.error_not_found": "(No LICENSE file found)",
  "shell.engine.builtin.locale.current_lang": "LANG=%s",
  "shell.engine.builtin.locale.supported": "Supported languages:",
  "shell.engine.builtin.locale.too_many_args": "locale: too many arguments",
  "shell.engine.builtin.locale.usage": "Usage: locale [<lang>] or locale --list",
  "shell.engine.builtin.locale.unsupported_lang": "locale: unsupported language '%s'",
  "shell.engine.builtin.locale.suggestion": "Use `locale --list` to see supported languages.",
  "shell.engine.builtin.locale.lang_set": "LANG set to: %s",
  "shell.engine.builtin.machinfo.invalid_option": "machinfo: invalid option '%s'",
  "shell.engine.builtin.machinfo.valid_options": "Valid options: --json, --short",
  "shell.engine.builtin.machinfo.conflict_options": "machinfo: cannot use --json and --short together",
  "shell.engine.builtin.machinfo.duplicate_option": "machinfo: duplicate options not allowed",
  "shell.engine.builtin.machinfo.no_info": "machinfo: unable to retrieve system information",
  "shell.engine.builtin.machinfo.error_retrieval": "machinfo: failed to retrieve system information",
  "shell.engine.builtin.printf.missing_format": "printf: missing format string",
  "shell.engine.builtin.printf.usage": "Usage: printf FORMAT [ARGUMENTS...]",
  "shell.engine.builtin.printf.help_hint": "Run 'help printf' or '? printf' for more information.",
  "shell.engine.builtin.printf.too_few_arguments": "printf: too few arguments provided for format string",
  "shell.engine.builtin.printf.error_format": "printf: format error: %s",
  "shell.engine.builtin.printf.error_value": "printf: value error: %s",
  "shell.engine.builtin.printf.unexpected_error": "printf: unexpected error: %s",
  "shell.engine.builtin.pwd.unexpected_args": "pwd: this command takes no arguments",
  "shell.engine.builtin.pwd.usage": "Usage: pwd",
  "shell.engine.builtin.pwd.empty": "pwd: unable to determine current directory",
  "shell.engine.builtin.pwd.error": "pwd: error getting current directory: %s",
  "shell.engine.builtin.sleep.missing_args": "sleep: missing arguments",
  "shell.engine.builtin.sleep.usage": "Usage: sleep SECONDS [--quiet] [--countdown=TEXT] [--done=TEXT]",
  "shell.engine.builtin.sleep.help_hint": "Run 'help sleep' or '? sleep' for more information.",
  "shell.engine.builtin.sleep.default_countdown": "‚è≥ Sleeping... {i}",
  "shell.engine.builtin.sleep.default_done": "‚úÖ Wake up!",
  "shell.engine.builtin.sleep.invalid_template": "sleep: countdown template must contain '{i}' placeholder",
  "shell.engine.builtin.sleep.invalid_option": "sleep: invalid option '%s'",
  "shell.engine.builtin.sleep.valid_options": "Valid options: --quiet, --countdown=TEXT, --done=TEXT",
  "shell.engine.builtin.sleep.missing_seconds": "sleep: missing time argument",
  "shell.engine.builtin.sleep.too_many_args": "sleep: too many arguments. Expected: sleep SECONDS [options...]",
  "shell.engine.builtin.sleep.invalid_interval": "sleep: invalid time interval '%s' (must be non-negative)",
  "shell.engine.builtin.sleep.expected_number": "Expected a number (integer or decimal)",
  "shell.engine.builtin.sleep.interrupted": "\nsleep: interrupted",
  "shell.engine.builtin.sleep.unexpected_error": "sleep: unexpected error: %s",
  "shell.engine.builtin.tree.not_found": "system 'tree' command not found.",
  "shell.engine.builtin.tree.install_tip": "Tip: install with 'brew install tree' or 'sudo apt install tree'.",
  "shell.engine.builtin.tree.missing_I_value": "tree: option -I requires an argument",
  "shell.engine.builtin.tree.error.permission_denied": "permission denied running tree",
  "shell.engine.builtin.tree.error.unexpected": "failed to run system tree",
  "shell.engine.builtin.uname.error_retrieval": "uname: failed to retrieve system information",
  "shell.engine.builtin.uname.invalid_option": "uname: invalid option '%s'",
  "shell.engine.builtin.uname.valid_options": "Valid options: -a, --all, -m, --machine, -r, --kernel-version, -s, --kernel-name",
  "shell.engine.builtin.uname.missing_os_name": "uname: OS name not available",
  "shell.engine.builtin.uname.label_uname": "Kernel Name: %s",
  "shell.engine.builtin.uname.label_arch": "Architecture: %s",
  "shell.engine.builtin.uname.label_kernel": "Kernel Version: %s",
  "shell.engine.builtin.uname.label_release": "OS Release: %s",
  "shell.engine.builtin.uname.error_output": "uname: error displaying output: %s",
  "shell.engine.builtin.uname.missing_arch": "uname: architecture info not available",
  "shell.engine.builtin.uname.missing_kernel": "uname: kernel version not available",
  "shell.engine.builtin.uname.missing_uname": "uname: kernel name not available",
  "shell.engine.builtin.uname.empty_result": "uname: no fields available to display",
  "shell.engine.builtin.uname.unexpected_error": "uname: unexpected error: %s",
  "shell.engine.builtin.which.missing_args": "which: missing arguments",
  "shell.engine.builtin.which.usage": "Usage: which COMMAND [COMMAND2 ...]",
  "shell.engine.builtin.which.more_info": "Run 'help which' or '? which' for more information.",
  "shell.engine.builtin.which.invalid_name": "which: invalid command name '%s'",
  "shell.engine.builtin.which.builtin": "%s: shell builtin",
  "shell.engine.builtin.which.alias": "%s: alias for '%s'",
  "shell.engine.builtin.which.alias_with_args": "%s: alias for '%s %s'",
  "shell.engine.builtin.which.not_found": "%s: not found",
  "shell.engine.builtin.which.error_searching": "which: error searching for '%s': %s",
  "shell.engine.builtin.which.unexpected_error": "which: unexpected error: %s",
  "shell.engine.builtin.whoami.usage_error": "whoami: this command takes no arguments",
  "shell.engine.builtin.whoami.usage_hint": "Usage: whoami",
  "shell.engine.builtin.whoami.error_retrieval": "whoami: unable to determine current user",
  "shell.engine.builtin.whoami.unexpected_error": "whoami: unexpected error: %s",

  "shell.environs.get_env.special_value": "Retrieve special shell variable '$%s=%s'",
  "shell.environs.get_env.normal_value": "Retrieve environment variable '%s=%s'",
  "shell.environs.set_env.set_value": "Set environment variable '%s=%s'",
  "shell.environs.set_env.skip_existing": "Environment variable '%s' already exists, skipping",
  "shell.environs.del_env.start": "Deleting environment variable: '%s'",
  "shell.environs.del_env.success": "Environment variable '%s' deleted successfully",
  "shell.environs.del_env.failed": "Environment variable '%s' does not exist, deletion failed",
  "shell.environs.all_env.dump": "Retrieving all environment variables",

  "shell.runtime.banner.login_shell": "Starting pysh as login shell",
  "shell.runtime.banner.interactive_shell": "Starting pysh as interactive shell",
  "shell.runtime.banner.sysinfo": "%s %s [powered by syscall/syslib.so, built %s] on %s (%s)",
  "shell.runtime.banner.tip": "Type \"help\", \"copyright\" or \"license\" for more information.",
  "shell.runtime.input.ctrl_d_exit": "exit 'Ctrl+D'",
  "shell.runtime.input.ctrl_d": "User pressed Ctrl+D (EOF) to exit",
  "shell.runtime.input.ctrl_c": "User interrupted with Ctrl+C",
  "shell.runtime.launcher.exit_farewell": "Exiting pysh. Goodbye.",
  "shell.runtime.reminder.minutes": "%d minutes",
  "shell.runtime.reminder.hours": "%d hours",
  "shell.runtime.reminder.partial_hours": "%d.%d hours",
  "shell.runtime.reminder.prefix": "PySH Tip:",
  "shell.runtime.reminder.worked_for": "You've been working for %d minutes ‚Äî %s",
  "shell.runtime.repl.loop_start": "REPL main loop started",
  "shell.runtime.repl.command_received": "Received command #{n}: '{cmd}'",

  "shell.sidecar.args.command.init_environs": "Initializing environment variable system",
  "shell.sidecar.args.command.split_semicolon": "Split by semicolon: {n} command segments",
  "shell.sidecar.args.command.done": "CLI argument handling complete, preparing to exit",
  "shell.sidecar.args.debug.startup": "PySH main flow started, debug mode enabled",
  "shell.sidecar.args.trace_echo.trace_enabled": "libc-level trace for echo/printf enabled",
  "shell.sidecar.args.version.version_format": "%s ¬∑ toolkit v%s",
  "shell.sidecar.parser.usage": "[options] [-c command]",
  "shell.sidecar.parser.description": "Explore Beyond the Prompt\nA teaching-oriented shell simulator from CLI to syscalls.",
  "shell.sidecar.parser.command.help": "\tExecute a single command and exit.",
  "shell.sidecar.parser.prompt_color.help": "\tSet the color of the shell prompt.\n\tOptions: blue (default), red, green, yellow,\n\t         magenta, cyan, white, gray, black",
  "shell.sidecar.parser.prompt_path.help": "\tSet the style of path shown in prompt.\n\tOptions: short (default) ‚Äî Show last directory only\n\t         full            ‚Äî Show full path\n\t         none            ‚Äî Hide path",
  "shell.sidecar.parser.history_size.help": "\tSet the maximum number of history entries (default: 1000).",
  "shell.sidecar.parser.history_size.out_of_range": "History size must be between {min} and {max}.",
  "shell.sidecar.parser.history_size.not_a_number": "History size must be a number",
  "shell.sidecar.parser.no_banner.help": "\tSkip the startup banner.",
  "shell.sidecar.parser.no_reminder.help": "\tDisable rest reminder messages.",
  "shell.sidecar.parser.quiet.help": "\tRun in quiet mode with minimal output.",
  "shell.sidecar.parser.safe.help": "\tEnable safe mode: block dangerous commands like 'rm -rf /'.",
  "shell.sidecar.parser.debug.help": "\tEnable shell layer debugging (command parsing, dispatch, execution flow).",
  "shell.sidecar.parser.trace_echo.help": "\tTrace the internal call path of echo/printf at the libc layer,\n\twith a tree-style visualization of function calls.",
  "shell.sidecar.parser.thinking.help": "\tEnable full introspection: equivalent to --debug + --trace-echo.",
  "shell.sidecar.parser.deep_thinking.help": "\tEnable cross-layer tracing of libc/native/syscall calls.\n\tOn Linux: attempts eBPF + native syscall tracing.\n\tOn macOS: simulates deep tracing via native syscalls.\n\tReserved for future use (not yet implemented).",
  "shell.sidecar.parser.help.help": "\tShow help message and exit.",
  "shell.sidecar.parser.version.help": "\tPrint version information and exit.",

  "inspector.debug.command.reset_done": "Counter reset.",
  "inspector.debug.command.status_prefix": "Status",
  "inspector.debug.command.status_enabled": "ENABLED",
  "inspector.debug.command.status_disabled": "DISABLED",
  "inspector.debug.command.counter": "Counter",
  "inspector.debug.command.disabled": "Debug mode disabled.",
  "inspector.debug.command.help_title": "Available commands:",
  "inspector.debug.command.help_reset": "Reset the debug counter",
  "inspector.debug.command.help_status": "Show debug status and counter",
  "inspector.debug.command.help_off": "Disable debug mode",
  "inspector.debug.command.help_help": "Show this help message",
  "inspector.debug.command.unknown_cmd": "Unknown command",
  "inspector.debug.command.help_suggestion": "try `debug help`",

  "inspector.trace.core.return_tag": "Return"
}