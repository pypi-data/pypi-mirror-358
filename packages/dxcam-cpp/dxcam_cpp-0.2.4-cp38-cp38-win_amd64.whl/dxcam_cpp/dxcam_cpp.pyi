import numpy

class DXCamera:
    def __init__(self, *args, **kwargs) -> None: ...
    def frame_buffer(self) -> FrameBuffer: ...
    def get_latest_frame(self) -> numpy.ndarray[numpy.uint8]: ...
    def grab(self, region: tuple | None = ...) -> numpy.ndarray[numpy.uint8] | None: ...
    def release(self) -> None: ...
    def start(self, region: tuple | None = ..., target_fps: int = ..., video_mode: bool = ..., delay: int = ...) -> None: ...
    def stop(self) -> None: ...
    @property
    def channel_size(self) -> int: ...
    @property
    def height(self) -> int: ...
    @property
    def is_capturing(self) -> bool: ...
    @property
    def max_buffer_len(self) -> int: ...
    @property
    def region(self) -> tuple: ...
    @property
    def rotation_angle(self) -> int: ...
    @property
    def width(self) -> int: ...

class FrameBuffer:
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self) -> list[numpy.ndarray[numpy.uint8]]: ...
    def __exit__(self, arg0: object, arg1: object, arg2: object) -> None: ...

def create(device_idx: int = ..., output_idx: int | None = ..., region: tuple | None = ..., output_color: str = ..., max_buffer_len: int = ...) -> DXCamera: ...
def device_info() -> str: ...
def output_info() -> str: ...
