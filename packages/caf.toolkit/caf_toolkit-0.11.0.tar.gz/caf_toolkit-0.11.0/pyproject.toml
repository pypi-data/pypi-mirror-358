[build-system]
requires = ["setuptools>=64.0.0", "versioningit"]
build-backend = "setuptools.build_meta"

[project]
name = "caf.toolkit"
dynamic = ["version", "dependencies", "optional-dependencies"]
description = "A toolkit of transport planning and appraisal functionalities"
readme = "README.md"
license = { "file" = "LICENSE" }
requires-python = ">=3.10"
authors = [{ name = "Transport for the North" }]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.urls]
"Bug Tracker" = "https://github.com/Transport-for-the-North/caf.toolkit/issues"
Homepage = "https://github.com/Transport-for-the-North/caf.toolkit"
Source = "https://github.com/Transport-for-the-North/caf.toolkit"
Documentation = "http://caftoolkit.rtfd.io/"

[project.scripts]
"caf.toolkit" = "caf.toolkit.__main__:main"

[tool.setuptools.dynamic]
dependencies = { "file" = "requirements.txt" }

[tool.setuptools.dynamic.optional-dependencies]
dev = { "file" = "requirements_dev.txt" }
docs = { "file" = "docs/requirements.txt" }
sparse = {"file" = "requirements_sparse.txt"}

# Dynamic versioning for editable installs
[tool.setuptools.cmdclass]
build_py = "versioningit.cmdclass.build_py"
sdist = "versioningit.cmdclass.sdist"

# Packaging options
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"caf.toolkit" = ["py.typed"]

# Linters
[tool.black]
line-length = 95
target-version = ['py310']

[tool.pylint.messages_control]
disable = [
    "line-too-long",    # Compatibility with black
    "too-many-lines",
    "use-dict-literal",
    "use-list-literal",
    "wrong-import-position", # Compatibility with isort
]

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]

skip = ["__init__.py", "_version.py"]
skip_glob = [".*"]

# Section commenting
import_heading_stdlib = "Built-Ins"
import_heading_thirdparty = "Third Party"
import_heading_firstparty = "Local Imports"

# Pylint settings
[tool.pylint.basic]
good-names = ["df", "fn", "ca", "tp", "to", "x", "x1", "x2", "i", "f", "q"]
extension-pkg-allow-list = ["pydantic"]

[tool.pylint.main]
ignore = ["__init__.py", "_version.py", "versioneer.py"]

[tool.pylint.design]
max-args = 10
max-attributes = 15
max-statements = 100

[tool.mypy]
packages = ["caf.toolkit"]
ignore_missing_imports = true
allow_redefinition = true

[tool.pydocstyle]
convention = "numpy"
match = '(?!_test)(?!test_)(?!__init__).*\.py'
add-ignore = [
    "D202", # Temporary compatibility with black
]

# Tests
[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = '--cov=caf --cov-report=xml --doctest-modules -n auto --ignore=examples'
# addopts = '--cov=caf --cov-report=xml --doctest-modules'
doctest_optionflags = "NORMALIZE_WHITESPACE"
markers = ["serial: marks tests to not run in parallel"]

[tool.coverage.report]
include_namespace_packages = true

# Versioning
[tool.versioningit.vcs]
method = "git"
match = ["v*"]
default-tag = "0.0.1"

[tool.versioningit.onbuild]
source-file = "src/caf/toolkit/_version.py"
build-file = "caf/toolkit/_version.py"

[tool.versioningit.format]
distance = "{base_version}+{distance}.{vcs}{rev}"
dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"

distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
