[build-system]
requires = [ "hatchling",]
build-backend = "hatchling.build"

[project]
name = "cccy"
version = "0.2.1"
description = "Python complexity measurement tool"
readme = "README.md"
license = "MIT"
classifiers = [ "Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.11", "Programming Language :: Python :: 3.12", "Programming Language :: Python :: 3.13", "Topic :: Software Development :: Quality Assurance",]
requires-python = ">=3.9"
dependencies = [ "mccabe>=0.7.0", "cognitive-complexity>=1.3.0", "click>=8.0.0", "tabulate>=0.9.0", "tomli>=1.2.0;python_version<'3.11'", "pydantic>=2.0.0", "pydantic-settings>=2.0.0",]
[[project.authors]]
name = "mmocchi"
email = "akihiro.matsumoto.exe@gmail.com"

[dependency-groups]
dev = [ "pytest-cov>=5.0.0", "ruff>=0.12.0", "types-tabulate>=0.9.0.20241207", "pre-commit>=3.5.0", "tox>=4.0.0", "mypy>=1.16.1", "pytest>=8.4.1", "import-linter>=2.3",]

[project.scripts]
cccy = "cccy.presentation.cli.main:main"

[project.urls]
Homepage = "https://github.com/mmocchi/cccy"
Repository = "https://github.com/mmocchi/cccy"
Issues = "https://github.com/mmocchi/cccy/issues"

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
[[tool.mypy.overrides]]
module = [ "mccabe.*", "cognitive_complexity.*", "tomli.*", "tomllib.*",]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "cccy.config"
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

[tool.cccy]
max-complexity = 10
max-cognitive = 7
exclude = [ "*/migrations/*", "*/venv/*", "*/.venv/*", "*/node_modules/*", "*/__pycache__/*", "*.egg-info/*",]
include = []
paths = [ "src/",]

[tool.importlinter]
root_packages = [ "cccy",]
[[tool.importlinter.contracts]]
name = "Clean Architecture: Domain Layer Independence"
type = "independence"
modules = [ "cccy.domain",]

[[tool.importlinter.contracts]]
name = "Clean Architecture: Application Layer Dependencies"
type = "forbidden"
source_modules = [ "cccy.application",]
forbidden_modules = [ "cccy.infrastructure", "cccy.presentation",]

[[tool.importlinter.contracts]]
name = "Clean Architecture: Infrastructure Dependencies"
type = "forbidden"
source_modules = [ "cccy.infrastructure",]
forbidden_modules = [ "cccy.application", "cccy.presentation",]

[[tool.importlinter.contracts]]
name = "Clean Architecture: Presentation Dependencies"
type = "forbidden"
source_modules = [ "cccy.presentation",]
forbidden_modules = [ "cccy.infrastructure",]
ignore_imports = [ "cccy.presentation.factories.service_factory -> cccy.infrastructure.calculators.concrete_calculators", "cccy.presentation.factories.service_factory -> cccy.infrastructure.config.manager", "cccy.presentation.factories.service_factory -> cccy.infrastructure.formatters.output", "cccy.presentation.factories.service_factory -> cccy.infrastructure.logging.config",]

[[tool.importlinter.contracts]]
name = "Clean Architecture: Shared Layer Independence"
type = "independence"
modules = [ "cccy.shared",]

[tool.ruff.lint]
select = [ "E", "W", "F", "I", "B", "C4", "UP", "S", "A", "RET", "SIM", "ARG", "PTH", "RUF", "ANN", "TCH", "D", "ERA", "TRY", "PERF", "PL", "PT",]
ignore = [ "E501", "S101", "S603", "S607", "ANN401", "D100", "D104", "D107", "D203", "D213", "D205", "D301", "D400", "D415", "PLR0913", "PLR0912", "PLR0915", "PLR2004", "PLC0414", "TRY003", "TRY300", "TRY301", "TRY400", "PERF401", "PT011",]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = [ "tests",]
python_files = [ "test_*.py",]
python_classes = [ "Test*",]
python_functions = [ "test_*",]
addopts = [ "--strict-markers", "--strict-config", "--cov=cccy", "--cov-report=term-missing", "--cov-report=html", "--cov-report=xml",]

[tool.coverage.run]
source = [ "src/cccy",]
branch = true

[tool.coverage.report]
exclude_lines = [ "pragma: no cover", "def __repr__", "if self.debug:", "if settings.DEBUG", "raise AssertionError", "raise NotImplementedError", "if 0:", "if __name__ == .__main__.:", "class .*\\bProtocol\\):", "@(abc\\.)?abstractmethod",]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [ "D401", "PLR2004",]

[tool.ruff.lint.isort]
known-first-party = [ "cccy",]

[tool.hatch.build.targets.wheel]
packages = [ "src/cccy",]

[tool.hatch.build.targets.sdist]
include = [ "/src", "/tests", "/README.md", "/LICENSE",]
