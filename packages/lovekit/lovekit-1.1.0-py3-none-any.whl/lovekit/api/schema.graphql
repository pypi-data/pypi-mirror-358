type Query {
  """Get a stream"""
  streams(filters: StreamFilter, pagination: OffsetPaginationInput): [Stream!]!

  """Get all solo broadcasts"""
  soloBroadcasts(filters: SoloBroadcastFilter, pagination: OffsetPaginationInput): [SoloBroadcast!]!

  """Get all collaborative broadcasts"""
  collaborativeBroadcasts(filters: CollaborativeBroadcastFilter, pagination: OffsetPaginationInput): [CollaborativeBroadcast!]!

  """Get a stream by ID"""
  stream(id: ID!): Stream!

  """Get a solo broadcast by ID"""
  soloBroadcast(id: ID!): SoloBroadcast!

  """Get a collaborative broadcast by ID"""
  collaborativeBroadcast(id: ID!): CollaborativeBroadcast!
}

type Stream {
  id: ID!
  kind: StreamKind!
  streamer: Streamer!
  title: String!
}

"""The state of a dask cluster"""
enum StreamKind {
  VIDEO
  AUDIO
}

type Streamer {
  id: ID!
  user: User!
  client: Client!

  """The solo broadcasts created by this agent, if any."""
  soloBroadcasts: SoloBroadcast

  """The collaborative broadcasts created by this agent."""
  collaborativeBroadcasts(filters: CollaborativeBroadcastFilter, pagination: OffsetPaginationInput): [CollaborativeBroadcast!]!
}

type User {
  sub: String!
  preferredUsername: String!
  roles: [String!]!
}

type Client {
  clientId: String!
  name: String!
}

type SoloBroadcast {
  id: ID!
  title: String!
  createdAt: DateTime!
  streamer: Streamer!
  videoStreams: [Stream!]!
  audioStreams: [Stream!]!
}

"""Date with time (isoformat)"""
scalar DateTime

type CollaborativeBroadcast {
  id: ID!
  title: String!
  createdAt: DateTime!

  """The streamers that are collaborating on this broadcast."""
  streamers(filters: StreamerFilter, pagination: OffsetPaginationInput): [Streamer!]!
  streams: [Stream!]!
  videoStreams: [Stream!]!
  audioStreams: [Stream!]!
}

"""Filter for Dask Clusters"""
input StreamerFilter {
  ids: [ID!] = null
  search: String = null
  AND: StreamerFilter
  OR: StreamerFilter
  NOT: StreamerFilter
  DISTINCT: Boolean
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int
}

"""Filter for Solo Broadcasts"""
input CollaborativeBroadcastFilter {
  ids: [ID!] = null
  search: String = null
  AND: CollaborativeBroadcastFilter
  OR: CollaborativeBroadcastFilter
  NOT: CollaborativeBroadcastFilter
  DISTINCT: Boolean
}

"""Filter for Streams"""
input StreamFilter {
  ids: [ID!] = null
  search: String = null
  AND: StreamFilter
  OR: StreamFilter
  NOT: StreamFilter
  DISTINCT: Boolean
}

"""Filter for Solo Broadcasts"""
input SoloBroadcastFilter {
  ids: [ID!] = null
  search: String = null
  AND: SoloBroadcastFilter
  OR: SoloBroadcastFilter
  NOT: SoloBroadcastFilter
  DISTINCT: Boolean
}

type Mutation {
  """Create a solo broadcast"""
  ensureSoloBroadcast(input: EnsureSoloBroadcastInput!): SoloBroadcast!

  """Create a collaborative broadcast"""
  ensureCollaborativeBroadcast(input: EnsureCollaborativeBroadcastInput!): CollaborativeBroadcast!

  """Create a stream and return the token for it"""
  ensureStream(input: EnsureStreamInput!): String!

  """Join a solo broadcast and return the token for it"""
  joinBroadcast(input: JoinBroadcastInput!): String!
}

input EnsureSoloBroadcastInput {
  instanceId: String = null
  title: String = null
}

input EnsureCollaborativeBroadcastInput {
  instanceId: String = null
  title: String = null
}

input EnsureStreamInput {
  broadcast: ID = null
  kind: StreamKind! = VIDEO
  title: String = null
}

input JoinBroadcastInput {
  broadcast: ID!
}

type Subscription {
  """Subscribe to stream events"""
  streams(dataset: ID = null): StreamEvent!
}

type StreamEvent {
  create: Stream
  delete: ID
  update: Stream
  moved: Stream
}