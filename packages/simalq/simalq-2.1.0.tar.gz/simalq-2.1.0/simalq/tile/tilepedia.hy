"Render all tile info screens into a single HTML page."


(import
  toolz [concat]
  metadict [MetaDict]
  simalq.color
  simalq.game-state [G]
  simalq.tile [Tile Player]
  simalq.display [color-tile])
(setv  T True  F False)


(defn get-info []
  "Compile all the tile info screens into a dictionary."

  ; Initialize `G`.
  (hy.I.simalq/quest.start-quest (hy.I.simalq/un-iq.iq-quest "Boot Camp 2"))
  (hy.I.simalq/quest.start-level 1)

  (setv tiles (lfor
    tt (.values Tile.types)
    (if (is tt Player) G.player (tt))))

  (MetaDict (dfor
    [name superclass] (.items Tile.superclasses)
    name (lfor
      tile tiles
      :if (isinstance tile superclass)
      (dict
        :id (.replace tile.stem " " "-")
        :long-name tile.name-with-article
        :mapsym (lfor
          cc (color-tile tile)
          (dict
            :char cc.char
            :colors (lfor
              color [
                (or cc.fg simalq.color.default-fg)
                (or cc.bg simalq.color.default-bg)]
              (get simalq.color.by-name color))
            :bold cc.bold))
        :bullets (lfor
          bullet (.info-bullets tile)
          :if bullet
          bullet)
        :flavor tile.flavor)))))


(defn html []
  "Use `get-info` to construct an HTML document."

  (defn mapsym [tile]
    (E.code :class "mapsym" #* (gfor
      cc tile.mapsym
      (E.span cc.char :style
        (.format "color: {}; background-color: {};{}"
          #* (gfor
            rgb cc.colors
            (.format "#{:02x}{:02x}{:02x}" #* rgb))
          (if cc.bold " font-weight: bold" ""))))))

  (setv info (get-info))

  (+ "<!DOCTYPE html>\n" (render-elem (E.html :lang "en"

    ; The `<head>`
    (E.head
      (E.meta :charset "UTF-8" :_self-closing T)
      (E.title "Tilepedia — Infinitesimal Quest 2 + ε")
      (E.style "
        h2, h3
           {border-top: thin solid}
        .mapsym
           {white-space: pre;
            margin-right: 1em}
        .flavor
           {white-space: pre-wrap}"))

    ; The page header
    (E.h1 "Tilepedia")
    (E.p
      "This page is a compendium of info screens for every tile type in "
      (E.a :href "https://hylang.org/simalq" "Infinitesimal Quest 2 + ε")
      ". It's generated by "
      (E.code "simalq.tile.tilepedia.html")
      ". It reflects default values for each type; "
      "in game, for example, monsters can have more than 1 HP.")

    ; The table of contents
    (E.nav
      (E.h2 "Contents")
      (E.ul #* (gfor
        [superclass-name tiles] (.items info)
        (E.li superclass-name (E.ul #* (gfor
          tile tiles
          (E.li (mapsym tile) (E.a tile.long-name
            :href (+ "#" tile.id)))))))))

    ; One section of info screens per superclass
    #* (concat (gfor
      [superclass-name tiles] (.items info)
      [(E.h2 superclass-name) #* (concat (gfor
        ; One info screen per tile type
        tile tiles
        [(E.h3 (mapsym tile) tile.long-name :id tile.id)
          (E.ul #* (gfor
            bullet tile.bullets
            (E.li #* (if (isinstance bullet tuple)
              [(E.strong (get bullet 0) ": ") (str (get bullet 1))]
              [(E.strong bullet)]))))
          (E.div :class "flavor" tile.flavor)]))]))))))

; In combination with `render-elem`, `E` works roughly like
; `lxml.builder.ElementMaker`.
(setv E ((type "ElementMaker" #() (dict
  :__getattr__ (fn [self tag]
    (fn [#* kids [_self-closing F] #** attrs]
      #(tag attrs kids _self-closing)))))))

(defn render-elem [x]
  (import html [escape :as hesc])
  (when (isinstance x str)
    (return (hesc x :quote F)))
  (setv [tag attrs kids self-closing] x)
  (.format "<{} {}>{}{}"
    (hesc tag)
    (.join " " (gfor
      [k v] (.items attrs)
      f"{(hesc k)}='{(hesc v)}'"))
    (.join "" (map render-elem kids))
    (if self-closing "" f"</{(hesc tag)}>")))


(when (= __name__ "__main__")
  (print (html)))
