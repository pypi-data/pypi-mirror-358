# coding: utf-8


"""
IGNORE:
    Nutanix Data Protection APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_dataprotection_py_client.models.vmm.v4.ahv.config.CategoryReference import CategoryReference  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.vmm.v4.ahv.config.OwnershipInfo import OwnershipInfo  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.vmm.v4.ahv.config.VmConfigOverrideSpecification import VmConfigOverrideSpecification  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.vmm.v4.ahv.config.VmRestoreNicConfigSpecification import VmRestoreNicConfigSpecification  # noqa: F401,E501

class AhvVmOverrideSpec(VmConfigOverrideSpecification):

    """Protected resource/recovery point restore that overrides the AHV VM configuration. The specified properties will be overridden for the restored VM.

    :param name: (:attr:`name`) Name of the VM to override with. If not specified, a name is chosen by the system and returned to the task entities when complete.
    :type name: 
     max=80 chars
    
    :param description: (:attr:`description`) VM description.
    :type description: 
    
    
    :param nic_spec: (:attr:`nic_spec`) 
    :type nic_spec: 
    
    
    :param categories: (:attr:`categories`) Categories to be associated with the VM on successful restore. If not specified, the VM is provisioned without any categories.
    :type categories: 
    
    
    :param ownership_info: (:attr:`ownership_info`) 
    :type ownership_info: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'nic_spec': 'vmm.v4.ahv.config.VmRestoreNicConfigSpecification',
        'categories': 'list[vmm.v4.ahv.config.CategoryReference]',
        'ownership_info': 'vmm.v4.ahv.config.OwnershipInfo',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'nic_spec': 'nicSpec',
        'categories': 'categories',
        'ownership_info': 'ownershipInfo',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, nic_spec=None, categories=None, ownership_info=None, *args, **kwargs):  # noqa: E501
        VmConfigOverrideSpecification.__init__(self, name, description, nic_spec, categories, ownership_info, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'dataprotection.v4.config.AhvVmOverrideSpec'

    def _initialize_object_version(self):
        return 'v4.r1'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AhvVmOverrideSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AhvVmOverrideSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

