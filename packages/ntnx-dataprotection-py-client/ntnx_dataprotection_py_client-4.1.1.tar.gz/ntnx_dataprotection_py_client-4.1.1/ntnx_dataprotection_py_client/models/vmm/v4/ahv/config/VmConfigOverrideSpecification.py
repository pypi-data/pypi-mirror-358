# coding: utf-8


"""
IGNORE:
    Nutanix Data Protection APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_dataprotection_py_client.models.vmm.v4.ahv.config.CategoryReference import CategoryReference  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.vmm.v4.ahv.config.OwnershipInfo import OwnershipInfo  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.vmm.v4.ahv.config.VmRestoreNicConfigSpecification import VmRestoreNicConfigSpecification  # noqa: F401,E501

class VmConfigOverrideSpecification(object):

    """To override the VM configuration captured in the snapshot (VM Recovery Point). Whatever values are specified in this object, will override the corresponding VM config entry from the snapshot. For example, if a new list of NICs are specified, the existing NIC details are replaced with the provided list. If the list of NICs is set to an empty list explicitly, the VM will be created with no NICs. For the case where the NICs are not set in the override spec at all, the NICs from the captured VM config will be attempted during restore.

    :param name: (:attr:`name`) Name of the VM to override with. If not specified, a name is chosen by the system and returned to the task entities when complete.
    :type name: 
     max=80 chars
    
    :param description: (:attr:`description`) VM description.
    :type description: 
    
    
    :param nic_spec: (:attr:`nic_spec`) 
    :type nic_spec: 
    
    
    :param categories: (:attr:`categories`) Categories to be associated with the VM on successful restore. If not specified, the VM is provisioned without any categories.
    :type categories: 
    
    
    :param ownership_info: (:attr:`ownership_info`) 
    :type ownership_info: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'nic_spec': 'vmm.v4.ahv.config.VmRestoreNicConfigSpecification',
        'categories': 'list[vmm.v4.ahv.config.CategoryReference]',
        'ownership_info': 'vmm.v4.ahv.config.OwnershipInfo',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'nic_spec': 'nicSpec',
        'categories': 'categories',
        'ownership_info': 'ownershipInfo',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, nic_spec=None, categories=None, ownership_info=None, *args, **kwargs):  # noqa: E501
        self.__name = None
        self.__description = None
        self.__nic_spec = None
        self.__categories = None
        self.__ownership_info = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if description is not None:
            self.__description = description
        if nic_spec is not None:
            self.__nic_spec = nic_spec
        if categories is not None:
            self.__categories = categories
        if ownership_info is not None:
            self.__ownership_info = ownership_info
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.config.VmConfigOverrideSpecification'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def name(self):
        """
        Name of the VM to override with. If not specified, a name is chosen by the system and returned to the task entities when complete.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        VM description.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):

        self.__description = description

    @property
    def nic_spec(self):
        """
        

        :type:
            :class:`~ntnx_dataprotection_py_client.models.vmm.v4.ahv.config.VmRestoreNicConfigSpecification`
        """  # noqa: E501
        return self.__nic_spec

    @nic_spec.setter
    def nic_spec(self, nic_spec):

        self.__nic_spec = nic_spec

    @property
    def categories(self):
        """
        Categories to be associated with the VM on successful restore. If not specified, the VM is provisioned without any categories.

        :type:
             list[ :class:`~ntnx_dataprotection_py_client.models.vmm.v4.ahv.config.CategoryReference` ]
        """  # noqa: E501
        return self.__categories

    @categories.setter
    def categories(self, categories):

        self.__categories = categories

    @property
    def ownership_info(self):
        """
        

        :type:
            :class:`~ntnx_dataprotection_py_client.models.vmm.v4.ahv.config.OwnershipInfo`
        """  # noqa: E501
        return self.__ownership_info

    @ownership_info.setter
    def ownership_info(self, ownership_info):

        self.__ownership_info = ownership_info

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VmConfigOverrideSpecification, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmConfigOverrideSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

