[project]
name = "flask-restx-marshmallow"
version = "0.2.0"
description = "A successful practice combining flask-restx with marshmallow"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "apispec>=6.8.2",
    "docstring-parser>=0.16",
    "flask-restx>=1.3.0",
    "marshmallow-dataclass>=8.7.1",
    "requests>=2.32.4",
    "webargs>=8.7.0",
]
license = "MIT"
license-files = ["LICENSE"]
authors = [
    { name = "1746104160", email = "shaojiahong2001@outlook.com"}
]
urls = { "homepage" = "https://1746104160.github.io/flask-restx-marshmallow/" }

[[tool.uv.index]]
url = "https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple"

[tool.poetry]
name = "flask_restx_marshmallow"
version = "0.2.0"
description = "A successful practice combining flask_restx with marshmallow"
authors = ["1746104160 <shaojiahong2001@outlook.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://1746104160.github.io/flask-restx-marshmallow/"
repository = "https://github.com/1746104160/flask-restx-marshmallow"
keywords = ["flask", "flask_restx", "sqlalchemy", "marshmallow"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Intended Audience :: Developers",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
]
include = ["LICENSE"]
packages = [{ include = "flask_restx_marshmallow" }]

[tool.poetry.dependencies]
python = ">=3.12,<4.0"

apispec = "^6.8.2"
docstring-parser = "^0.16"
flask-restx = "^1.3.0"
marshmallow-dataclass = "^8.7.1"
requests = "^2.32.4"
webargs = "^8.7.0"

[tool.poetry.group.dev.dependencies]
flask-sqlalchemy = "^3.1.1"
loguru = "^0.7.3"
markdown-callouts = "^0.4"
markdown-exec = "^1.8"
mkdocs = "^1.6"
mkdocs-coverage = "^1.0"
mkdocs-git-revision-date-localized-plugin = "^1.2"
mkdocs-llmstxt = "^0.1"
mkdocs-material = "^9.6.14"
mkdocs-minify-plugin = "^0.8"
mkdocs-redirects = "^1.2.1"
mkdocs-section-index = "^0.3"
mkdocstrings = {version = "^0.29.1", extras = ["python"]}
mkdocstrings-python = "^1.16.2"
orjson = "^3.10.18"
pytest = "^8.4.1"
ruff = "^0.12.1"
sqlalchemy-utils = "^0.41.2"
ujson = "^5.10.0"
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[dependency-groups]
dev = [
    "flask-sqlalchemy>=3.1.1",
    "loguru>=0.7.3",
    "markdown-callouts>=0.4",
    "markdown-exec>=1.8",
    "mkdocs-autorefs>=1.4.2",
    "mkdocs-coverage>=1.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2",
    "mkdocs-llmstxt>=0.1",
    "mkdocs-material>=9.6.14",
    "mkdocs-minify-plugin>=0.8",
    "mkdocs-redirects>=1.2.1",
    "mkdocs-section-index>=0.3",
    "mkdocs>=1.6",
    "mkdocstrings-python>=1.16.2",
    "mkdocstrings[python]>=0.29.1",
    "orjson>=3.10.18",
    "pymdown-extensions>=10.16",
    "pytest>=8.4.1",
    "ruff>=0.12.1",
    "sqlalchemy-utils>=0.41.2",
    "ujson>=5.10.0",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".conda"
]

# Same as Black.
line-length = 88
indent-width = 4

# Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
preview = true
select = ["ALL"]
ignore = ["CPY001"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
preview = true
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.flake8-copyright]
author = "1746104160"

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__schema__"]

[tool.pytest.ini_options]
testpaths = "tests/"
