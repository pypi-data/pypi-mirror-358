"""
Convert .qmd file to python file.

Acknowledgements
----------------
Some parts of this module were generated by and adapted from Perplexity.
"""

from pathlib import Path
import re
import warnings

from .args import CustomArgumentParser


def _qmd_lines_to_py_lines(qmd_lines):
    """
    Convert lines from a .qmd file to .py lines, preserving alignment.

    Arguments
    ---------
    qmd_lines : list
        List containing the lines from a .qmd file.

    Returns
    -------
    py_lines : list
        List containing the converted lines, with python code retained and
        all other lines converted to "# -".

    Notes
    -----
    Adapted from code generated by Perplexity.
    """
    py_lines = []
    in_python = False
    for line in qmd_lines:
        # Remove the trailing new line
        original_line = line.rstrip("\n")
        # Check if the current line is the start of a python code chunk
        if re.match(r"^```\{python\}", original_line):
            in_python = True
            py_lines.append("# %% [python]")
            continue
        # If line is "```" then mark as outside (as may be end of python)
        if original_line.strip() == "```":
            in_python = False
            py_lines.append("# -")
            continue
        # Store original or blank line depending on state
        if in_python:
            py_lines.append(original_line)
        else:
            py_lines.append("# -")
    return py_lines


def convert_qmd_to_py(qmd_path, output_path=None, verbose=False):
    """
    Convert a Quarto (.qmd) file to Python (.py) file, preserving line
    alignment.

    Parameters
    ----------
    qmd_path : str or Path
        Path to the input .qmd file.
    output_path : str or Path, optional
        Path for the output .py file. If None, uses qmd_path with .py suffix.
    verbose : bool, optional
        If True, print detailed progress information.

    Examples
    --------
    >>> convert_qmd_to_py("input.qmd", "output.py", True)
    # To use from the command line:
    # $ python converter.py input.qmd [output.py] [-v]

    Notes
    -----
    Adapted from code generated by Perplexity.
    """
    # Convert input path to a Path object
    qmd_path = Path(qmd_path)

    # Determine output path. If provided, convert to a Path object. If not,
    # the file extension of the input file to `.py`
    if output_path is None:
        output_path = qmd_path.with_suffix(".py")
    else:
        output_path = Path(output_path)

    if verbose:
        print(f"Converting {qmd_path} to {output_path}")

    try:
        # Open and read the QMD file, storing all lines in qmd_lines
        with open(qmd_path, "r", encoding="utf-8") as f:
            qmd_lines = f.readlines()

        # Iterate over lines, keeping python code, and setting rest to "# -"
        py_lines = _qmd_lines_to_py_lines(qmd_lines=qmd_lines)

        # Write the output file
        with open(output_path, "w", encoding="utf-8") as f:
            f.write("\n".join(py_lines) + "\n")

        if verbose:
            print(f"✓ Successfully converted {qmd_path} to {output_path}")

        # Check that line counts match
        qmd_len = len(qmd_lines)
        py_len = len(py_lines)
        if qmd_len == py_len:
            if verbose:
                print(f"  Line count: {qmd_len} → {py_len} ")
        else:
            warnings.warn(f"Line count mismatch: {qmd_len} → {py_len}",
                          RuntimeWarning)

    # Error messages if issues finding/accessing files, or otherwise.
    except FileNotFoundError:
        print(f"Error: Input file '{qmd_path}' not found")
    except PermissionError:
        print(f"Error: Permission denied accessing '{qmd_path}' " +
              f"or '{output_path}'")
    # Intentional broad catch for unexpected conversion errors
    # pylint: disable=broad-except
    except Exception as e:
        print(f"Error during conversion: {e}")


# To ensure it executes if run from terminal:
if __name__ == "__main__":

    # Set up argument parser with help statements
    parser = CustomArgumentParser(
        description="Convert .qmd file to python file.")
    parser.add_argument("qmd_path", help="Path to the input .qmd file.")
    parser.add_argument("output_path", nargs="?", default=None,
                        help="(Optional) path to the output .py file.")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Print detailed progress information.")
    args = parser.parse_args()

    # Pass arguments to function and run it
    convert_qmd_to_py(args.qmd_path, args.output_path, args.verbose)
