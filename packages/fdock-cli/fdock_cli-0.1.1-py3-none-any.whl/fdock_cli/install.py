import os
import shutil
from pathlib import Path

def get_bash_profile():
    """Retourne le chemin du .bash_profile (fichier officiel Git Bash)."""
    return os.path.join(str(Path.home()), ".bash_profile")

def get_scripts_dir():
    """Retourne le chemin du dossier des scripts dans le package."""
    return os.path.join(os.path.dirname(__file__), "scripts")

def install_scripts():
    """Installe les scripts dans ~/.fdock et configure .bash_profile."""
    # Créer le dossier .fdock dans home
    home = str(Path.home())
    fdock_dir = os.path.join(home, ".fdock")
    os.makedirs(fdock_dir, exist_ok=True)
    
    # Copier les scripts
    scripts_dir = get_scripts_dir()
    for script in os.listdir(scripts_dir):
        if script.endswith('.sh'):
            src = os.path.join(scripts_dir, script)
            dst = os.path.join(fdock_dir, script)
            shutil.copy2(src, dst)
            # Rendre le script exécutable
            os.chmod(dst, 0o755)
    
    # Configurer .bash_profile (fichier officiel Git Bash)
    bash_profile = get_bash_profile()
    fdock_source = """
# fdock-cli configuration
if [ -d ~/.fdock ]; then
    for script in ~/.fdock/*.sh; do
        [ -f "$script" ] && source "$script"
    done
fi
"""
    
    # Ajouter la configuration si elle n'existe pas déjà
    if os.path.exists(bash_profile):
        with open(bash_profile, 'r') as f:
            content = f.read()
        if "fdock-cli configuration" not in content:
            with open(bash_profile, 'a') as f:
                f.write(fdock_source)
    else:
        # Si .bash_profile n'existe pas (cas rare), le créer
        with open(bash_profile, 'w') as f:
            f.write("# generated by Git for Windows\n\n")
            f.write(fdock_source)

def main():
    """Point d'entrée principal."""
    try:
        install_scripts()
        print("✨ Installation réussie dans .bash_profile !")
        print("Pour activer fdock-cli :")
        print("1. Redémarrez votre terminal, ou")
        print("2. Exécutez : source ~/.bash_profile")
    except Exception as e:
        print(f"❌ Erreur lors de l'installation : {str(e)}")
        return 1
    return 0

if __name__ == "__main__":
    main() 