//! This file generated by [rtl-generator](https://github.com/burnettlab/rtl-generator.git), written by Brandon Hippe

// #{(param_table)}
//! ## Generator arguments:
//! |  Argument |   Value   |
//! | :-------: | :-------: |
//! | adc_width |     4     |
//! |    amp    |     15    |
//! |  clk_freq |  16000000 |
//! |    fsym   |  1000000  |
//! |   ifreq   | 1250000.0 |
// #{/(param_table)}

// #{(included_modules)}
// INCLUDED MODULES GO HERE
// #{/(included_modules)}

// #{(template_table)}
//! ### Template Table:
//! |   Template   |  0 |  1 |  2 |  3 |   4 |   5 |   6 |   7 |   8 |   9 |  10 |  11 |  12 |  13 |  14 |  15 |
//! | :----------: |--: |--: |--: |--: |---: |---: |---: |---: |---: |---: |---: |---: |---: |---: |---: |---: |
//! | 0 Template I | 15 | 14 | 11 |  6 |   0 |  -6 | -11 | -14 | -15 | -14 | -11 |  -6 |   0 |   6 |  11 |  14 |
//! | 0 Template Q |  0 |  6 | 11 | 14 |  15 |  14 |  11 |   6 |   0 |  -6 | -11 | -14 | -15 | -14 | -11 |  -6 |
//! | 1 Template I | 15 | 12 |  6 | -3 | -11 | -15 | -14 |  -8 |   0 |   8 |  14 |  15 |  11 |   3 |  -6 | -12 |
//! | 1 Template Q |  0 |  8 | 14 | 15 |  11 |   3 |  -6 | -12 | -15 | -12 |  -6 |   3 |  11 |  15 |  14 |   8 |
// #{/(template_table)}

module matched_filter #(
    parameter int SAMPLE_RATE =  /* #{(samples_per_symbol)} */ 16  /* #{/(samples_per_symbol)} */,
    parameter int DATA_WIDTH =  /* #{(adc_width)} */ 4  /* #{/(adc_width)} */
) (
    input logic clk,
    input logic en,
    input logic resetn,

    input logic signed [DATA_WIDTH-1:0] i_data,
    q_data,
    output logic demodulated_bit
);

  localparam int PIPELINE_STAGES = 1;

  localparam int TEMPLATE_WIDTH =  /* #{(template_width)} */ 5  /* #{/(template_width)} */;
  localparam int PROD_WIDTH = DATA_WIDTH + TEMPLATE_WIDTH;
  localparam int PROD_SUM_WIDTH = $clog2(SAMPLE_RATE) + PROD_WIDTH;
  localparam int SQR_WIDTH = 2 * PROD_SUM_WIDTH;
  localparam int SCORE_WIDTH = SQR_WIDTH + 1;


  logic signed [SAMPLE_RATE-1:0][DATA_WIDTH-1:0] i_buffer, q_buffer;
  always_ff @(posedge clk or negedge resetn) begin : input_buffer
    if (~resetn) begin
      i_buffer <= 0;
      q_buffer <= 0;
    end else if (en) begin
      i_buffer <= {i_buffer[SAMPLE_RATE-2:0], i_data};
      q_buffer <= {q_buffer[SAMPLE_RATE-2:0], q_data};
    end
  end

  logic signed [SCORE_WIDTH-1:0] low_score, high_score;
  logic signed [PROD_SUM_WIDTH-1:0]
      low_i_i_prod_sum,
      low_i_q_prod_sum,
      low_q_i_prod_sum,
      low_q_q_prod_sum,
      high_i_i_prod_sum,
      high_i_q_prod_sum,
      high_q_i_prod_sum,
      high_q_q_prod_sum;
  logic signed [SQR_WIDTH-1:0]
      low_i_i_sqr,
      low_i_q_sqr,
      low_q_i_sqr,
      low_q_q_sqr,
      high_i_i_sqr,
      high_i_q_sqr,
      high_q_i_sqr,
      high_q_q_sqr;

  always_comb begin : calculate_scores
    /*verilator lint_off WIDTH*/
    // #{(template_product_sum)}
    // Low template i product and sum
    low_i_i_prod_sum = 0;
    low_q_i_prod_sum = 0;
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[15] << 0);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[15] << 0);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[15] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[15] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[15] << 2);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[15] << 2);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[15] << 3);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[15] << 3);

    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[14] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[14] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[14] << 2);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[14] << 2);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[14] << 3);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[14] << 3);

    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[13] << 0);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[13] << 0);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[13] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[13] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[13] << 3);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[13] << 3);

    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[12] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[12] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[12] << 2);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[12] << 2);

    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[10] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[10] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[10] << 2);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[10] << 2);

    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[9] << 0);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[9] << 0);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[9] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[9] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[9] << 3);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[9] << 3);

    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[8] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[8] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[8] << 2);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[8] << 2);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[8] << 3);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[8] << 3);

    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[7] << 0);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[7] << 0);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[7] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[7] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[7] << 2);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[7] << 2);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[7] << 3);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[7] << 3);

    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[6] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[6] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[6] << 2);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[6] << 2);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[6] << 3);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[6] << 3);

    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[5] << 0);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[5] << 0);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[5] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[5] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[5] << 3);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[5] << 3);

    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[4] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[4] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum - (i_buffer[4] << 2);
    low_q_i_prod_sum = low_q_i_prod_sum - (q_buffer[4] << 2);

    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[2] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[2] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[2] << 2);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[2] << 2);

    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[1] << 0);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[1] << 0);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[1] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[1] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[1] << 3);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[1] << 3);

    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[0] << 1);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[0] << 1);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[0] << 2);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[0] << 2);
    low_i_i_prod_sum = low_i_i_prod_sum + (i_buffer[0] << 3);
    low_q_i_prod_sum = low_q_i_prod_sum + (q_buffer[0] << 3);

    // Low template q product and sum
    low_i_q_prod_sum = 0;
    low_q_q_prod_sum = 0;
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[14] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[14] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[14] << 2);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[14] << 2);

    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[13] << 0);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[13] << 0);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[13] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[13] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[13] << 3);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[13] << 3);

    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[12] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[12] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[12] << 2);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[12] << 2);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[12] << 3);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[12] << 3);

    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[11] << 0);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[11] << 0);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[11] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[11] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[11] << 2);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[11] << 2);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[11] << 3);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[11] << 3);

    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[10] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[10] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[10] << 2);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[10] << 2);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[10] << 3);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[10] << 3);

    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[9] << 0);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[9] << 0);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[9] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[9] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[9] << 3);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[9] << 3);

    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[8] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[8] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum + (i_buffer[8] << 2);
    low_q_q_prod_sum = low_q_q_prod_sum + (q_buffer[8] << 2);

    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[6] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[6] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[6] << 2);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[6] << 2);

    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[5] << 0);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[5] << 0);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[5] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[5] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[5] << 3);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[5] << 3);

    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[4] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[4] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[4] << 2);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[4] << 2);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[4] << 3);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[4] << 3);

    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[3] << 0);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[3] << 0);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[3] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[3] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[3] << 2);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[3] << 2);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[3] << 3);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[3] << 3);

    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[2] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[2] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[2] << 2);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[2] << 2);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[2] << 3);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[2] << 3);

    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[1] << 0);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[1] << 0);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[1] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[1] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[1] << 3);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[1] << 3);

    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[0] << 1);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[0] << 1);
    low_i_q_prod_sum = low_i_q_prod_sum - (i_buffer[0] << 2);
    low_q_q_prod_sum = low_q_q_prod_sum - (q_buffer[0] << 2);

    // High template i product and sum
    high_i_i_prod_sum = 0;
    high_q_i_prod_sum = 0;
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[15] << 0);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[15] << 0);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[15] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[15] << 1);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[15] << 2);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[15] << 2);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[15] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[15] << 3);

    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[14] << 2);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[14] << 2);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[14] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[14] << 3);

    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[13] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[13] << 1);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[13] << 2);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[13] << 2);

    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[12] << 0);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[12] << 0);
    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[12] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[12] << 1);

    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[11] << 0);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[11] << 0);
    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[11] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[11] << 1);
    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[11] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[11] << 3);

    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[10] << 0);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[10] << 0);
    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[10] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[10] << 1);
    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[10] << 2);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[10] << 2);
    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[10] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[10] << 3);

    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[9] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[9] << 1);
    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[9] << 2);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[9] << 2);
    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[9] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[9] << 3);

    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[8] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[8] << 3);

    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[6] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[6] << 3);

    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[5] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[5] << 1);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[5] << 2);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[5] << 2);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[5] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[5] << 3);

    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[4] << 0);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[4] << 0);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[4] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[4] << 1);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[4] << 2);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[4] << 2);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[4] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[4] << 3);

    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[3] << 0);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[3] << 0);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[3] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[3] << 1);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[3] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[3] << 3);

    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[2] << 0);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[2] << 0);
    high_i_i_prod_sum = high_i_i_prod_sum + (i_buffer[2] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum + (q_buffer[2] << 1);

    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[1] << 1);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[1] << 1);
    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[1] << 2);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[1] << 2);

    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[0] << 2);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[0] << 2);
    high_i_i_prod_sum = high_i_i_prod_sum - (i_buffer[0] << 3);
    high_q_i_prod_sum = high_q_i_prod_sum - (q_buffer[0] << 3);

    // High template q product and sum
    high_i_q_prod_sum = 0;
    high_q_q_prod_sum = 0;
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[14] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[14] << 3);

    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[13] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[13] << 1);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[13] << 2);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[13] << 2);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[13] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[13] << 3);

    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[12] << 0);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[12] << 0);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[12] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[12] << 1);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[12] << 2);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[12] << 2);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[12] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[12] << 3);

    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[11] << 0);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[11] << 0);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[11] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[11] << 1);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[11] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[11] << 3);

    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[10] << 0);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[10] << 0);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[10] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[10] << 1);

    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[9] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[9] << 1);
    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[9] << 2);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[9] << 2);

    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[8] << 2);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[8] << 2);
    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[8] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[8] << 3);

    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[7] << 0);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[7] << 0);
    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[7] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[7] << 1);
    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[7] << 2);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[7] << 2);
    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[7] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[7] << 3);

    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[6] << 2);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[6] << 2);
    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[6] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[6] << 3);

    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[5] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[5] << 1);
    high_i_q_prod_sum = high_i_q_prod_sum - (i_buffer[5] << 2);
    high_q_q_prod_sum = high_q_q_prod_sum - (q_buffer[5] << 2);

    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[4] << 0);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[4] << 0);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[4] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[4] << 1);

    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[3] << 0);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[3] << 0);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[3] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[3] << 1);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[3] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[3] << 3);

    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[2] << 0);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[2] << 0);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[2] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[2] << 1);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[2] << 2);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[2] << 2);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[2] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[2] << 3);

    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[1] << 1);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[1] << 1);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[1] << 2);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[1] << 2);
    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[1] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[1] << 3);

    high_i_q_prod_sum = high_i_q_prod_sum + (i_buffer[0] << 3);
    high_q_q_prod_sum = high_q_q_prod_sum + (q_buffer[0] << 3);
    // #{/(template_product_sum)}
    /*verilator lint_on WIDTH*/

    // Calculate the low score by squaring and summing the products
    low_i_i_sqr = low_i_i_prod_sum * low_i_i_prod_sum;
    low_i_q_sqr = low_i_q_prod_sum * low_i_q_prod_sum;
    low_q_i_sqr = low_q_i_prod_sum * low_q_i_prod_sum;
    low_q_q_sqr = low_q_q_prod_sum * low_q_q_prod_sum;
    low_score = low_i_i_sqr + low_i_q_sqr + low_q_i_sqr + low_q_q_sqr;

    // Calculate the low score by squaring and summing the products
    high_i_i_sqr = high_i_i_prod_sum * high_i_i_prod_sum;
    high_i_q_sqr = high_i_q_prod_sum * high_i_q_prod_sum;
    high_q_i_sqr = high_q_i_prod_sum * high_q_i_prod_sum;
    high_q_q_sqr = high_q_q_prod_sum * high_q_q_prod_sum;
    high_score = high_i_i_sqr + high_i_q_sqr + high_q_i_sqr + high_q_q_sqr;

    // Determine the bit
    demodulated_bit = high_score > low_score;
  end

endmodule
