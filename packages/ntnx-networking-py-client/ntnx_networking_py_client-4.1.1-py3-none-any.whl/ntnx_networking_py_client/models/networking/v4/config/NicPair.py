# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.networking.v4.config.HealthStatus import HealthStatus  # noqa: F401,E501
from ntnx_networking_py_client.models.networking.v4.config.NicHighAvailabilityState import NicHighAvailabilityState  # noqa: F401,E501

class NicPair(object):

    """List of all NIC pairs part of this network function.

    :param ingress_nic_reference: (:attr:`ingress_nic_reference`) UUID of NIC which will be used as ingress NIC.
    :type ingress_nic_reference: required
    
    
    :param egress_nic_reference: (:attr:`egress_nic_reference`) UUID of NIC which will be used as egress NIC.
    :type egress_nic_reference: required
    
    
    :param vm_reference: (:attr:`vm_reference`) VM UUID which both ingress/egress NICs are part of.
    :type vm_reference: 
    
    
    :param is_enabled: (:attr:`is_enabled`) Administrative state of the NIC pair. If it's set to False, the NIC pair will not be selected as ACTIVE network function.  (**Default** True)
    :type is_enabled: required
    
    
    :param high_availability_state: (:attr:`high_availability_state`) 
    :type high_availability_state: 
    
    
    :param data_plane_health_status: (:attr:`data_plane_health_status`) 
    :type data_plane_health_status: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ingress_nic_reference': 'str',
        'egress_nic_reference': 'str',
        'vm_reference': 'str',
        'is_enabled': 'bool',
        'high_availability_state': 'networking.v4.config.NicHighAvailabilityState',
        'data_plane_health_status': 'networking.v4.config.HealthStatus',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ingress_nic_reference': 'ingressNicReference',
        'egress_nic_reference': 'egressNicReference',
        'vm_reference': 'vmReference',
        'is_enabled': 'isEnabled',
        'high_availability_state': 'highAvailabilityState',
        'data_plane_health_status': 'dataPlaneHealthStatus',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ingress_nic_reference=None, egress_nic_reference=None, vm_reference=None, is_enabled=True, high_availability_state=None, data_plane_health_status=None, *args, **kwargs):  # noqa: E501
        self.__ingress_nic_reference = None
        self.__egress_nic_reference = None
        self.__vm_reference = None
        self.__is_enabled = None
        self.__high_availability_state = None
        self.__data_plane_health_status = None
        self.discriminator = None
        self.__ingress_nic_reference = ingress_nic_reference
        self.__egress_nic_reference = egress_nic_reference
        if vm_reference is not None:
            self.__vm_reference = vm_reference
        self.__is_enabled = is_enabled
        if high_availability_state is not None:
            self.__high_availability_state = high_availability_state
        if data_plane_health_status is not None:
            self.__data_plane_health_status = data_plane_health_status
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'networking.v4.config.NicPair'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def ingress_nic_reference(self):
        """
        UUID of NIC which will be used as ingress NIC.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ingress_nic_reference

    @ingress_nic_reference.setter
    def ingress_nic_reference(self, ingress_nic_reference):
        if ingress_nic_reference is None:
            raise ValueError("Invalid value for `ingress_nic_reference`, must not be `None`")  # noqa: E501
        if ingress_nic_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', ingress_nic_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `ingress_nic_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__ingress_nic_reference = ingress_nic_reference

    @property
    def egress_nic_reference(self):
        """
        UUID of NIC which will be used as egress NIC.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__egress_nic_reference

    @egress_nic_reference.setter
    def egress_nic_reference(self, egress_nic_reference):
        if egress_nic_reference is None:
            raise ValueError("Invalid value for `egress_nic_reference`, must not be `None`")  # noqa: E501
        if egress_nic_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', egress_nic_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `egress_nic_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__egress_nic_reference = egress_nic_reference

    @property
    def vm_reference(self):
        """
        VM UUID which both ingress/egress NICs are part of.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__vm_reference

    @vm_reference.setter
    def vm_reference(self, vm_reference):
        if vm_reference is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', vm_reference):  # noqa: E501
            raise ValueError(r"Invalid value for `vm_reference`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__vm_reference = vm_reference

    @property
    def is_enabled(self):
        """
        Administrative state of the NIC pair. If it's set to False, the NIC pair will not be selected as ACTIVE network function. 

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")  # noqa: E501

        self.__is_enabled = is_enabled

    @property
    def high_availability_state(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.NicHighAvailabilityState`
        """  # noqa: E501
        return self.__high_availability_state

    @high_availability_state.setter
    def high_availability_state(self, high_availability_state):

        self.__high_availability_state = high_availability_state

    @property
    def data_plane_health_status(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.HealthStatus`
        """  # noqa: E501
        return self.__data_plane_health_status

    @data_plane_health_status.setter
    def data_plane_health_status(self, data_plane_health_status):

        self.__data_plane_health_status = data_plane_health_status

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(NicPair, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NicPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

