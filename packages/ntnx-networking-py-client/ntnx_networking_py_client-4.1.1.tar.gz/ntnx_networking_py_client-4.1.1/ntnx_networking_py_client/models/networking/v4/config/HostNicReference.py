# coding: utf-8


"""
IGNORE:
    Nutanix Networking APIs

    Manage networking configuration on Nutanix clusters, including AHV and advanced networking.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_networking_py_client.models.networking.v4.config.HostNicComplianceStatus import HostNicComplianceStatus  # noqa: F401,E501

class HostNicReference(object):

    """Host NIC reference associated with the NIC Profile.

    :param ext_id: (:attr:`ext_id`) UUID of the Host Nic.
    :type ext_id: 
    
    
    :param num_v_fs: (:attr:`num_v_fs`) Number of VFs associated with the Host Nic.
    :type num_v_fs: 
    
     min=0, max=128
    :param associated_vm_nic_references: (:attr:`associated_vm_nic_references`) List of VM NICs references associated with the Host Nic.
    :type associated_vm_nic_references: 
    
    
    :param compliance_status: (:attr:`compliance_status`) 
    :type compliance_status: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ext_id': 'str',
        'num_v_fs': 'int',
        'associated_vm_nic_references': 'list[str]',
        'compliance_status': 'networking.v4.config.HostNicComplianceStatus',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ext_id': 'extId',
        'num_v_fs': 'numVFs',
        'associated_vm_nic_references': 'associatedVmNicReferences',
        'compliance_status': 'complianceStatus',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ext_id=None, num_v_fs=None, associated_vm_nic_references=None, compliance_status=None, *args, **kwargs):  # noqa: E501
        self.__ext_id = None
        self.__num_v_fs = None
        self.__associated_vm_nic_references = None
        self.__compliance_status = None
        self.discriminator = None
        if ext_id is not None:
            self.__ext_id = ext_id
        if num_v_fs is not None:
            self.__num_v_fs = num_v_fs
        if associated_vm_nic_references is not None:
            self.__associated_vm_nic_references = associated_vm_nic_references
        if compliance_status is not None:
            self.__compliance_status = compliance_status
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'networking.v4.config.HostNicReference'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def ext_id(self):
        """
        UUID of the Host Nic.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ext_id

    @ext_id.setter
    def ext_id(self, ext_id):
        if ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__ext_id = ext_id

    @property
    def num_v_fs(self):
        """
        Number of VFs associated with the Host Nic.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__num_v_fs

    @num_v_fs.setter
    def num_v_fs(self, num_v_fs):
        if num_v_fs is not None and num_v_fs > 128:  # noqa: E501
            raise ValueError("Invalid value for `num_v_fs`, must be a value less than or equal to `128`")  # noqa: E501
        if num_v_fs is not None and num_v_fs < 0:  # noqa: E501
            raise ValueError("Invalid value for `num_v_fs`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__num_v_fs = num_v_fs

    @property
    def associated_vm_nic_references(self):
        """
        List of VM NICs references associated with the Host Nic.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__associated_vm_nic_references

    @associated_vm_nic_references.setter
    def associated_vm_nic_references(self, associated_vm_nic_references):

        self.__associated_vm_nic_references = associated_vm_nic_references

    @property
    def compliance_status(self):
        """
        

        :type:
            :class:`~ntnx_networking_py_client.models.networking.v4.config.HostNicComplianceStatus`
        """  # noqa: E501
        return self.__compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):

        self.__compliance_status = compliance_status

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(HostNicReference, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostNicReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

