"""
{{ external_service_name }} client for {{ module_name }} module.
"""
import httpx
from typing import Any, Dict, Optional
from pydantic import BaseModel


class {{ ExternalServiceName }}Config(BaseModel):
    """Configuration for {{ ExternalServiceName }} client."""
    
    base_url: str
    api_key: Optional[str] = None
    timeout: int = 30


class {{ ExternalServiceName }}Client:
    """Client for {{ external_service_name }} external service."""
    
    def __init__(self, config: {{ ExternalServiceName }}Config):
        self._config = config
        self._client = httpx.AsyncClient(
            base_url=config.base_url,
            timeout=config.timeout,
        )
    
    async def __aenter__(self):
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self._client.aclose()
    
    async def get_data(self, endpoint: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """Get data from external service."""
        headers = {}
        if self._config.api_key:
            headers["Authorization"] = f"Bearer {self._config.api_key}"
        
        response = await self._client.get(
            endpoint,
            params=params,
            headers=headers,
        )
        response.raise_for_status()
        
        return response.json()
    
    async def post_data(self, endpoint: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Post data to external service."""
        headers = {"Content-Type": "application/json"}
        if self._config.api_key:
            headers["Authorization"] = f"Bearer {self._config.api_key}"
        
        response = await self._client.post(
            endpoint,
            json=data,
            headers=headers,
        )
        response.raise_for_status()
        
        return response.json()