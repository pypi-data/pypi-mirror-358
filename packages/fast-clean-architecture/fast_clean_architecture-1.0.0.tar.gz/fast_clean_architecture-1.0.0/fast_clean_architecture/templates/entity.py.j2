"""
{{ entity_name }} entity for {{ module_name }} module.

Generated at: {{ generated_at }}
Generator version: {{ generator_version }}
"""
from dataclasses import dataclass, field
from typing import Optional
from datetime import datetime
from uuid import UUID, uuid4


@dataclass
class {{ EntityName }}:
    """{{ EntityName }} domain entity.
    
    Represents a {{ entity_description }} in the {{ module_name }} domain.
    """
    
    # Primary identifier
    id: Optional[UUID] = field(default_factory=uuid4)
    
    # Add your domain-specific fields here
    # Example:
    # name: str = ""
    # description: Optional[str] = None
    
    # Audit fields
    created_at: Optional[datetime] = field(default_factory=lambda: datetime.utcnow())
    updated_at: Optional[datetime] = field(default_factory=lambda: datetime.utcnow())
    
    def __post_init__(self) -> None:
        """Post-initialization validation and setup."""
        if self.id is None:
            self.id = uuid4()
        
        now = datetime.utcnow()
        if self.created_at is None:
            self.created_at = now
        if self.updated_at is None:
            self.updated_at = now
    
    def update_timestamp(self) -> None:
        """Update the updated_at timestamp."""
        self.updated_at = datetime.utcnow()
    
    def is_new(self) -> bool:
        """Check if this is a new entity (not persisted yet)."""
        return self.created_at == self.updated_at