[project]
name = "lambda-rag-lite"
version = "0.1.0"
description = "Uma biblioteca Python leve para RAG (Retrieval-Augmented Generation) compatível com LangChain, que não requer dependências pesadas como NumPy ou bibliotecas de ML."
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Rafael Sales", email = "rafael.sales@gmail.com"}
]
license = {text = "MIT"}
keywords = ["rag", "langchain", "vector-store", "embedding", "nlp", "search"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Text Processing :: Indexing",
]
dependencies = [
    "langchain-core>=0.3.66",
]

[project.urls]
Homepage = "https://github.com/dmux/lambda-rag-lite"
Repository = "https://github.com/dmux/lambda-rag-lite"
Documentation = "https://github.com/dmux/lambda-rag-lite#readme"
Issues = "https://github.com/dmux/lambda-rag-lite/issues"

[project.optional-dependencies]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.8.0",
]
examples = [
    "tqdm>=4.65.0",  # Para mostrar progresso nos exemplos
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["lambda_rag_lite"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lambda_rag_lite"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=lambda_rag_lite",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["F401", "F811"]

[dependency-groups]
dev = [
    "bandit>=1.8.5",
    "black>=25.1.0",
    "isort>=6.0.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]
