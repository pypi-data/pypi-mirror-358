# coding: utf-8

"""
    Freestyle Sandboxes

     Freestyle Sandboxes lets you deploy your users or AIs code. **Get your API Key at [admin.freestyle.sh](https://admin.freestyle.sh)**  They are broken up into core 5 categories: [Web](#tag/web), [Execute](#tag/execute), [Cloudstate](#tag/cloudstate), [Git](#tag/git), and [Domains](#tag/domains).  [Web](#tag/web): Send us the code for the website, we'll provision the certificates and get it hosted  [Execute](#tag/execute): Send us a function, we'll run it and send you the output  [Cloudstate](#tag/cloudstate): Our Opensource JavaScript Runtime used for cloud functions with persistent state  [Domains](#tag/domains): Manage your domains, including verification and listing  [Git](#tag/git): Manage your git repositories 

    The version of the OpenAPI document: 0.1.0
    Contact: ben@freestyle.sh
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from _openapi_client.models.execute_run_state import ExecuteRunState
from typing import Optional, Set
from typing_extensions import Self

class ExecuteLogEntry(BaseModel):
    """
    ExecuteLogEntry
    """ # noqa: E501
    deployment: StrictStr
    account_id: StrictStr = Field(alias="accountId")
    provisioned_at: datetime = Field(alias="provisionedAt")
    started_at: Optional[datetime] = Field(default=None, alias="startedAt")
    duration: Optional[StrictStr] = None
    state: ExecuteRunState
    env_vars: Dict[str, StrictStr] = Field(alias="envVars")
    __properties: ClassVar[List[str]] = ["deployment", "accountId", "provisionedAt", "startedAt", "duration", "state", "envVars"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExecuteLogEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if started_at (nullable) is None
        # and model_fields_set contains the field
        if self.started_at is None and "started_at" in self.model_fields_set:
            _dict['startedAt'] = None

        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict['duration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExecuteLogEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployment": obj.get("deployment"),
            "accountId": obj.get("accountId"),
            "provisionedAt": obj.get("provisionedAt"),
            "startedAt": obj.get("startedAt"),
            "duration": obj.get("duration"),
            "state": obj.get("state"),
            "envVars": obj.get("envVars")
        })
        return _obj


