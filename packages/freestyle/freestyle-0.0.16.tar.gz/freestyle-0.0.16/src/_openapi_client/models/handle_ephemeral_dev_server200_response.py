# coding: utf-8

"""
    Freestyle Sandboxes

     Freestyle Sandboxes lets you deploy your users or AIs code. **Get your API Key at [admin.freestyle.sh](https://admin.freestyle.sh)**  They are broken up into core 5 categories: [Web](#tag/web), [Execute](#tag/execute), [Cloudstate](#tag/cloudstate), [Git](#tag/git), and [Domains](#tag/domains).  [Web](#tag/web): Send us the code for the website, we'll provision the certificates and get it hosted  [Execute](#tag/execute): Send us a function, we'll run it and send you the output  [Cloudstate](#tag/cloudstate): Our Opensource JavaScript Runtime used for cloud functions with persistent state  [Domains](#tag/domains): Manage your domains, including verification and listing  [Git](#tag/git): Manage your git repositories 

    The version of the OpenAPI document: 0.1.0
    Contact: ben@freestyle.sh
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HandleEphemeralDevServer200Response(BaseModel):
    """
    HandleEphemeralDevServer200Response
    """ # noqa: E501
    url: StrictStr
    is_new: StrictBool = Field(alias="isNew")
    dev_command_running: StrictBool = Field(alias="devCommandRunning")
    install_command_running: StrictBool = Field(alias="installCommandRunning")
    mcp_ephemeral_url: Optional[StrictStr] = Field(default=None, alias="mcpEphemeralUrl")
    ephemeral_url: Optional[StrictStr] = Field(default=None, alias="ephemeralUrl")
    __properties: ClassVar[List[str]] = ["url", "isNew", "devCommandRunning", "installCommandRunning", "mcpEphemeralUrl", "ephemeralUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HandleEphemeralDevServer200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if mcp_ephemeral_url (nullable) is None
        # and model_fields_set contains the field
        if self.mcp_ephemeral_url is None and "mcp_ephemeral_url" in self.model_fields_set:
            _dict['mcpEphemeralUrl'] = None

        # set to None if ephemeral_url (nullable) is None
        # and model_fields_set contains the field
        if self.ephemeral_url is None and "ephemeral_url" in self.model_fields_set:
            _dict['ephemeralUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HandleEphemeralDevServer200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "isNew": obj.get("isNew"),
            "devCommandRunning": obj.get("devCommandRunning"),
            "installCommandRunning": obj.get("installCommandRunning"),
            "mcpEphemeralUrl": obj.get("mcpEphemeralUrl"),
            "ephemeralUrl": obj.get("ephemeralUrl")
        })
        return _obj


