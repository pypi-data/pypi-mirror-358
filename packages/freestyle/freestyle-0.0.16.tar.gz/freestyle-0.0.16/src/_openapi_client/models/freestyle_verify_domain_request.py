# coding: utf-8

"""
    Freestyle Sandboxes

     Freestyle Sandboxes lets you deploy your users or AIs code. **Get your API Key at [admin.freestyle.sh](https://admin.freestyle.sh)**  They are broken up into core 5 categories: [Web](#tag/web), [Execute](#tag/execute), [Cloudstate](#tag/cloudstate), [Git](#tag/git), and [Domains](#tag/domains).  [Web](#tag/web): Send us the code for the website, we'll provision the certificates and get it hosted  [Execute](#tag/execute): Send us a function, we'll run it and send you the output  [Cloudstate](#tag/cloudstate): Our Opensource JavaScript Runtime used for cloud functions with persistent state  [Domains](#tag/domains): Manage your domains, including verification and listing  [Git](#tag/git): Manage your git repositories 

    The version of the OpenAPI document: 0.1.0
    Contact: ben@freestyle.sh
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from _openapi_client.models.freestyle_verify_domain_request_one_of import FreestyleVerifyDomainRequestOneOf
from _openapi_client.models.handle_verify_wildcard200_response import HandleVerifyWildcard200Response
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

FREESTYLEVERIFYDOMAINREQUEST_ONE_OF_SCHEMAS = ["FreestyleVerifyDomainRequestOneOf", "HandleVerifyWildcard200Response"]

class FreestyleVerifyDomainRequest(BaseModel):
    """
    Verify a domain verification request, can either be done for a domain, or for a specific request
    """
    # data type: HandleVerifyWildcard200Response
    oneof_schema_1_validator: Optional[HandleVerifyWildcard200Response] = None
    # data type: FreestyleVerifyDomainRequestOneOf
    oneof_schema_2_validator: Optional[FreestyleVerifyDomainRequestOneOf] = None
    actual_instance: Optional[Union[FreestyleVerifyDomainRequestOneOf, HandleVerifyWildcard200Response]] = None
    one_of_schemas: Set[str] = { "FreestyleVerifyDomainRequestOneOf", "HandleVerifyWildcard200Response" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = FreestyleVerifyDomainRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: HandleVerifyWildcard200Response
        if not isinstance(v, HandleVerifyWildcard200Response):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HandleVerifyWildcard200Response`")
        else:
            match += 1
        # validate data type: FreestyleVerifyDomainRequestOneOf
        if not isinstance(v, FreestyleVerifyDomainRequestOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FreestyleVerifyDomainRequestOneOf`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in FreestyleVerifyDomainRequest with oneOf schemas: FreestyleVerifyDomainRequestOneOf, HandleVerifyWildcard200Response. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in FreestyleVerifyDomainRequest with oneOf schemas: FreestyleVerifyDomainRequestOneOf, HandleVerifyWildcard200Response. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into HandleVerifyWildcard200Response
        try:
            instance.actual_instance = HandleVerifyWildcard200Response.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FreestyleVerifyDomainRequestOneOf
        try:
            instance.actual_instance = FreestyleVerifyDomainRequestOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into FreestyleVerifyDomainRequest with oneOf schemas: FreestyleVerifyDomainRequestOneOf, HandleVerifyWildcard200Response. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into FreestyleVerifyDomainRequest with oneOf schemas: FreestyleVerifyDomainRequestOneOf, HandleVerifyWildcard200Response. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], FreestyleVerifyDomainRequestOneOf, HandleVerifyWildcard200Response]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


