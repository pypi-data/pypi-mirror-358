# coding: utf-8

"""
    Freestyle Sandboxes

     Freestyle Sandboxes lets you deploy your users or AIs code. **Get your API Key at [admin.freestyle.sh](https://admin.freestyle.sh)**  They are broken up into core 5 categories: [Web](#tag/web), [Execute](#tag/execute), [Cloudstate](#tag/cloudstate), [Git](#tag/git), and [Domains](#tag/domains).  [Web](#tag/web): Send us the code for the website, we'll provision the certificates and get it hosted  [Execute](#tag/execute): Send us a function, we'll run it and send you the output  [Cloudstate](#tag/cloudstate): Our Opensource JavaScript Runtime used for cloud functions with persistent state  [Domains](#tag/domains): Manage your domains, including verification and listing  [Git](#tag/git): Manage your git repositories 

    The version of the OpenAPI document: 0.1.0
    Contact: ben@freestyle.sh
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Git(BaseModel):
    """
    Git
    """ # noqa: E501
    url: StrictStr
    branch: Optional[StrictStr] = None
    dir: Optional[StrictStr] = None
    commit_message: StrictStr
    author_name: Optional[StrictStr] = None
    author_email: Optional[StrictStr] = None
    type: StrictStr
    __properties: ClassVar[List[str]] = ["url", "branch", "dir", "commit_message", "author_name", "author_email", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['git']):
            raise ValueError("must be one of enum values ('git')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Git from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if branch (nullable) is None
        # and model_fields_set contains the field
        if self.branch is None and "branch" in self.model_fields_set:
            _dict['branch'] = None

        # set to None if dir (nullable) is None
        # and model_fields_set contains the field
        if self.dir is None and "dir" in self.model_fields_set:
            _dict['dir'] = None

        # set to None if author_name (nullable) is None
        # and model_fields_set contains the field
        if self.author_name is None and "author_name" in self.model_fields_set:
            _dict['author_name'] = None

        # set to None if author_email (nullable) is None
        # and model_fields_set contains the field
        if self.author_email is None and "author_email" in self.model_fields_set:
            _dict['author_email'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Git from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "branch": obj.get("branch"),
            "dir": obj.get("dir"),
            "commit_message": obj.get("commit_message"),
            "author_name": obj.get("author_name"),
            "author_email": obj.get("author_email"),
            "type": obj.get("type")
        })
        return _obj


