# coding: utf-8

"""
    Freestyle Sandboxes

     Freestyle Sandboxes lets you deploy your users or AIs code. **Get your API Key at [admin.freestyle.sh](https://admin.freestyle.sh)**  They are broken up into core 5 categories: [Web](#tag/web), [Execute](#tag/execute), [Cloudstate](#tag/cloudstate), [Git](#tag/git), and [Domains](#tag/domains).  [Web](#tag/web): Send us the code for the website, we'll provision the certificates and get it hosted  [Execute](#tag/execute): Send us a function, we'll run it and send you the output  [Cloudstate](#tag/cloudstate): Our Opensource JavaScript Runtime used for cloud functions with persistent state  [Domains](#tag/domains): Manage your domains, including verification and listing  [Git](#tag/git): Manage your git repositories 

    The version of the OpenAPI document: 0.1.0
    Contact: ben@freestyle.sh
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from _openapi_client.models.freestyle_network_permission import FreestyleNetworkPermission
from typing import Optional, Set
from typing_extensions import Self

class FreestyleExecuteScriptParamsConfiguration(BaseModel):
    """
    FreestyleExecuteScriptParamsConfiguration
    """ # noqa: E501
    env_vars: Optional[Dict[str, StrictStr]] = Field(default=None, description="The environment variables to set for the script", alias="envVars")
    node_modules: Optional[Dict[str, StrictStr]] = Field(default=None, description="The node modules to install for the script", alias="nodeModules")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags for you to organize your scripts, useful for tracking what you're running")
    timeout: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The script timeout")
    peer_dependency_resolution: Optional[StrictBool] = Field(default=True, description="If false, we'll not resolve peer dependencies for the packages given, this can speed up execute performance, but will break packages with peers unless the peers are manually specified.", alias="peerDependencyResolution")
    network_permissions: Optional[List[FreestyleNetworkPermission]] = Field(default=None, alias="networkPermissions")
    custom_headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="These headers will be added to every fetch request made through the script", alias="customHeaders")
    proxy: Optional[StrictStr] = Field(default=None, description="Proxy all outgoing requests through this URL")
    __properties: ClassVar[List[str]] = ["envVars", "nodeModules", "tags", "timeout", "peerDependencyResolution", "networkPermissions", "customHeaders", "proxy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FreestyleExecuteScriptParamsConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in network_permissions (list)
        _items = []
        if self.network_permissions:
            for _item_network_permissions in self.network_permissions:
                if _item_network_permissions:
                    _items.append(_item_network_permissions.to_dict())
            _dict['networkPermissions'] = _items
        # set to None if timeout (nullable) is None
        # and model_fields_set contains the field
        if self.timeout is None and "timeout" in self.model_fields_set:
            _dict['timeout'] = None

        # set to None if network_permissions (nullable) is None
        # and model_fields_set contains the field
        if self.network_permissions is None and "network_permissions" in self.model_fields_set:
            _dict['networkPermissions'] = None

        # set to None if proxy (nullable) is None
        # and model_fields_set contains the field
        if self.proxy is None and "proxy" in self.model_fields_set:
            _dict['proxy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FreestyleExecuteScriptParamsConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "envVars": obj.get("envVars"),
            "nodeModules": obj.get("nodeModules"),
            "tags": obj.get("tags"),
            "timeout": obj.get("timeout"),
            "peerDependencyResolution": obj.get("peerDependencyResolution") if obj.get("peerDependencyResolution") is not None else True,
            "networkPermissions": [FreestyleNetworkPermission.from_dict(_item) for _item in obj["networkPermissions"]] if obj.get("networkPermissions") is not None else None,
            "customHeaders": obj.get("customHeaders"),
            "proxy": obj.get("proxy")
        })
        return _obj


