import logging
import os
from typing import TYPE_CHECKING, Mapping

import charms.proxylib.errors as errors
import charms.proxylib.model as model

try:
    from lightkube.models.core_v1 import EnvVar

    HAS_LIGHTKUBE = True
except ImportError:
    HAS_LIGHTKUBE = False
    if not TYPE_CHECKING:
        EnvVar = None


log = logging.getLogger(__name__)


def _app_name() -> str:
    if not (unit := os.getenv("JUJU_UNIT_NAME")):
        raise errors.JujuEnvironmentError("JUJU_UNIT_NAME environment variable is not set.")
    return unit.split("/")[0]


class environ(dict):
    """Views the proxy settings from the model-config through a context
    to temporarily set the proxy settings in os.environ.

    Usage:
        with charms.proxylib.environ(enabled=True) as env:
            # os.environ is updated for this context
            # with keys for http_proxy, https_proxy, no_proxy
            # with keys for HTTP_PROXY, HTTPS_PROXY, NO_PROXY
            # validated and loaded from the model-config
            # Any validation errors are stored in env.error
            ...

    Usage:
        env = charms.proxylib.environ(enabled=True)
        values, error = dict(env), env.error

        ...

    Args:
        source (Optional[dict]):
                          The source environment dict.
                          If None, uses the current os.environ.
                          Defaults to None.

    Keywords:
        enabled (bool):   If True, enable the proxy settings.
                          If False, return an empty dictionary.
        uppercase (bool): If True, add the uppercase keys as well
                          If False, only the lowercase keys
        add_no_proxies (list[str]): Additional entries to add to the no_proxy list.

    Attributes:
        error (str | None): Any validation errors
    """

    def __init__(
        self,
        source: None | model.Env | os._Environ = None,
        *_,
        enabled: bool,
        uppercase: bool = True,
        add_no_proxies: list[str] = [],
    ):
        self._original_env = os.environ if source is None else source
        self._restore_env: dict[str, None | str] = {}
        self.error = None
        try:
            validated = model.validated(enabled, uppercase, add_no_proxies)
        except errors.LibraryError as e:
            log.error("Error retrieving proxy settings: %s", e)
            validated, self.error = {}, str(e)

        super().__init__(validated)

    def __enter__(self) -> "environ":
        """Set the environment variables for the duration of the context.

        Args:
            env (dict[str, str] | os._Environ, optional): The environment to
                update with the proxy settings. If None, uses os.environ.
                Defaults to None.
        Returns:
            The instance itself, allowing for use in a `with` statement.
        """
        self._restore_env = {k: self._original_env.get(k) for k in self.keys()}
        self._original_env.update(dict(self))
        return self

    def __exit__(self, *_) -> None:
        """Restore the original provided environment."""
        for k, v in self._restore_env.items():
            if v is None:
                self._original_env.pop(k, None)
            else:
                self._original_env[k] = v


def systemd(environ: environ, service: str) -> str:
    """Crafts a systemd [Service] section configuration for a given service
    using the validated proxy settings.

    Args:
        enabled (bool): Whether or not to load the proxy configs.
        service (str):  The name of the service for which to apply proxy settings.

    Returns:
        str: A multi-line string containing the systemd [Service] section configuration
        with proxy environment variables.

    Raises:
        errors.UnknownAppNameError: If the application name cannot be determined.
        errors.ProxyUrlError: If any of the proxy URLs are invalid.
    """
    juju_app = _app_name()
    systemd_lines = []
    for k in sorted(environ.keys(), key=str.casefold):
        systemd_lines.append(f'Environment="{k}={environ[k]}"')

    if systemd_lines:
        systemd_lines = [
            "[Service]",
            f"# Autogenerated by {juju_app=} for {service=}",
        ] + systemd_lines
    if not systemd_lines:
        return ""
    return "\n".join(systemd_lines) + "\n"


def container_vars(environ: Mapping[str, str]) -> list["EnvVar"]:
    """Convert proxy config to env vars.

    If `environ` is empty, return an empty list.
    If not, return a sorted list of EnvVar objects.

    Args:
        environ: A mapping of proxy environment variable names and values.

    Returns:
        A list of EnvVar objects representing the proxy config.
    """
    if not HAS_LIGHTKUBE:
        raise NotImplementedError("lightkube is not available.")
    env_vars = []
    for key in sorted(environ.keys(), key=str.casefold):
        env_vars.append(EnvVar(name=key, value=environ[key]))
    return env_vars
