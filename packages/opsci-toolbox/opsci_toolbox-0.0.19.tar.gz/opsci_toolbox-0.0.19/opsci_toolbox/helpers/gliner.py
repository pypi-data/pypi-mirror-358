from gliner import GLiNER


def load_gliner_model(model_name : str, map_location="cpu") -> GLiNER:
    """
    Load the GLINER named entity recognition (NER) model.

    Args:
        model: The model name to load.
        map_location: The device to load the model on. Possible values are cpu or cuda .

    Returns:
        A list of predicted entities.

    """
    model = GLiNER.from_pretrained(model_name, map_location=map_location)
    return model

def gliner_predict(model : GLiNER, text : str, labels : list, threshold : float = 0.5) -> list:
    """
    Predicts entities using the given model.

    Args:
        model: The model used for prediction.
        text: A list of texts to predict entities from.
        labels: A list of labels corresponding to the texts.
        threshold: The threshold value for entity prediction (default: 0.5).

    Returns:
        A list of predicted entities.

    """
    entities = model.predict_entities(text, labels, threshold=threshold)
    return entities

def gliner_batch_predict(model : GLiNER, text : list, labels : list, threshold : float = 0.5) -> list:
    """
    Batch inference. Predicts entities using the given model.

    Args:
        model: The model used for prediction.
        text: A list of texts to predict entities from.
        labels: A list of labels corresponding to the texts.
        threshold: The threshold value for entity prediction (default: 0.5).

    Returns:
        A list of predicted entities.

    """
    entities = model.batch_predict_entities(text, labels, threshold=threshold)
    return entities


def parse_predictions(predictions : list) -> tuple:
    """
    Parse the predictions generated by a GLINER named entity recognition (NER) model for batch processing.

    Args:
        predictions (list): A list of dictionaries representing the predictions. Each dictionary contains the following keys:
            - "start" (int): The starting index of the predicted entity in the input text.
            - "end" (int): The ending index of the predicted entity in the input text.
            - "text" (str): The predicted entity text.
            - "label" (str): The predicted entity label.
            - "score" (float): The confidence score of the prediction.

    Returns:
        tuple: A tuple containing lists of the extracted information from the predictions. The tuple contains the following lists:
            - starts (list): A list of lists, where each inner list contains the starting indices of the predicted entities.
            - ends (list): A list of lists, where each inner list contains the ending indices of the predicted entities.
            - texts (list): A list of lists, where each inner list contains the predicted entity texts.
            - labels (list): A list of lists, where each inner list contains the predicted entity labels.
            - scores (list): A list of lists, where each inner list contains the confidence scores of the predictions.
    """
    starts, ends, texts, labels, scores = [], [], [], [], []
    for prediction in predictions:
        start, end, text, label, score = [], [], [], [], []
        for item in prediction:
            start.append(item.get("start"))
            end.append(item.get("end"))
            text.append(item.get("text"))
            label.append(item.get("label"))
            score.append(item.get("score"))
        starts.append(start)
        ends.append(end)
        texts.append(text)
        labels.append(label)
        scores.append(score)
    return starts, ends, texts, labels, scores
