Metadata-Version: 2.1
Name: apc-core
Version: 0.1.0
Summary: APC (Agent Protocol Conductor) core protocol library for decentralized agent orchestration.
Home-page: https://github.com/deepfarkade/apc-protocol
Author: APC Contributors
Project-URL: Documentation, https://github.com/deepfarkade/apc-protocol/blob/main/docs/documentation.md
Project-URL: Source, https://github.com/deepfarkade/apc-protocol
Project-URL: Tracker, https://github.com/deepfarkade/apc-protocol/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Requires-Python: >=3.8
Description-Content-Type: text/markdown

# ![APC Logo](https://raw.githubusercontent.com/deepfarkade/apc-protocol/main/docs/images/apc-logo.png)

# APC: Agent Protocol Conductor

[![PyPI version](https://img.shields.io/pypi/v/apc-core?color=blue)](https://pypi.org/project/apc-core/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Build Status](https://img.shields.io/github/actions/workflow/status/deepfarkade/apc-protocol/ci.yml?branch=main)](https://github.com/deepfarkade/apc-protocol/actions)
[![Docs](https://img.shields.io/badge/docs-online-blue)](docs/documentation.md)

A protocol for decentralized, resilient, and auditable orchestration of heterogeneous AI agent ecosystems.

[Documentation](docs/documentation.md) | [Specification](apc-proto/apc.proto) | [Discussions](https://github.com/deepfarkade/apc-protocol/discussions)

---

APC (Agent Protocol Conductor) is an open protocol and SDK for orchestrating distributed AI agents, enabling dynamic leadership hand-off, sequenced task execution, checkpointing, failover, and auditability‚Äîwithout centralized control. APC is designed for interoperability, extensibility, and production-readiness, supporting both classic automation and LLM-powered agents.

---

## üöÄ Getting Started

- üìö **Read the [Documentation](#getting-started-step-by-step)** for guides and tutorials
- üîç **Review the [Specification](apc-proto/apc.proto)** for protocol details
- üßë‚Äçüíª **Use our SDKs to start building:**
  - [Python SDK](apc-core/)
  - [TypeScript SDK](#) *(coming soon)*
  - [Java SDK](#) *(coming soon)*

---

## üõ†Ô∏è Features
- **Protobuf-based message schemas** for cross-language interoperability
- **Pluggable checkpoint manager** (in-memory, Redis, S3)
- **State machine engine** for conductor and worker agents
- **gRPC and WebSocket transport adapters**
- **Security stubs** (mTLS, JWT)
- **Ready for open source and multi-language SDKs**

---

## ‚ö° Quick Start

```sh
# 1. Install the core package (editable mode)
python install_editable.py

# 2. Generate Python code from Protobuf
python generate_proto.py

# 3. Run a sample agent (see examples/ or samples/python/)
python examples/grpc_minimal.py
```

---

## üßë‚Äçüíª Getting Started (Step-by-Step)

1. **Clone the repository**
   ```sh
   git clone https://github.com/deepfarkade/apc-protocol.git
   cd apc-protocol
   ```
2. **Install Python dependencies and the core package (editable mode)**
   ```sh
   python install_editable.py
   ```
3. **Generate Python code from Protobuf schemas**
   ```sh
   python generate_proto.py
   ```
4. **Run an example agent**
   ```sh
   python examples/grpc_minimal.py
   ```

---

## üí° Why is this easy?
- **No manual pip or protoc commands needed**: Just run the provided scripts.
- **Plug-and-play**: Add your own agents, LLMs, or business logic by subclassing the provided state machines.
- **Multi-language ready**: Use the same Protobuf schema to generate SDKs for Node.js, Go, etc.
- **Production-grade**: Pluggable checkpointing, security stubs, and transport adapters included.

---

## üî• Advanced Usage
- Integrate LLMs or custom logic in your Worker agents (see [`examples/llm_worker.py`](examples/llm_worker.py)).
- Use Redis or S3 for distributed checkpointing.
- Build your own CLI or web dashboard on top of the protocol.

---

## üß© Project Structure
- [`apc-core/`](apc-core/) ‚Äî Core Python SDK
- [`apc-proto/`](apc-proto/) ‚Äî Protobuf schemas
- [`apc-transport/`](apc-transport/) ‚Äî gRPC/WebSocket adapters
- [`examples/`](examples/) ‚Äî Example agents and LLM integration
- [`samples/`](samples/) ‚Äî Additional sample agents
- [`tests/`](tests/) ‚Äî Integration tests

---

## ü§ù Contributing
- Fork, branch, and submit PRs!
- See [`apc-proto/apc.proto`](apc-proto/apc.proto) for message definitions
- See [`apc-core/README.md`](apc-core/README.md) for architecture

---

## üì¶ Release Information

- **Current Release:** v0.1.x (Alpha)
- See [Releases](https://github.com/deepfarkade/apc-protocol/releases) for changelogs and version history.
- This is the first public alpha release of the APC protocol and SDK.

---

## üõ°Ô∏è License
MIT
