{"version":3,"file":"static/js/42124.2b7c41a3.chunk.js","mappings":"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","sources":["components/AstStatusIndicator.tsx","apis/astApi.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Progress, Tooltip, Card } from 'antd';\nimport { AstStatus, fetchAstStatus } from '../apis/astApi';\nimport { useTheme } from '../context/ThemeContext';\n\n// Configuration\nconst AST_STATUS_CHECK_INTERVAL = 3000; // 3 seconds\n\n/**\n * Format elapsed time in a human-readable format\n * @param seconds - Elapsed time in seconds\n * @returns Formatted time string\n */\nconst formatElapsedTime = (seconds: number | null): string => {\n  if (!seconds) return '';\n\n  if (seconds < 60) {\n    return `${Math.round(seconds)}s`;\n  } else if (seconds < 3600) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.round(seconds % 60);\n    return `${minutes}m ${remainingSeconds}s`;\n  } else {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    return `${hours}h ${minutes}m`;\n  }\n};\n\n/**\n * Trigger immediate AST status check (can be called from other components)\n */\nexport const triggerAstStatusCheck = () => {\n  // This could dispatch a custom event that the component listens for\n  window.dispatchEvent(new CustomEvent('ast-config-changed'));\n};\n\n/**\n * AST Status Indicator Component\n * Shows the current status of AST indexing\n */\nconst AstStatusIndicator: React.FC = () => {\n  const [status, setStatus] = useState<AstStatus | null>(null);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [hasSeenActiveIndexing, setHasSeenActiveIndexing] = useState<boolean>(false);\n  const { isDarkMode } = useTheme();\n\n  useEffect(() => {\n    let timer: number | null = null;\n    let mounted = true;\n\n    const checkStatus = async () => {\n      try {\n        const astStatus = await fetchAstStatus();\n\n        if (mounted) {\n          setStatus(astStatus);\n          \n          // Track if we've ever seen active indexing\n          if (astStatus.is_indexing || astStatus.is_complete) {\n            setHasSeenActiveIndexing(true);\n          }\n\n          // Show the indicator if indexing is in progress\n          if (astStatus.is_indexing || astStatus.error) {\n            setVisible(true);\n          }\n\n          // Hide the indicator 5 seconds after indexing completes\n          if (astStatus.is_complete && !astStatus.error) {\n            setTimeout(() => {\n              if (mounted) setVisible(false);\n            }, 5000);\n          }\n\n          // Continue checking if indexing is still in progress\n          if (astStatus.is_indexing && !astStatus.is_complete) {\n            timer = window.setTimeout(checkStatus, AST_STATUS_CHECK_INTERVAL);\n          }\n        }\n      } catch (error) {\n        console.error('Error checking AST status:', error);\n        \n        // Only continue checking if we've previously seen active indexing\n        if (hasSeenActiveIndexing) {\n          // Try again after a delay\n          if (mounted) {\n            timer = window.setTimeout(checkStatus, AST_STATUS_CHECK_INTERVAL);\n          }\n        }\n      }\n    };\n\n    // Start checking AST status\n    checkStatus();\n\n    // Add event listener for page visibility changes\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        // Resume checking when page becomes visible\n        if (!timer && mounted) {\n          checkStatus();\n        }\n      } else {\n        // Pause checking when page is hidden\n        if (timer) {\n          window.clearTimeout(timer);\n          timer = null;\n        }\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Listen for AST config changes\n    const handleConfigChange = () => {\n      setHasSeenActiveIndexing(false); // Reset to allow fresh detection\n      checkStatus(); // Immediately check status\n    };\n\n    window.addEventListener('ast-config-changed', handleConfigChange);\n\n    // Cleanup\n    return () => {\n      mounted = false;\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('ast-config-changed', handleConfigChange);\n    };\n  }, [hasSeenActiveIndexing]);\n\n  // Don't render anything if there's no status, if it shouldn't be visible, or if we haven't seen active indexing\n  if (!status || !visible) {\n    return null;\n  }\n\n  // Render error state\n  if (status.error) {\n    // Only show error if we've previously seen active indexing\n    if (!hasSeenActiveIndexing) {\n      return null;\n    }\n    \n    return (\n      <Card\n        className=\"ast-status-error\"\n        style={{\n          position: 'fixed',\n          bottom: '10px',\n          right: '10px',\n          width: '300px',\n          backgroundColor: isDarkMode ? '#2a1f1f' : '#fff1f0',\n          borderColor: isDarkMode ? '#a61d24' : '#ffa39e',\n          color: isDarkMode ? '#ff7875' : undefined\n        }}\n      >\n        <div>\n          <strong>AST Indexing Error</strong>\n          <p>{status.error}</p>\n        </div>\n      </Card>\n    );\n  }\n\n  // Render indexing in progress\n  if (status.is_indexing && !status.is_complete) {\n    const elapsedStr = status.elapsed_seconds ? ` (${formatElapsedTime(status.elapsed_seconds)})` : '';\n\n    return (\n      <Card\n        className=\"ast-status-indicator\"\n        style={{\n          position: 'fixed',\n          bottom: '10px',\n          right: '10px',\n          width: '300px',\n          backgroundColor: isDarkMode ? '#141414' : '#ffffff',\n          borderColor: isDarkMode ? '#303030' : '#d9d9d9',\n          color: isDarkMode ? '#ffffff' : undefined\n        }}\n      >\n        <div>\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\n            <strong>AST Indexing</strong>\n            <span>{status.completion_percentage}%{elapsedStr}</span>\n          </div>\n          <Tooltip title={`${status.indexed_files}/${status.total_files} files processed`}>\n            <Progress\n              percent={status.completion_percentage}\n              size=\"small\"\n              status=\"active\"\n              showInfo={false}\n            />\n          </Tooltip>\n          <div style={{ fontSize: '12px', color: '#8c8c8c', marginTop: '4px' }}>\n            {status.indexed_files}/{status.total_files} files processed\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  // Render completed state\n  if (status.is_complete) {\n    return (\n      <Card\n        className=\"ast-status-complete\"\n        style={{\n          position: 'fixed',\n          bottom: '10px',\n          right: '10px',\n          width: '300px',\n          backgroundColor: isDarkMode ? '#162312' : '#f6ffed',\n          borderColor: isDarkMode ? '#389e0d' : '#b7eb8f',\n          color: isDarkMode ? '#ffffff' : undefined\n        }}\n      >\n        <div>\n          <strong>AST Indexing Complete</strong>\n          <div style={{ fontSize: '12px', color: '#8c8c8c', marginTop: '4px' }}>\n            {status.indexed_files} files indexed\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return null;\n};\n\nexport default AstStatusIndicator;\n","/**\n * API for AST-related functionality\n */\n\nexport interface AstStatus {\n  is_indexing: boolean;\n  completion_percentage: number;\n  is_complete: boolean;\n  indexed_files: number;\n  total_files: number;\n  elapsed_seconds: number | null;\n  error: string | null;\n}\n\n/**\n * Fetch the current status of AST indexing\n * @returns Promise with AST indexing status\n */\nexport const fetchAstStatus = async (): Promise<AstStatus> => {\n  try {\n    const response = await fetch('/api/ast/status');\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    \n    return await response.json() as AstStatus;\n  } catch (error) {\n    console.error('Error fetching AST status:', error);\n    // Return a default status object on error\n    return {\n      is_indexing: false,\n      completion_percentage: 0,\n      is_complete: false,\n      indexed_files: 0,\n      total_files: 0,\n      elapsed_seconds: null,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n};\n"],"names":["triggerAstStatusCheck","window","dispatchEvent","CustomEvent","AstStatusIndicator","status","setStatus","useState","visible","setVisible","hasSeenActiveIndexing","setHasSeenActiveIndexing","isDarkMode","useTheme","useEffect","timer","mounted","checkStatus","async","astStatus","response","fetch","ok","Error","concat","json","error","console","is_indexing","completion_percentage","is_complete","indexed_files","total_files","elapsed_seconds","message","fetchAstStatus","setTimeout","handleVisibilityChange","document","visibilityState","clearTimeout","addEventListener","handleConfigChange","removeEventListener","_jsx","Card","className","style","position","bottom","right","width","backgroundColor","borderColor","color","undefined","children","_jsxs","elapsedStr","seconds","Math","round","minutes","floor","remainingSeconds","hours","formatElapsedTime","display","justifyContent","marginBottom","Tooltip","title","Progress","percent","size","showInfo","fontSize","marginTop"],"sourceRoot":""}