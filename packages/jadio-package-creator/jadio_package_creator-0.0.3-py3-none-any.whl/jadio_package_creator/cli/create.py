import json
import shutil
from pathlib import Path

def run_create():
    print("⚡️ Running JPC CREATE...")

    project_root = Path.cwd()
    jadio_config_dir = project_root / "jadio_config"
    jpc_config_file = jadio_config_dir / "jpcconfig.json"

    # Validate jpcconfig.json
    if not jpc_config_file.exists():
        print("❌ Error: jpcconfig.json not found. Please run 'jpc init' first.")
        return

    # Load existing config
    with open(jpc_config_file) as f:
        config = json.load(f)

    current_target = config.get("creation_directory", "")
    print(f"\n✅ Current creation directory:\n{current_target if current_target else '(not set)'}\n")

    # Prompt for new directory or confirm existing
    new_target_input = input("Enter target creation folder (or press Enter to keep current): ").strip()
    if not new_target_input:
        if not current_target:
            print("❌ No directory set. Aborting.")
            return
        new_target = Path(current_target).expanduser().resolve()
    else:
        new_target = Path(new_target_input).expanduser().resolve()

    # Save updated directory back to config
    config["creation_directory"] = str(new_target)
    with open(jpc_config_file, "w") as f:
        json.dump(config, f, indent=2)

    if not new_target.exists():
        print(f"✅ Creating folder: {new_target}")
        new_target.mkdir(parents=True, exist_ok=True)

    # Prompt for package name
    package_name = input("\nEnter the new Jadio package name: ").strip()
    if not package_name:
        print("❌ No package name entered. Aborting.")
        return

    # For src: convert hyphens to underscores
    package_src_name = package_name.replace("-", "_")

    # Create root project folder
    package_root = new_target / package_name
    print(f"\n✅ Generating Jadio package at:\n{package_root}\n")
    package_root.mkdir(parents=True, exist_ok=True)

    # Build skeleton
    src_dir = package_root / "src" / package_src_name
    cli_dir = src_dir / "cli"
    core_dir = src_dir / "core"

    cli_dir.mkdir(parents=True, exist_ok=True)
    core_dir.mkdir(parents=True, exist_ok=True)

    # Write __init__.py files
    (src_dir / "__init__.py").write_text('__version__ = "0.0.1"\n')
    (cli_dir / "__init__.py").write_text("")
    (core_dir / "__init__.py").write_text("")

    # Write clicommands.json
    (cli_dir / "clicommands.json").write_text("{}\n")

    # Write main.py
    (cli_dir / "main.py").write_text("# Entry point for CLI\n")

    # Write root files
    (package_root / "README.md").write_text(f"# {package_name}\n\nGenerated by JPC.\n")
    (package_root / "LICENSE").write_text("MIT License\n")
    (package_root / ".gitignore").write_text(".jadio_modules/\njadio_config/\n__pycache__/\n*.pyc\n")

    # Write minimal pyproject.toml
    pyproject_content = f"""\

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{package_name}"
dynamic = ["version"]
description = "Jadio-compatible extension package"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
dependencies = [
    "jadio>=0.0.2",
]

[tool.hatch.version]
path = "src/{package_src_name}/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/{package_src_name}"]
"""
    (package_root / "pyproject.toml").write_text(pyproject_content)

    print(f"✅ Package '{package_name}' created successfully at {package_root}")
