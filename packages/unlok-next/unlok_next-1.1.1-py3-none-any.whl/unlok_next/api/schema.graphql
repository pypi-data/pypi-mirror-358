"""
A descendant of a comment. Descendend are used to render rich text in the frontend.
"""
interface Descendant {
  """
  Unsafe children are not typed and fall back to json. This is a workaround if queries get too complex.
  """
  unsafeChildren: [UnsafeChild!]
  kind: DescendantKind!
  children: [Descendant!]
}

"""
The `Identifier` scalasr typsse represents a reference to a store previously created by the user n a datalayer
"""
scalar UnsafeChild

"""The Kind of a Descendant"""
enum DescendantKind {
  LEAF
  MENTION
  PARAGRAPH
}

"""A mention of a user"""
type MentionDescendant implements Descendant {
  """
  Unsafe children are not typed and fall back to json. This is a workaround if queries get too complex.
  """
  unsafeChildren: [UnsafeChild!]
  kind: DescendantKind!
  children: [Descendant!]
  user: User
}

"\nA User is a person that can log in to the system. They are uniquely identified by their username.\nAnd can have an email address associated with them (but don't have to).\n\nA user can be assigned to groups and has a profile that can be used to display information about them.\nDetail information about a user can be found in the profile.\n\nAll users can have social accounts associated with them. These are used to authenticate the user with external services,\nsuch as ORCID or GitHub.\n\n"
type User {
  id: ID!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String
  lastName: String
  email: String

  """
  The groups this user belongs to. A user will get all permissions granted to each of their groups.
  """
  groups(filters: GroupFilter, pagination: OffsetPaginationInput): [Group!]!
  avatar: String
  profile: Profile!
  managedClients: [DjangoModelType!]!
}

"\nA Group is the base unit of Role Based Access Control. A Group can have many users and many permissions. A user can have many groups. A user with a group that has a permission can perform the action that the permission allows.\nGroups are propagated to the respecting subservices. Permissions are not. Each subservice has to define its own permissions and mappings to groups.\n"
type Group {
  id: ID!
  name: String!
  profile: GroupProfile

  """The users that are in the group"""
  users: [User!]!
}

"\nA Profile of a User. A Profile can be used to display personalied information about a user.\n\n\n\n\n"
type GroupProfile {
  id: ID!

  """A short bio of the group"""
  bio: String

  """The name of the group"""
  name: String

  """The avatar of the group"""
  avatar: MediaStore
}

"""MediaStore(id, path, key, bucket, populated, s3store_ptr)"""
type MediaStore {
  id: ID!

  """The stodre of the image"""
  path: String!
  bucket: String!
  key: String!
  presignedUrl(host: String = null): String!
}

"""__doc__"""
input GroupFilter {
  search: String
  name: StrFilterLookup
  ids: [ID!]
  AND: GroupFilter
  OR: GroupFilter
  NOT: GroupFilter
  DISTINCT: Boolean
}

input StrFilterLookup {
  exact: String
  iExact: String
  contains: String
  iContains: String
  inList: [String!]
  gt: String
  gte: String
  lt: String
  lte: String
  startsWith: String
  iStartsWith: String
  endsWith: String
  iEndsWith: String
  range: [String!]
  isNull: Boolean
  regex: String
  iRegex: String
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int
}

"\nA Profile of a User. A Profile can be used to display personalied information about a user.\n\n"
type Profile {
  id: ID!

  """A short bio of the user"""
  bio: String

  """The name of the user"""
  name: String

  """The avatar of the user"""
  avatar: MediaStore
}

type DjangoModelType {
  pk: ID!
}

"""A Paragraph of text"""
type ParagraphDescendant implements Descendant {
  """
  Unsafe children are not typed and fall back to json. This is a workaround if queries get too complex.
  """
  unsafeChildren: [UnsafeChild!]
  kind: DescendantKind!
  children: [Descendant!]
  size: String
}

"""
A leaf of text. This is the most basic descendant and always ends a tree.
"""
type LeafDescendant implements Descendant {
  """
  Unsafe children are not typed and fall back to json. This is a workaround if queries get too complex.
  """
  unsafeChildren: [UnsafeChild!]
  kind: DescendantKind!
  children: [Descendant!]
  bold: Boolean
  italic: Boolean
  underline: Boolean
  text: String
  code: String
}

type Query {
  stashes(filters: StashFilter, pagination: OffsetPaginationInput): [Stash!]!
  stashItems(filters: StashItemFilter, pagination: OffsetPaginationInput): [StashItem!]!
  apps(filters: AppFilter, pagination: OffsetPaginationInput): [App!]!
  releases: [Release!]!
  clients(filters: ClientFilter, pagination: OffsetPaginationInput): [Client!]!
  users(filters: UserFilter, pagination: OffsetPaginationInput): [User!]!
  groups(filters: GroupFilter, pagination: OffsetPaginationInput): [Group!]!
  comments: [Comment!]!
  services(filters: ServiceFilter, pagination: OffsetPaginationInput): [Service!]!
  serviceInstances(filters: ServiceInstanceFilter, pagination: OffsetPaginationInput): [ServiceInstance!]!
  layers(filters: LayerFilter, pagination: OffsetPaginationInput): [Layer!]!
  redeemTokens(filters: RedeemTokenFilter, pagination: OffsetPaginationInput): [RedeemToken!]!
  stash(id: ID!): Stash!
  stashItem(id: ID!): StashItem!
  myStashes: [Stash!]!
  user(id: ID!): User!
  me: User!
  group(id: ID!): Group!
  mygroups: [Group!]!
  app(id: ID = null, identifier: AppIdentifier = null, clientId: ID = null): App!
  release(id: ID = null, identifier: AppIdentifier = null, version: Version = null, clientId: ID = null): Release!
  client(id: ID = null, clientId: ID = null): Client!
  myManagedClients(kind: ClientKind!): Client!
  scopes: [Scope!]!
  comment(id: ID!): Comment!
  commentsFor(identifier: Identifier!, object: ID!): [Comment!]!
  myMentions: [Comment!]!
  myActiveMessages: [SystemMessage!]!
  message(id: ID!): SystemMessage!
  hallo: String!
  service(id: ID!): Service!
  layer(id: ID!): Layer!
  serviceInstance(id: ID!): ServiceInstance!
}

"\nA Stash\n"
type Stash {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  isActive: Boolean!
  items(filters: StashItemFilter, pagination: OffsetPaginationInput): [StashItem!]!

  """The number of items in the stash"""
  owner: User!
}

"""Date with time (isoformat)"""
scalar DateTime

"\nA stashed item\n"
type StashItem {
  id: ID!
  identifier: String!
  description: String
  object: String!
  addedAt: DateTime!
  updatedAt: DateTime!
}

"""
StashItem(id, stash, identifier, object, added_by, added_at, updated_at)
"""
input StashItemFilter {
  search: String
  username: StrFilterLookup
  ids: [ID!]
  stashes: [ID!]
  AND: StashItemFilter
  OR: StashItemFilter
  NOT: StashItemFilter
  DISTINCT: Boolean
}

"""__doc__"""
input StashFilter {
  search: String
  ids: [ID!]
  AND: StashFilter
  OR: StashFilter
  NOT: StashFilter
  DISTINCT: Boolean
}

"""
An App is the Arkitekt equivalent of a Software Application. It is a collection of `Releases` that can be all part of the same application. E.g the App `Napari` could have the releases `0.1.0` and `0.2.0`.
"""
type App {
  id: ID!

  """The name of the app"""
  name: String!

  """
  The identifier of the app. This should be a globally unique string that identifies the app. We encourage you to use the reverse domain name notation. E.g. `com.example.myapp`
  """
  identifier: AppIdentifier!

  """
  The releases of the app. A release is a version of the app that can be installed by a user.
  """
  releases: [Release!]!

  """
  The logo of the app. This should be a url to a logo that can be used to represent the app.
  """
  logo: MediaStore
}

"""
The App identifier is a unique identifier for an app. It is used to identify the app in the database and in the code. We encourage you to use the reverse domain name notation. E.g. `com.example.myapp`
"""
scalar AppIdentifier

"""
A Release is a version of an app. Releases might change over time. E.g. a release might be updated to fix a bug, and the release might be updated to add a new feature. This is why they are the home for `scopes` and `requirements`, which might change over the release cycle.
"""
type Release {
  id: ID!

  """The app that this release belongs to."""
  app: App!

  """
  The version of the release. This should be a string that identifies the version of the release. We enforce semantic versioning notation. E.g. `0.1.0`. The version is unique per app.
  """
  version: Version!

  """
  The name of the release. This should be a string that identifies the release beyond the version number. E.g. `canary`.
  """
  name: String!

  """
  The logo of the release. This should be a url to a logo that can be used to represent the release.
  """
  logo: MediaStore

  """
  The scopes of the release. Scopes are used to limit the access of a client to a user's data. They represent app-level permissions.
  """
  scopes: [String!]!

  """
  The requirements of the release. Requirements are used to limit the access of a client to a user's data. They represent app-level permissions.
  """
  requirements: [String!]!

  """The clients of the release"""
  clients(filters: ClientFilter, pagination: OffsetPaginationInput): [Client!]!
}

"""The `Version` represents a semver version string"""
scalar Version

"""
A client is a way of authenticating users with a release.
 The strategy of authentication is defined by the kind of client. And allows for different authentication flow. 
 E.g a client can be a DESKTOP app, that might be used by multiple users, or a WEBSITE that wants to connect to a user's account, 
 but also a DEVELOPMENT client that is used by a developer to test the app. The client model thinly wraps the oauth2 client model, which is used to authenticate users.
"""
type Client {
  id: ID!

  """The release that this client belongs to."""
  release: Release!

  """The user that manages this release."""
  tenant: User!

  """
  The configuration of the client. This is the configuration that will be sent to the client. It should never contain sensitive information.
  """
  kind: ClientKind!

  """
  The real oauth2 client that is used to authenticate users with this client.
  """
  oauth2Client: Oauth2Client!

  """Is this client public? If a client is public """
  public: Boolean!

  """
  If the client is a DEVELOPMENT client, which requires no further authentication, this is the user that is authenticated with the client.
  """
  user: User

  """
  The logo of the release. This should be a url to a logo that can be used to represent the release.
  """
  logo: MediaStore

  """The name of the client. This is a human readable name of the client."""
  name: String!

  """
  The mappings of the client. A mapping is a mapping of a service to a service instance. This is used to configure the composition.
  """
  mappings: [ServiceInstanceMapping!]!

  """
  The configuration of the client. This is the configuration that will be sent to the client. It should never contain sensitive information.
  """
  token: String!
}

enum ClientKind {
  DEVELOPMENT
  WEBSITE
  DESKTOP
}

"""
OAuth2Client(id, user, client_id, client_secret, redirect_uris, scope, token_endpoint_auth_method, grant_types, response_types)
"""
type Oauth2Client {
  id: String!
  clientId: String!
}

"""
A ServiceInstance is a configured instance of a Service. It will be configured by a configuration backend and will be used to send to the client as a configuration. It should never contain sensitive information.
"""
type ServiceInstanceMapping {
  id: ID!

  """The service that this instance belongs to."""
  instance: ServiceInstance!

  """The client that this instance belongs to."""
  client: Client!

  """
  The key of the instance. This is a unique string that identifies the instance. It is used to identify the instance in the code and in the database.
  """
  key: String!

  """
  Is this mapping optional? If a mapping is optional, you can configure the client without this mapping.
  """
  optional: Boolean!
}

"""
A ServiceInstance is a configured instance of a Service. It will be configured by a configuration backend and will be used to send to the client as a configuration. It should never contain sensitive information.
"""
type ServiceInstance {
  id: ID!

  """The service that this instance belongs to."""
  service: Service!

  """
  The name of the instance. This is a human readable name of the instance.
  """
  name: String!

  """
  The identifier of the instance. This is a unique string that identifies the instance. It is used to identify the instance in the code and in the database.
  """
  identifier: String!

  """The users that are allowed to use this instance."""
  allowedUsers(filters: UserFilter, pagination: OffsetPaginationInput): [User!]!

  """The users that are denied to use this instance."""
  deniedUsers(filters: UserFilter, pagination: OffsetPaginationInput): [User!]!

  """The groups that are allowed to use this instance."""
  allowedGroups(filters: GroupFilter, pagination: OffsetPaginationInput): [Group!]!

  """The groups that are denied to use this instance."""
  deniedGroups(filters: GroupFilter, pagination: OffsetPaginationInput): [Group!]!

  """
  The mappings of the composition. A mapping is a mapping of a service to a service instance. This is used to configure the composition.
  """
  mappings: [ServiceInstanceMapping!]!

  """
  The logo of the app. This should be a url to a logo that can be used to represent the app.
  """
  logo: MediaStore

  """
  The aliases of the instance. An alias is a way to reach the instance. Clients can use these aliases to check if they can reach the instance. An alias can be an absolute alias (e.g. 'example.com') or a relative alias (e.g. 'example.com/path'). If the alias is relative, it will be relative to the layer's domain, port and path.
  """
  aliases: [InstanceAlias!]!
}

"""
A Service is a Webservice that a Client might want to access. It is not the configured instance of the service, but the service itself.
"""
type Service {
  id: ID!

  """The name of the service"""
  name: String!

  """
  The identifier of the service. This should be a globally unique string that identifies the service. We encourage you to use the reverse domain name notation. E.g. `com.example.myservice`
  """
  identifier: ServiceIdentifier!

  """
  The description of the service. This should be a human readable description of the service.
  """
  description: String

  """
  The instances of the service. A service instance is a configured instance of a service. It will be configured by a configuration backend and will be used to send to the client as a configuration. It should never contain sensitive information.
  """
  instances(filters: ServiceInstanceFilter, pagination: OffsetPaginationInput): [ServiceInstance!]!

  """
  The logo of the app. This should be a url to a logo that can be used to represent the app.
  """
  logo: MediaStore
}

"""
The Service identifier is a unique identifier for a service. It is used to identify the service in the database and in the code. We encourage you to use the reverse domain name notation. E.g. `com.example.myservice`
"""
scalar ServiceIdentifier

"""ServiceInstance(id, service, logo, identifier, steward, template)"""
input ServiceInstanceFilter {
  search: String
  ids: [ID!]
  AND: ServiceInstanceFilter
  OR: ServiceInstanceFilter
  NOT: ServiceInstanceFilter
  DISTINCT: Boolean
}

"""
A User of the System

Lok Users are the main users of the system. They can be assigned to groups and have profiles, that can be used to display information about them.
Each user is identifier by a unique username, and can have an email address associated with them.
"""
input UserFilter {
  search: String

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: StrFilterLookup
  ids: [ID!]
  AND: UserFilter
  OR: UserFilter
  NOT: UserFilter
  DISTINCT: Boolean
}

"""
An alias for a service instance. This is used to provide a more user-friendly name for the instance.
"""
type InstanceAlias {
  id: ID!

  """The layer that this alias belongs to."""
  layer: Layer!

  """The instance that this alias belongs to."""
  instance: ServiceInstance!

  """The name of the alias. This is a human readable name of the alias."""
  kind: String!

  """
  The host of the alias, if its a ABSOLUTE alias (e.g. 'example.com'). If not set, the alias is relative to the layer's domain.
  """
  host: String

  """
  The port of the alias, if its a ABSOLUTE alias (e.g. 'example.com:8080'). If not set, the alias is relative to the layer's port.
  """
  port: Int

  """
  The path of the alias, if its a ABSOLUTE alias (e.g. 'example.com/path'). If not set, the alias is relative to the layer's path.
  """
  path: String

  """
  Is this alias using SSL? If true, the alias will be accessed via https:// instead of http://. This is used to indicate that the alias is secure and should be accessed via SSL
  """
  ssl: Boolean!

  """
  The challenge of the alias. This is used to verify that the alias is reachable. If set, the alias will be accessed via the challenge URL (e.g. 'example.com/.well-known/challenge'). If not set, the alias will be accessed via the instance's URL.
  """
  challenge: String!
}

"""
A Service is a Webservice that a Client might want to access. It is not the configured instance of the service, but the service itself.
"""
type Layer {
  id: ID!

  """The name of the layer"""
  name: String!

  """
  The identifier of the service. This should be a globally unique string that identifies the service. We encourage you to use the reverse domain name notation. E.g. `com.example.myservice`
  """
  identifier: ServiceIdentifier!

  """
  The logo of the service. This should be a url to a logo that can be used to represent the service.
  """
  logo: MediaStore

  """
  The description of the service. This should be a human readable description of the service.
  """
  description: String

  """
  The instances of the service. A service instance is a configured instance of a service. It will be configured by a configuration backend and will be used to send to the client as a configuration. It should never contain sensitive information.
  """
  instances(filters: ServiceInstanceFilter, pagination: OffsetPaginationInput): [ServiceInstance!]!
}

"""
Client(id, name, release, oauth2_client, kind, user, redirect_uris, public, token, tenant, created_at, requirements_hash, logo)
"""
input ClientFilter {
  search: String
  ids: [ID!]
  AND: ClientFilter
  OR: ClientFilter
  NOT: ClientFilter
  DISTINCT: Boolean
}

"""App(id, name, identifier, logo)"""
input AppFilter {
  search: String
  ids: [ID!]
  AND: AppFilter
  OR: AppFilter
  NOT: AppFilter
  DISTINCT: Boolean
}

"""
Comments represent the comments of a user on a specific data item
tart are identified by the unique combination of `identifier` and `object`.
E.g a comment for an Image on the Mikro services would be serverd as
`@mikro/image:imageID`.

Comments always belong to the user that created it. Comments in threads
get a parent attribute set, that points to the immediate parent.

Each comment contains multiple descendents, that make up a *rich* representation
of the underlying comment data including potential mentions, or links, or
paragraphs.
"""
type Comment {
  id: ID!

  """The object id of the object, on its associated service"""
  object: String!

  """The identifier of the object. Consult the documentation for the format"""
  identifier: Identifier!

  """The children of this comment"""
  children: [Comment!]!

  """The parent of this comment. Think Thread"""
  parent: Comment

  """The time this comment got created"""
  createdAt: DateTime!

  """The users that got mentioned in this comment"""
  mentions(filters: UserFilter, pagination: OffsetPaginationInput): [User!]!

  """The user that resolved this comment"""
  resolvedBy: User

  """The user that created this comment"""
  user: User!

  """
  The immediate descendends of the comments. Think typed Rich Representation
  """
  descendants: [Descendant!]!
  resolved: Boolean!
}

"""
The `Identifier` scalasr typsse represents a reference to a store previously created by the user n a datalayer
"""
scalar Identifier

"""Service(id, name, identifier, logo, description)"""
input ServiceFilter {
  search: String
  ids: [ID!]
  AND: ServiceFilter
  OR: ServiceFilter
  NOT: ServiceFilter
  DISTINCT: Boolean
}

"""
Layer(id, name, identifier, logo, description, dns_probe, get_probe, kind)
"""
input LayerFilter {
  search: String
  ids: [ID!]
  AND: LayerFilter
  OR: LayerFilter
  NOT: LayerFilter
  DISTINCT: Boolean
}

"""
A redeem token is a token that can be used to redeem the rights to create
a client. It is used to give the recipient the right to create a client.

If the token is not redeemed within the expires_at time, it will be invalid.
If the token has been redeemed, but the manifest has changed, the token will be invalid.
"""
type RedeemToken {
  id: ID!

  """The token of the redeem token"""
  token: String!

  """The client that this redeem token belongs to."""
  client: Client

  """The user that this redeem token belongs to."""
  user: User!
}

"""
A redeem token is a token that can be used to redeem the rights to create
a client. It is used to give the recipient the right to create a client.

If the token is not redeemed within the expires_at time, it will be invalid.
If the token has been redeemed, but the manifest has changed, the token will be invalid.
"""
input RedeemTokenFilter {
  search: String
  ids: [ID!]
  AND: RedeemTokenFilter
  OR: RedeemTokenFilter
  NOT: RedeemTokenFilter
  DISTINCT: Boolean
}

"""
A scope that can be assigned to a client. Scopes are used to limit the access of a client to a user's data. They represent app-level permissions.
"""
type Scope {
  """The label of the scope. This is the human readable name of the scope."""
  label: String!

  """
  The description of the scope. This is a human readable description of the scope.
  """
  description: String!

  """
  The value of the scope. This is the value that is used in the OAuth2 flow.
  """
  value: String!
}

"\nA System Message is a message that is sent to a user. \nIt can be used to notify the user of important events or to request their attention.\nSystem messages can use Rekuest Hooks as actions to allow the user to interact with the message.\n\n\n"
type SystemMessage {
  id: ID!
  title: String!
  message: String!

  """The action to take (e.g. the node)"""
  action: String!
  user: User!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  createComment(input: CreateCommentInput!): Comment!
  replyTo(input: ReplyToCommentInput!): Comment!
  resolveComment(input: ResolveCommentInput!): Comment!
  createDevelopmentalClient(input: DevelopmentClientInput!): Client!
  render(input: RenderInput!): Fakt!
  acknowledgeMessage(input: AcknowledgeMessageInput!): SystemMessage!

  """Create a new stash"""
  createStash(input: CreateStashInput!): Stash!

  """Update a stash"""
  updateStash(input: UpdateStashInput!): Stash!

  """Add items to a stash"""
  addItemsToStash(input: AddItemToStashInput!): [StashItem!]!

  """Delete items from a stash"""
  deleteStashItems(input: DeleteStashItems!): [ID!]!
  deleteStash(input: DeleteStashInput!): ID!
  createServiceInstance(input: CreateServiceInstanceInput!): ServiceInstance!
  updateServiceInstance(input: UpdateServiceInstanceInput!): ServiceInstance!
  createInstanceAlias(input: CreateServiceInstanceInput!): InstanceAlias!
  updateInstanceAlias(input: UpdateServiceInstanceInput!): InstanceAlias!
  requestMediaUpload(input: RequestMediaUploadInput!): PresignedPostCredentials!
  updateProfile(input: UpdateProfileInput!): Profile!
  createProfile(input: CreateProfileInput!): Profile!
  updateGroupProfile(input: UpdateGroupProfileInput!): GroupProfile!
  createGroupProfile(input: CreateGroupProfileInput!): GroupProfile!
}

input CreateUserInput {
  name: String!
}

input CreateCommentInput {
  descendants: [DescendantInput!]!
  identifier: Identifier!
  object: ID!
  parent: ID = null
  notify: Boolean = false
}

input DescendantInput {
  kind: DescendantKind!
  children: [DescendantInput!]
  user: String
  bold: Boolean
  italic: Boolean
  code: Boolean
  text: String
}

input ReplyToCommentInput {
  descendants: [DescendantInput!]!
  parent: ID
  notify: Boolean
}

input ResolveCommentInput {
  id: ID!
  notify: Boolean
}

input DevelopmentClientInput {
  manifest: ManifestInput!
  composition: ID = null
  requirements: [Requirement!]! = []
  layers: [String!] = ["web"]
}

input ManifestInput {
  identifier: String!
  version: String!
  logo: String = null
  scopes: [String!]! = []
}

input Requirement {
  service: String!
  optional: Boolean! = false
  description: String = null
  key: String!
}

"""The `Fakt` scalar type represents a reference to a fakt"""
scalar Fakt

input RenderInput {
  client: ID!
  composition: ID = null
  request: LinkingRequestInput = null
  manifest: ManifestInput = null
}

input LinkingRequestInput {
  host: String!
  port: String!
  isSecure: Boolean! = false
}

input AcknowledgeMessageInput {
  id: ID!
  acknowledged: Boolean!
}

input CreateStashInput {
  name: String = null
  description: String = null
}

input UpdateStashInput {
  stash: ID!
  name: String!
  description: String = null
}

input AddItemToStashInput {
  stash: ID!
  items: [StashItemInput!]!
}

input StashItemInput {
  identifier: String!
  description: String = null
  object: String!
}

input DeleteStashItems {
  items: [ID!]!
}

input DeleteStashInput {
  stash: ID!
}

input CreateServiceInstanceInput {
  identifier: String!
  service: ID!
  allowedUsers: [ID!] = null
  allowedGroups: [ID!] = null
  deniedGroups: [ID!] = null
  deniedUsers: [ID!] = null
}

input UpdateServiceInstanceInput {
  allowedUsers: [ID!] = null
  allowedGroups: [ID!] = null
  deniedGroups: [ID!] = null
  deniedUsers: [ID!] = null
  id: ID!
}

"""
Temporary Credentials for a file upload that can be used by a Client (e.g. in a python datalayer)
"""
type PresignedPostCredentials {
  key: String!
  xAmzAlgorithm: String!
  xAmzCredential: String!
  xAmzDate: String!
  xAmzSignature: String!
  policy: String!
  datalayer: String!
  bucket: String!
  store: String!
}

input RequestMediaUploadInput {
  key: String!
  datalayer: String!
}

input UpdateProfileInput {
  id: ID!
  name: String!
  avatar: ID!
}

input CreateProfileInput {
  user: ID!
  name: String!
}

input UpdateGroupProfileInput {
  id: ID!
  name: String!
  avatar: ID!
}

input CreateGroupProfileInput {
  group: ID!
  name: String!
  avatar: ID!
}

type Subscription {
  communications(channels: [ID!]!): Communication!
  mentions: Comment!
}

"""A Communication"""
type Communication {
  channel: ID!
}