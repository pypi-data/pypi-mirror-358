[tool.poetry]
name = "django-data-purger"
version = "0.2.5"
description = "Periodically remove data from your Django app."
authors = ["Eirik Martiniussen Sylliaas <eirik@sylliaas.no>"]
license = "MIT"
readme = "README.md"
packages = [{include = "django_data_purger", from = "src"}]

[tool.poetry.dependencies]
python = ">= 3.11, < 3.14"
pydantic = "^2.11.6"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.13"
mypy = "^1.16.1"
pytest = "^8.4.0"
pytest-cov = "^6.2.1"
pytest-django = "^4.11.1"
pytest-socket = "^0.7.0"
django-stubs = "^5.2.0"
pytest-xdist = "^3.7.0"
django = "^5.2.3"
networkx = "^3.4.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "migrations",
]

[tool.ruff.lint]
select = [
    # Regular flake8 rules
    "C", "E", "F", "W",
    # flake8-bugbear rules
    "B",
    # Import sorting rules
    "I",
    # Django rules
    "DJ",
    # flake8-comprehensions
    "C4",
    # Pylint rules
    "PLC", "PLE", "PLR", "PLW",
    # Ruff
    "RUF",
]
ignore = [
    # Disable magic value comparison. They're perfectly valid in tests and quite a few
    # other places in the codebase. It would just be annoying to refactor.
    "PLR2004",
    # Too many return statements.
    "PLR0911",
    # Too many arguments to function call.
    "PLR0913",
    # DJ001 Avoid using null=True on string-based fields
    "DJ001",
    # DJ008 Model does not define __str__ method
    "DJ008",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.mypy]
python_version = "3.12"
plugins = ["mypy_django_plugin.main", "pydantic.mypy"]
strict = true
ignore_missing_imports = true

[tool.django-stubs]
django_settings_module = "tests.settings"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[[tool.mypy.overrides]]
module = [
    # Disable typing in migration files generated by Django
    "django_data_purger.*.migrations.*",
]
ignore_errors = true

[tool.pytest.ini_options]
pythonpath = [".", "src"]
testpaths = ["tests"]
# Reuse the database between tests
addopts = [
    "--reuse-db",
    "--allow-hosts=localhost,::1,127.0.0.1",
]
# Include captured log messages in system-out in CI report file
junit_logging = "system-out"
markers = [ ]
# --- pytest-django settings
django_find_project = false
DJANGO_SETTINGS_MODULE = "tests.settings"

# Ignore select warnings from third party libraries.
filterwarnings = [
    "error",
]

[tool.coverage.run]
branch = true
source = [ "src/django_data_purger" ]
omit = [
    "*/migrations/*",
]

[tool.coverage.report]
fail_under = 30
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "coverage"
