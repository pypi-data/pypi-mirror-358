text = """
This Tutorial cover the processing of stereo images with DPIVSoft.

As long as not synthetic stereo images are yet avaiable, samples are not
included in order to keep the library as light as possible. However,
it should be easy addapt this script to your own data.

The calibration file is generated by using the intuitive Tkinter GUI added
to DPIVSoft. You can use it by running stereo_GUI method inside stereo_DPIV.py.
For example:

    import dpivsoft.stereo_DPIV as stDPIV

    stDPIV.stereo_GUI()

This message appears only becouse the data is not correct, copy the original
file and addapt it to your own images.

"""


# Standar libraries
import numpy as np
import matplotlib.pyplot as plt
import cv2
import time
import os
import sys

# DPIVSoft libraries
import dpivsoft.DPIV as DPIV      #Python PIV implementation
import dpivsoft.Cl_DPIV as Cl_DPIV   #OpenCL PIV implementation
import dpivsoft.SyIm as SyIm  #Syntetic images generator
import dpivsoft.stereo_DPIV as Stereo

from dpivsoft.Classes  import Parameters
from dpivsoft.Classes  import grid
from dpivsoft.Classes  import GPU
from dpivsoft.Classes  import Synt_Img

#=============================================================================
# WORKING FOLDERS
#=============================================================================
dirCode = os.getcwd()   #Current path
dirImg_left = dirCode + "/Images/stereo_tutorial/leftCamera"   #Images folder
dirImg_right = dirCode + "/Images/stereo_tutorial/rightCamera"   #Images folder
dirRes = dirCode + "/Results/stereo_tutorial"  #Results folder

if not os.path.exists(dirImg_left):
    os.makedirs(dirImg_left)
if not os.path.exists(dirRes):
    os.makedirs(dirRes)

#=============================================================================
# LIST OF IMAGES TO PROCESS
#=============================================================================
files = os.listdir(dirImg_left)
files_left = sorted([i for i in files if i.endswith('.bmp')])
files = os.listdir(dirImg_right)
files_right = sorted([i for i in files if i.endswith('.bmp')])

#=============================================================================
# SET PIV PARAMETERS
#=============================================================================
# 1: Set parameters manually (see Classes.py for more details):
Parameters.box_size_2_x = 32

# 2: Arternateively parameters can be load from a file using readParamters():
try:
    Parameters.readParameters(dirCode+'/stereo_tutorial_parameters.yaml')
except:
    print(text)
    sys.exit()

# Calibration parameters for stereo transformation
calibration = Parameters.stereo_calibration

#=============================================================================
# PYTHON PROCESSING
#=============================================================================
start = time.time()
# Loop for load all images (only one in the example)
for i in range(0,len(files),2):

    # Name of the images
    name_img_1 = dirImg_left +'/'+files_left[i]
    name_img_2 = dirImg_left +'/'+files_left[i+1]

    # Load images
    Img1, Img2 = DPIV.load_images(name_img_1, name_img_2)
    [height, width] = Img1.shape

    # PIV processing python
    [x_l, y_l, u_l, v_l] = DPIV.processing(Img1, Img2)

    # Name of the images
    name_img_1 = dirImg_right +'/'+files_right[i]
    name_img_2 = dirImg_right +'/'+files_right[i+1]

    # Load images
    Img1, Img2 = DPIV.load_images(name_img_1, name_img_2)

    # PIV processing python
    [x_r, y_r, u_r, v_r] = DPIV.processing(Img1, Img2)

    # Stereo velocity
    x, y, u, v, u_z = Stereo.stereo_velocity(
           x_l, y_l, u_l, v_l, x_r, y_r, u_r, v_r, calibration)

    # Save results in ASCII file compatible with openPIV format
    saveName = dirRes + '/cpu_field_' + format(int(i/2), '03d')
    DPIV.save(x, y, u, v, saveName, 'openpiv')

print("Python algorithm finished. Time = ", time.time()-start, "s")

#=============================================================================
# OPENCL PROCESSING (The same but much faster)
#=============================================================================

# Select platform (only needed once). If more than one platform is installed
# use "selection"
thr = Cl_DPIV.select_Platform(0)
os.environ['PYOPENCL_COMPILER_OUTPUT'] = '1'

# Load first pair of images to start the computation and set arrays sizes
name_img_1 = dirImg_left+'/'+files_left[0]
name_img_2 = dirImg_left+'/'+files_left[1]
Img1, Img2 = DPIV.load_images(name_img_1, name_img_2)
[height, width] = Img1.shape

# Send first pair of images to GPU
GPU.img1 = thr.to_device(Img1)
GPU.img2 = thr.to_device(Img2)

# Compile kernels and initialize variables (only needed once)
Cl_DPIV.compile_Kernels(thr)
Cl_DPIV.initialization(width, height, thr)

start = time.time()
# Loop for load all images (only one in the example)
for i in range(0,len(files_left),2):

    # Get the name of the next right camera images if needed
    if i<len(files)-3:
        #Name of next iteration Images
        name_img_1 = dirImg_left + '/' + files_left[i+2]
        name_img_2 = dirImg_left + '/' + files_left[i+3]

    # Process left camera images. (right images path is send to be
    # loaded in parallel during runtime)
    Cl_DPIV.processing(name_img_1, name_img_2, thr)

    # Get left results from GPU
    x_l = GPU.x2.get()
    y_l = GPU.y2.get()
    u_l = GPU.u2_f.get()
    v_l = GPU.v2_f.get()

    if i<len(files)-3:
        name_img_1 = dirImg_right + '/' + files_right[i+2]
        name_img_2 = dirImg_right + '/' + files_right[i+3]

    # Process right camera images. (left images path is send to be
    # loaded in parallel during runtime)
    Cl_DPIV.processing(name_img_1, name_img_2, thr)

    # Get right results from GPU
    x_r = GPU.x2.get()
    y_r = GPU.y2.get()
    u_r = GPU.u2_f.get()
    v_r = GPU.v2_f.get()

    # Stereo velocity
    x, y, u, v, u_z = Stereo.stereo_velocity(
            x_l, y_l, u_l, v_l, x_r, y_r, u_r, v_r, calibration)

    # Save results in numpy file compatible with DPIVSoft format
    saveName = dirRes + '/gpu_field_' +  format(int(i/2), '03d')
    Stereo.save(x, y, u, v, u_z, saveName)

print("OpenCl algorithm finished. Time = ", time.time()-start, "s")

#=============================================================================
# WORK WITH RESULTS
#=============================================================================

files = os.listdir(dirRes)
files = sorted([i for i in files if i.endswith('.npz')])

for fileName in files:

    # Load PIV results
    Data = np.load(dirRes+'/'+fileName)

    x = Data['x']
    y = Data['y']
    u = Data['u']
    v = Data['v']
    u_z = Data['u_z']

    fig, ax1 = plt.subplots()
    plt.contourf(x, y, u_z)
    plt.quiver(x, y, u, v, scale=1 / 0.1)
    plt.show()
