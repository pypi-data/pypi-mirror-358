def explain_summary(summary, language="en"):
    if language == "hi":
        print("ЁЯФН рдбреЗрдЯрд╛ рд╕рд╛рд░рд╛рдВрд╢:")
        print(f"- рдХреБрд▓ рдкрдВрдХреНрддрд┐рдпрд╛рдБ: {summary['rows']}")
        print(f"- рдХреБрд▓ рдХреЙрд▓рдо: {summary['columns']}")
        print(f"- рдХреЙрд▓рдо рдирд╛рдо: {', '.join(summary['column_names'])}")
        print(f"- рдорд┐рд╕рд┐рдВрдЧ рд╡реИрд▓реНрдпреВ: {summary['missing_values']}")
    else:
        print("ЁЯФН Data Summary:")
        print(f"- Total rows: {summary['rows']}")
        print(f"- Total columns: {summary['columns']}")
        print(f"- Column names: {', '.join(summary['column_names'])}")
        print(f"- Missing values: {summary['missing_values']}")



#new functrion to explain summary data
def explain_summary_data(stats, language="en"):
    if language == "hi":
        print("ЁЯУК рдХреЙрд▓рдо рд╕рд╛рд░рд╛рдВрд╢:")
        for col in stats:
            print(f"- {col['name']} ({col['dtype']})")
            print(f"  ЁЯФ╣ рдпреВрдирд┐рдХ: {col['unique']} | рдорд┐рд╕рд┐рдВрдЧ: {col['missing']}")
            print(f"  ЁЯФ╕ рдФрд╕рдд: {col['mean']} | рдорд╛рдзреНрдпрд┐рдХрд╛: {col['median']}")
    else:
        print("ЁЯУК Column Summary:")
        for col in stats:
            print(f"- {col['name']} ({col['dtype']})")
            print(f"  ЁЯФ╣ Unique: {col['unique']} | Missing: {col['missing']}")
            print(f"  ЁЯФ╕ Mean: {col['mean']} | Median: {col['median']}")



# Function to explain outliers in a dataset
def explain_outliers(outliers, column, language="en"):
    if outliers.empty:
        print("тЬЕ No outliers found.")
        return 

    if language == "hi":
        print(f"тЪая╕П рдЖрдЙрдЯрд▓рд╛рдЗрдирд░ рдкрдВрдХреНрддрд┐рдпрд╛рдБ ({column}):")
        for idx, row in outliers.iterrows():
            print(f"- рдкрдВрдХреНрддрд┐ {idx + 1}: рдорд╛рди = {row[column]}")
    else:
        print(f"тЪая╕П Outlier rows detected in column '{column}':")
        for idx, row in outliers.iterrows():
            print(f"- Row {idx + 1}: Value = {row[column]}")

# Function to explain insights derived from a dataset
def explain_insights(insights, language="en"):
    if language == "hi":
        print("ЁЯУМ рдбреЗрдЯрд╛ рдЕрд╡рд▓реЛрдХрди:")
        for i in insights:
            if i["type"] == "missing":
                print(f"ЁЯФ╕ рдХреЙрд▓рдо '{i['column']}' рдореЗрдВ {i['value']} рдЧрд╛рдпрдм рдорд╛рди рд╣реИрдВред")
            elif i["type"] == "peak":
                print(f"ЁЯФ║ '{i['column']}' рдХрд╛ рдЙрдЪреНрдЪрддрдо рдорд╛рди {i['value']} рд╣реИ, {i['context']} рдорд╣реАрдиреЗ рдореЗрдВред")
            elif i["type"] == "category":
                print(f"ЁЯФ╣ '{i['column']}' рдХреЙрд▓рдо рдореЗрдВ {i['value']} рдпреВрдирд┐рдХ рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐рдпрд╛рдБ рд╣реИрдВред")
    else:
        print("ЁЯУМ Data Insights:")
        for i in insights:
            if i["type"] == "missing":
                print(f"ЁЯФ╕ Column '{i['column']}' has {i['value']} missing values.")
            elif i["type"] == "peak":
                print(f"ЁЯФ║ Highest '{i['column']}' is {i['value']} in {i['context']}.")
            elif i["type"] == "category":
                print(f"ЁЯФ╣ '{i['column']}' has {i['value']} unique entries.")


# Function to explain the comparison report of two datasets
# This function takes a report generated by the comparison and prints a user-friendly explanation of the differences


def explain_comparison(report, language="en"):
    if not report:
        print("тЬЕ Files are identical.")
        return

    if language == "hi":
        print("ЁЯУК рддреБрд▓рдирд╛ рдкрд░рд┐рдгрд╛рдо:")
        for r in report:
            if r["type"] == "shape":
                print(f"ЁЯФ╣ рдЖрдХрд╛рд░ рдмрджрд▓рд╛ рдЧрдпрд╛: рдлрд╝рд╛рдЗрд▓1 = {r['file1']}, рдлрд╝рд╛рдЗрд▓2 = {r['file2']}")
            elif r["type"] == "columns_added":
                print(f"тЮХ рдирдП рдХреЙрд▓рдо: {', '.join(r['columns'])}")
            elif r["type"] == "columns_removed":
                print(f"тЮЦ рд╣рдЯрд╛рдП рдЧрдП рдХреЙрд▓рдо: {', '.join(r['columns'])}")
            elif r["type"] == "missing_changed":
                print(f"ЁЯФ╕ '{r['column']}' рдХреЙрд▓рдо рдореЗрдВ рдорд┐рд╕рд┐рдВрдЧ рдорд╛рди рдмрджрд▓ рдЧрдП: рдлрд╝рд╛рдЗрд▓1 = {r['file1']}, рдлрд╝рд╛рдЗрд▓2 = {r['file2']}")
            elif r["type"] == "rows_diff":
                print(f"ЁЯФБ рдкрдВрдХреНрддрд┐рдпрд╛рдБ рдмрджрд▓реАрдВ: рдлрд╝рд╛рдЗрд▓1 = {r['file1']}, рдлрд╝рд╛рдЗрд▓2 = {r['file2']}")
    else:
        print("ЁЯУК Comparison Report:")
        for r in report:
            if r["type"] == "shape":
                print(f"ЁЯФ╣ Shape changed: File1 = {r['file1']}, File2 = {r['file2']}")
            elif r["type"] == "columns_added":
                print(f"тЮХ New columns: {', '.join(r['columns'])}")
            elif r["type"] == "columns_removed":
                print(f"тЮЦ Removed columns: {', '.join(r['columns'])}")
            elif r["type"] == "missing_changed":
                print(f"ЁЯФ╕ Missing values changed in '{r['column']}': File1 = {r['file1']}, File2 = {r['file2']}")
            elif r["type"] == "rows_diff":
                print(f"ЁЯФБ Row count changed: File1 = {r['file1']}, File2 = {r['file2']}")

# Function to explain the analysis of a specific column in a dataset
def explain_column_output(info):
    col = info["column"]
    lang = info["language"]

    if lang == "hi":
        print(f"ЁЯУШ рдХреЙрд▓рдо '{col}' рд╡рд┐рд╢реНрд▓реЗрд╖рдг:")
        print("ЁЯФв рдпрд╣ рдПрдХ рд╕рдВрдЦреНрдпрд╛рддреНрдордХ рдХреЙрд▓рдо рд╣реИред" if info["dtype"] == "numeric" else "ЁЯФа рдпрд╣ рдПрдХ рд╢реНрд░реЗрдгреАрдмрджреНрдз рдХреЙрд▓рдо рд╣реИред")
        print(f"ЁЯФ╕ рдХреБрд▓ {info['missing']} рдЧрд╛рдпрдм рдорд╛рди рд╣реИрдВред")
        print(f"ЁЯУК рдЕрджреНрд╡рд┐рддреАрдп рдорд╛рди: {info['unique']} / {info['total']}")
        if info["binary_like"]:
            print("тЬЕ рдпрд╣ рдПрдХ рд╕рдВрднрд╛рд╡рд┐рдд рдЯрд╛рд░реНрдЧреЗрдЯ рдХреЙрд▓рдо рд╣реЛ рд╕рдХрддрд╛ рд╣реИред")
    else:
        print(f"ЁЯУШ Column '{col}' analysis:")
        print("ЁЯФв This is a numeric column." if info["dtype"] == "numeric" else "ЁЯФа This is a categorical column.")
        print(f"ЁЯФ╕ Missing values: {info['missing']}")
        print(f"ЁЯУК Unique values: {info['unique']} out of {info['total']}")
        if info["binary_like"]:
            print("тЬЕ This may be a good candidate for a target column.")


# Function to explain cleaned column names after processing
# This function takes the old and new column names and prints a summary of the changes

def explain_cleaned_columns(old_cols, new_cols, language="en"):
    if language == "hi":
        print("ЁЯз╣ рдХреЙрд▓рдо рдирд╛рдо рд╕рдлрд╛рдИ рдкреВрд░реА рд╣реБрдИ:")
        for old, new in zip(old_cols, new_cols):
            print(f"ЁЯФД '{old}' тЮЭ '{new}'")
    else:
        print("ЁЯз╣ Column name cleaning complete:")
        for old, new in zip(old_cols, new_cols):
            print(f"ЁЯФД '{old}' тЮЭ '{new}'")



# Function to explain the result of a bias test
# This function takes the result of a bias test and prints a user-friendly explanation


def explain_bias_result(result, language="en"):
    p = result["p_value"]
    by = result["by"]
    target = result["target"]
    significant = result["significant"]

    if language == "hi":
        print(f"ЁЯУК '{by}' рдФрд░ '{target}' рдХреЗ рдмреАрдЪ рдкреВрд░реНрд╡рд╛рдЧреНрд░рд╣ рдкрд░реАрдХреНрд╖рдг:")
        print(f"ЁЯФм p-рдореВрд▓реНрдп = {p}")
        if significant:
            print("тЪая╕П рд╕рд╛рдВрдЦреНрдпрд┐рдХреАрдп рд░реВрдк рд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдкреВрд░реНрд╡рд╛рдЧреНрд░рд╣ рдкрд╛рдпрд╛ рдЧрдпрд╛ рд╣реИред")
        else:
            print("тЬЕ рдХреЛрдИ рдкреВрд░реНрд╡рд╛рдЧреНрд░рд╣ рдирд╣реАрдВ рдкрд╛рдпрд╛ рдЧрдпрд╛ред")
    else:
        print(f"ЁЯУК Bias test between '{by}' and '{target}':")
        print(f"ЁЯФм p-value = {p}")
        if significant:
            print("тЪая╕П Statistically significant bias detected.")
        else:
            print("тЬЕ No significant bias detected.")
