name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pydantic
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install ".[dev]"  # Install dev dependencies including linting tools
      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=oas_cli
      - name: Run code quality checks
        run: |
          ruff check . --exclude test_output/
          ruff format . --exclude test_output/ --check
          mypy oas_cli tests

  publish:
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/open-agent-spec/
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine tomli
          pip install -e ".[dev]"

      - name: Verify version matches tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PYPROJECT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "Version in pyproject.toml ($PYPROJECT_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*
