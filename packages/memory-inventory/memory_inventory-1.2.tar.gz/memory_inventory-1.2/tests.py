from array import array
import string
import sys
from tempfile import TemporaryDirectory
from types import BuiltinFunctionType

from memory_inventory import CustomHash, custom_hash, deep_get_referents, main


python_version = sys.version_info[:2]


def test_deep_get_referents_on_type():
    objects = list(deep_get_referents(type))
    assert objects[0] is type
    if python_version == (3, 13):
        assert len(objects) == 768
    elif python_version == (3, 12):
        assert len(objects) == 767
    else:
        assert len(objects) >= 700
    addresses = set(map(id, objects))
    for k, v in type.__dict__.items():
        assert id(k) in addresses
        assert id(v) in addresses
    assert id(object) in addresses
    for k, v in object.__dict__.items():
        assert id(k) in addresses
        assert id(v) in addresses
    assert id(BuiltinFunctionType) in addresses
    for k, v in BuiltinFunctionType.__dict__.items():
        assert id(k) in addresses
        assert id(v) in addresses
    if python_version == (3, 13):
        strings = sorted(obj for obj in objects if type(obj) is str)
        assert strings == [
            'Built-in immutable sequence.\n'
            '\n'
            'If no argument is given, the constructor returns an empty tuple.\n'
            "If iterable is specified the tuple is initialized from iterable's items.\n"
            '\n'
            'If the argument is a tuple, the return value is the same object.',
            'Convert a function to be a static method.\n'
            '\n'
            'A static method does not receive an implicit first argument.\n'
            'To declare a static method, use this idiom:\n'
            '\n'
            '     class C:\n'
            '         @staticmethod\n'
            '         def f(arg1, arg2, argN):\n'
            '             ...\n'
            '\n'
            'It can be called either on the class (e.g. C.f()) or on an instance\n'
            '(e.g. C().f()). Both the class and the instance are ignored, and\n'
            'neither is passed implicitly as the first argument to the method.\n'
            '\n'
            'Static methods in Python are similar to those found in Java or C++.\n'
            'For a more advanced concept, see the classmethod builtin.',
            'NoneType.__bool__',
            'NoneType.__eq__',
            'NoneType.__ge__',
            'NoneType.__gt__',
            'NoneType.__hash__',
            'NoneType.__le__',
            'NoneType.__lt__',
            'NoneType.__ne__',
            'NoneType.__repr__',
            'Returns True when the argument is true, False otherwise.\n'
            'The builtins True and False are the only two instances of the class bool.\n'
            'The class bool is a subclass of the class int, and cannot be subclassed.',
            'The base class of the class hierarchy.\n'
            '\n'
            'When called, it accepts no arguments and returns a new featureless\n'
            'instance that has no instance attributes and cannot be given any.\n',
            'The type of the None singleton.',
            '__abs__',
            '__abstractmethods__',
            '__add__',
            '__and__',
            '__annotations__',
            '__base__',
            '__bases__',
            '__basicsize__',
            '__bool__',
            '__call__',
            '__ceil__',
            '__class__',
            '__class_getitem__',
            '__contains__',
            '__delattr__',
            '__delete__',
            '__dict__',
            '__dictoffset__',
            '__dir__',
            '__divmod__',
            '__doc__',
            '__eq__',
            '__flags__',
            '__float__',
            '__floor__',
            '__floordiv__',
            '__format__',
            '__func__',
            '__ge__',
            '__get__',
            '__getattribute__',
            '__getitem__',
            '__getnewargs__',
            '__getstate__',
            '__gt__',
            '__hash__',
            '__index__',
            '__init__',
            '__init_subclass__',
            '__instancecheck__',
            '__int__',
            '__invert__',
            '__isabstractmethod__',
            '__itemsize__',
            '__iter__',
            '__le__',
            '__len__',
            '__lshift__',
            '__lt__',
            '__mod__',
            '__module__',
            '__mro__',
            '__mul__',
            '__name__',
            '__ne__',
            '__neg__',
            '__new__',
            '__objclass__',
            '__or__',
            '__pos__',
            '__pow__',
            '__prepare__',
            '__qualname__',
            '__radd__',
            '__rand__',
            '__rdivmod__',
            '__reduce__',
            '__reduce_ex__',
            '__repr__',
            '__rfloordiv__',
            '__rlshift__',
            '__rmod__',
            '__rmul__',
            '__ror__',
            '__round__',
            '__rpow__',
            '__rrshift__',
            '__rshift__',
            '__rsub__',
            '__rtruediv__',
            '__rxor__',
            '__self__',
            '__set__',
            '__setattr__',
            '__sizeof__',
            '__str__',
            '__sub__',
            '__subclasscheck__',
            '__subclasses__',
            '__subclasshook__',
            '__text_signature__',
            '__truediv__',
            '__trunc__',
            '__type_params__',
            '__weakrefoffset__',
            '__wrapped__',
            '__xor__',
            'as_integer_ratio',
            'bit_count',
            'bit_length',
            'bool.__and__',
            'bool.__invert__',
            'bool.__or__',
            'bool.__rand__',
            'bool.__repr__',
            'bool.__ror__',
            'bool.__rxor__',
            'bool.__xor__',
            'builtin_function_or_method.__call__',
            'builtin_function_or_method.__doc__',
            'builtin_function_or_method.__eq__',
            'builtin_function_or_method.__ge__',
            'builtin_function_or_method.__gt__',
            'builtin_function_or_method.__hash__',
            'builtin_function_or_method.__le__',
            'builtin_function_or_method.__lt__',
            'builtin_function_or_method.__module__',
            'builtin_function_or_method.__name__',
            'builtin_function_or_method.__ne__',
            'builtin_function_or_method.__qualname__',
            'builtin_function_or_method.__reduce__',
            'builtin_function_or_method.__repr__',
            'builtin_function_or_method.__self__',
            'builtin_function_or_method.__text_signature__',
            'builtins',
            'capitalize',
            'casefold',
            'center',
            'classmethod_descriptor.__call__',
            'classmethod_descriptor.__doc__',
            'classmethod_descriptor.__get__',
            'classmethod_descriptor.__name__',
            'classmethod_descriptor.__objclass__',
            'classmethod_descriptor.__qualname__',
            'classmethod_descriptor.__repr__',
            'classmethod_descriptor.__text_signature__',
            'conjugate',
            'count',
            'denominator',
            'encode',
            'endswith',
            'expandtabs',
            'find',
            'format',
            'format_map',
            'from_bytes',
            'getset_descriptor.__delete__',
            'getset_descriptor.__doc__',
            'getset_descriptor.__get__',
            'getset_descriptor.__name__',
            'getset_descriptor.__objclass__',
            'getset_descriptor.__qualname__',
            'getset_descriptor.__repr__',
            'getset_descriptor.__set__',
            'imag',
            'index',
            'int([x]) -> integer\n'
            'int(x, base=10) -> integer\n'
            '\n'
            'Convert a number or string to an integer, or return 0 if no arguments\n'
            'are given.  If x is a number, return x.__int__().  For floating-point\n'
            'numbers, this truncates towards zero.\n'
            '\n'
            'If x is not a number or if base is given, then x must be a string,\n'
            'bytes, or bytearray instance representing an integer literal in the\n'
            "given base.  The literal can be preceded by '+' or '-' and be surrounded\n"
            'by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n'
            'Base 0 means to interpret the base from the string as an integer literal.\n'
            ">>> int('0b100', base=0)\n"
            '4',
            'int.__abs__',
            'int.__add__',
            'int.__and__',
            'int.__bool__',
            'int.__ceil__',
            'int.__divmod__',
            'int.__eq__',
            'int.__float__',
            'int.__floor__',
            'int.__floordiv__',
            'int.__format__',
            'int.__ge__',
            'int.__getattribute__',
            'int.__getnewargs__',
            'int.__gt__',
            'int.__hash__',
            'int.__index__',
            'int.__int__',
            'int.__invert__',
            'int.__le__',
            'int.__lshift__',
            'int.__lt__',
            'int.__mod__',
            'int.__mul__',
            'int.__ne__',
            'int.__neg__',
            'int.__or__',
            'int.__pos__',
            'int.__pow__',
            'int.__radd__',
            'int.__rand__',
            'int.__rdivmod__',
            'int.__repr__',
            'int.__rfloordiv__',
            'int.__rlshift__',
            'int.__rmod__',
            'int.__rmul__',
            'int.__ror__',
            'int.__round__',
            'int.__rpow__',
            'int.__rrshift__',
            'int.__rshift__',
            'int.__rsub__',
            'int.__rtruediv__',
            'int.__rxor__',
            'int.__sizeof__',
            'int.__sub__',
            'int.__truediv__',
            'int.__trunc__',
            'int.__xor__',
            'int.as_integer_ratio',
            'int.bit_count',
            'int.bit_length',
            'int.conjugate',
            'int.denominator',
            'int.from_bytes',
            'int.imag',
            'int.is_integer',
            'int.numerator',
            'int.real',
            'int.to_bytes',
            'is_integer',
            'isalnum',
            'isalpha',
            'isascii',
            'isdecimal',
            'isdigit',
            'isidentifier',
            'islower',
            'isnumeric',
            'isprintable',
            'isspace',
            'istitle',
            'isupper',
            'join',
            'ljust',
            'lower',
            'lstrip',
            'maketrans',
            'member_descriptor.__delete__',
            'member_descriptor.__doc__',
            'member_descriptor.__get__',
            'member_descriptor.__name__',
            'member_descriptor.__objclass__',
            'member_descriptor.__qualname__',
            'member_descriptor.__reduce__',
            'member_descriptor.__repr__',
            'member_descriptor.__set__',
            'method_descriptor.__call__',
            'method_descriptor.__doc__',
            'method_descriptor.__get__',
            'method_descriptor.__name__',
            'method_descriptor.__objclass__',
            'method_descriptor.__qualname__',
            'method_descriptor.__reduce__',
            'method_descriptor.__repr__',
            'method_descriptor.__text_signature__',
            'mro',
            'numerator',
            'object.__class__',
            'object.__delattr__',
            'object.__dir__',
            'object.__eq__',
            'object.__format__',
            'object.__ge__',
            'object.__getattribute__',
            'object.__getstate__',
            'object.__gt__',
            'object.__hash__',
            'object.__init__',
            'object.__init_subclass__',
            'object.__le__',
            'object.__lt__',
            'object.__ne__',
            'object.__reduce__',
            'object.__reduce_ex__',
            'object.__repr__',
            'object.__setattr__',
            'object.__sizeof__',
            'object.__str__',
            'object.__subclasshook__',
            'partition',
            'real',
            'removeprefix',
            'removesuffix',
            'replace',
            'rfind',
            'rindex',
            'rjust',
            'rpartition',
            'rsplit',
            'rstrip',
            'split',
            'splitlines',
            'startswith',
            'staticmethod.__call__',
            'staticmethod.__dict__',
            'staticmethod.__func__',
            'staticmethod.__get__',
            'staticmethod.__init__',
            'staticmethod.__isabstractmethod__',
            'staticmethod.__repr__',
            'staticmethod.__wrapped__',
            "str(object='') -> str\n"
            'str(bytes_or_buffer[, encoding[, errors]]) -> str\n'
            '\n'
            'Create a new string object from the given object. If encoding or\n'
            'errors is specified, then the object must expose a data buffer\n'
            'that will be decoded using the given encoding and error handler.\n'
            'Otherwise, returns the result of object.__str__() (if defined)\n'
            'or repr(object).\n'
            "encoding defaults to 'utf-8'.\n"
            "errors defaults to 'strict'.",
            'str.__add__',
            'str.__contains__',
            'str.__eq__',
            'str.__format__',
            'str.__ge__',
            'str.__getitem__',
            'str.__getnewargs__',
            'str.__gt__',
            'str.__hash__',
            'str.__iter__',
            'str.__le__',
            'str.__len__',
            'str.__lt__',
            'str.__mod__',
            'str.__mul__',
            'str.__ne__',
            'str.__repr__',
            'str.__rmod__',
            'str.__rmul__',
            'str.__sizeof__',
            'str.__str__',
            'str.capitalize',
            'str.casefold',
            'str.center',
            'str.count',
            'str.encode',
            'str.endswith',
            'str.expandtabs',
            'str.find',
            'str.format',
            'str.format_map',
            'str.index',
            'str.isalnum',
            'str.isalpha',
            'str.isascii',
            'str.isdecimal',
            'str.isdigit',
            'str.isidentifier',
            'str.islower',
            'str.isnumeric',
            'str.isprintable',
            'str.isspace',
            'str.istitle',
            'str.isupper',
            'str.join',
            'str.ljust',
            'str.lower',
            'str.lstrip',
            'str.partition',
            'str.removeprefix',
            'str.removesuffix',
            'str.replace',
            'str.rfind',
            'str.rindex',
            'str.rjust',
            'str.rpartition',
            'str.rsplit',
            'str.rstrip',
            'str.split',
            'str.splitlines',
            'str.startswith',
            'str.strip',
            'str.swapcase',
            'str.title',
            'str.translate',
            'str.upper',
            'str.zfill',
            'strip',
            'swapcase',
            'title',
            'to_bytes',
            'translate',
            'tuple.__add__',
            'tuple.__class_getitem__',
            'tuple.__contains__',
            'tuple.__eq__',
            'tuple.__ge__',
            'tuple.__getattribute__',
            'tuple.__getitem__',
            'tuple.__getnewargs__',
            'tuple.__gt__',
            'tuple.__hash__',
            'tuple.__iter__',
            'tuple.__le__',
            'tuple.__len__',
            'tuple.__lt__',
            'tuple.__mul__',
            'tuple.__ne__',
            'tuple.__repr__',
            'tuple.__rmul__',
            'tuple.count',
            'tuple.index',
            'type.__abstractmethods__',
            'type.__annotations__',
            'type.__base__',
            'type.__bases__',
            'type.__basicsize__',
            'type.__call__',
            'type.__delattr__',
            'type.__dict__',
            'type.__dictoffset__',
            'type.__dir__',
            'type.__doc__',
            'type.__flags__',
            'type.__getattribute__',
            'type.__init__',
            'type.__instancecheck__',
            'type.__itemsize__',
            'type.__module__',
            'type.__mro__',
            'type.__name__',
            'type.__or__',
            'type.__prepare__',
            'type.__qualname__',
            'type.__repr__',
            'type.__ror__',
            'type.__setattr__',
            'type.__sizeof__',
            'type.__subclasscheck__',
            'type.__subclasses__',
            'type.__text_signature__',
            'type.__type_params__',
            'type.__weakrefoffset__',
            'type.mro',
            'upper',
            'wrapper_descriptor.__call__',
            'wrapper_descriptor.__doc__',
            'wrapper_descriptor.__get__',
            'wrapper_descriptor.__name__',
            'wrapper_descriptor.__objclass__',
            'wrapper_descriptor.__qualname__',
            'wrapper_descriptor.__reduce__',
            'wrapper_descriptor.__repr__',
            'wrapper_descriptor.__text_signature__',
            'zfill'
        ]


def test_deep_get_referents_on_a_string():
    s = string.punctuation * 2
    objects = list(deep_get_referents(s))
    assert objects[0] is s
    if python_version == (3, 13):
        strings = sorted(obj for obj in objects if type(obj) is str)
        assert strings == [
            s,
            'Convert a function to be a static method.\n'
            '\n'
            'A static method does not receive an implicit first argument.\n'
            'To declare a static method, use this idiom:\n'
            '\n'
            '     class C:\n'
            '         @staticmethod\n'
            '         def f(arg1, arg2, argN):\n'
            '             ...\n'
            '\n'
            'It can be called either on the class (e.g. C.f()) or on an instance\n'
            '(e.g. C().f()). Both the class and the instance are ignored, and\n'
            'neither is passed implicitly as the first argument to the method.\n'
            '\n'
            'Static methods in Python are similar to those found in Java or C++.\n'
            'For a more advanced concept, see the classmethod builtin.',
            'NoneType.__bool__',
            'NoneType.__eq__',
            'NoneType.__ge__',
            'NoneType.__gt__',
            'NoneType.__hash__',
            'NoneType.__le__',
            'NoneType.__lt__',
            'NoneType.__ne__',
            'NoneType.__repr__',
            'Returns True when the argument is true, False otherwise.\n'
            'The builtins True and False are the only two instances of the class bool.\n'
            'The class bool is a subclass of the class int, and cannot be subclassed.',
            'The base class of the class hierarchy.\n'
            '\n'
            'When called, it accepts no arguments and returns a new featureless\n'
            'instance that has no instance attributes and cannot be given any.\n',
            'The type of the None singleton.',
            '__abs__',
            '__add__',
            '__and__',
            '__bool__',
            '__call__',
            '__ceil__',
            '__class__',
            '__contains__',
            '__delattr__',
            '__delete__',
            '__dict__',
            '__dir__',
            '__divmod__',
            '__doc__',
            '__eq__',
            '__float__',
            '__floor__',
            '__floordiv__',
            '__format__',
            '__func__',
            '__ge__',
            '__get__',
            '__getattribute__',
            '__getitem__',
            '__getnewargs__',
            '__getstate__',
            '__gt__',
            '__hash__',
            '__index__',
            '__init__',
            '__init_subclass__',
            '__int__',
            '__invert__',
            '__isabstractmethod__',
            '__iter__',
            '__le__',
            '__len__',
            '__lshift__',
            '__lt__',
            '__mod__',
            '__module__',
            '__mul__',
            '__name__',
            '__ne__',
            '__neg__',
            '__new__',
            '__objclass__',
            '__or__',
            '__pos__',
            '__pow__',
            '__qualname__',
            '__radd__',
            '__rand__',
            '__rdivmod__',
            '__reduce__',
            '__reduce_ex__',
            '__repr__',
            '__rfloordiv__',
            '__rlshift__',
            '__rmod__',
            '__rmul__',
            '__ror__',
            '__round__',
            '__rpow__',
            '__rrshift__',
            '__rshift__',
            '__rsub__',
            '__rtruediv__',
            '__rxor__',
            '__self__',
            '__set__',
            '__setattr__',
            '__sizeof__',
            '__str__',
            '__sub__',
            '__subclasshook__',
            '__text_signature__',
            '__truediv__',
            '__trunc__',
            '__wrapped__',
            '__xor__',
            'as_integer_ratio',
            'bit_count',
            'bit_length',
            'bool.__and__',
            'bool.__invert__',
            'bool.__or__',
            'bool.__rand__',
            'bool.__repr__',
            'bool.__ror__',
            'bool.__rxor__',
            'bool.__xor__',
            'builtin_function_or_method.__call__',
            'builtin_function_or_method.__doc__',
            'builtin_function_or_method.__eq__',
            'builtin_function_or_method.__ge__',
            'builtin_function_or_method.__gt__',
            'builtin_function_or_method.__hash__',
            'builtin_function_or_method.__le__',
            'builtin_function_or_method.__lt__',
            'builtin_function_or_method.__module__',
            'builtin_function_or_method.__name__',
            'builtin_function_or_method.__ne__',
            'builtin_function_or_method.__qualname__',
            'builtin_function_or_method.__reduce__',
            'builtin_function_or_method.__repr__',
            'builtin_function_or_method.__self__',
            'builtin_function_or_method.__text_signature__',
            'capitalize',
            'casefold',
            'center',
            'classmethod_descriptor.__call__',
            'classmethod_descriptor.__doc__',
            'classmethod_descriptor.__get__',
            'classmethod_descriptor.__name__',
            'classmethod_descriptor.__objclass__',
            'classmethod_descriptor.__qualname__',
            'classmethod_descriptor.__repr__',
            'classmethod_descriptor.__text_signature__',
            'conjugate',
            'count',
            'denominator',
            'encode',
            'endswith',
            'expandtabs',
            'find',
            'format',
            'format_map',
            'from_bytes',
            'getset_descriptor.__delete__',
            'getset_descriptor.__doc__',
            'getset_descriptor.__get__',
            'getset_descriptor.__name__',
            'getset_descriptor.__objclass__',
            'getset_descriptor.__qualname__',
            'getset_descriptor.__repr__',
            'getset_descriptor.__set__',
            'imag',
            'index',
            'int([x]) -> integer\n'
            'int(x, base=10) -> integer\n'
            '\n'
            'Convert a number or string to an integer, or return 0 if no arguments\n'
            'are given.  If x is a number, return x.__int__().  For floating-point\n'
            'numbers, this truncates towards zero.\n'
            '\n'
            'If x is not a number or if base is given, then x must be a string,\n'
            'bytes, or bytearray instance representing an integer literal in the\n'
            "given base.  The literal can be preceded by '+' or '-' and be surrounded\n"
            'by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n'
            'Base 0 means to interpret the base from the string as an integer literal.\n'
            ">>> int('0b100', base=0)\n"
            '4',
            'int.__abs__',
            'int.__add__',
            'int.__and__',
            'int.__bool__',
            'int.__ceil__',
            'int.__divmod__',
            'int.__eq__',
            'int.__float__',
            'int.__floor__',
            'int.__floordiv__',
            'int.__format__',
            'int.__ge__',
            'int.__getattribute__',
            'int.__getnewargs__',
            'int.__gt__',
            'int.__hash__',
            'int.__index__',
            'int.__int__',
            'int.__invert__',
            'int.__le__',
            'int.__lshift__',
            'int.__lt__',
            'int.__mod__',
            'int.__mul__',
            'int.__ne__',
            'int.__neg__',
            'int.__or__',
            'int.__pos__',
            'int.__pow__',
            'int.__radd__',
            'int.__rand__',
            'int.__rdivmod__',
            'int.__repr__',
            'int.__rfloordiv__',
            'int.__rlshift__',
            'int.__rmod__',
            'int.__rmul__',
            'int.__ror__',
            'int.__round__',
            'int.__rpow__',
            'int.__rrshift__',
            'int.__rshift__',
            'int.__rsub__',
            'int.__rtruediv__',
            'int.__rxor__',
            'int.__sizeof__',
            'int.__sub__',
            'int.__truediv__',
            'int.__trunc__',
            'int.__xor__',
            'int.as_integer_ratio',
            'int.bit_count',
            'int.bit_length',
            'int.conjugate',
            'int.denominator',
            'int.from_bytes',
            'int.imag',
            'int.is_integer',
            'int.numerator',
            'int.real',
            'int.to_bytes',
            'is_integer',
            'isalnum',
            'isalpha',
            'isascii',
            'isdecimal',
            'isdigit',
            'isidentifier',
            'islower',
            'isnumeric',
            'isprintable',
            'isspace',
            'istitle',
            'isupper',
            'join',
            'ljust',
            'lower',
            'lstrip',
            'maketrans',
            'member_descriptor.__delete__',
            'member_descriptor.__doc__',
            'member_descriptor.__get__',
            'member_descriptor.__name__',
            'member_descriptor.__objclass__',
            'member_descriptor.__qualname__',
            'member_descriptor.__reduce__',
            'member_descriptor.__repr__',
            'member_descriptor.__set__',
            'method_descriptor.__call__',
            'method_descriptor.__doc__',
            'method_descriptor.__get__',
            'method_descriptor.__name__',
            'method_descriptor.__objclass__',
            'method_descriptor.__qualname__',
            'method_descriptor.__reduce__',
            'method_descriptor.__repr__',
            'method_descriptor.__text_signature__',
            'numerator',
            'object.__class__',
            'object.__delattr__',
            'object.__dir__',
            'object.__eq__',
            'object.__format__',
            'object.__ge__',
            'object.__getattribute__',
            'object.__getstate__',
            'object.__gt__',
            'object.__hash__',
            'object.__init__',
            'object.__init_subclass__',
            'object.__le__',
            'object.__lt__',
            'object.__ne__',
            'object.__reduce__',
            'object.__reduce_ex__',
            'object.__repr__',
            'object.__setattr__',
            'object.__sizeof__',
            'object.__str__',
            'object.__subclasshook__',
            'partition',
            'real',
            'removeprefix',
            'removesuffix',
            'replace',
            'rfind',
            'rindex',
            'rjust',
            'rpartition',
            'rsplit',
            'rstrip',
            'split',
            'splitlines',
            'startswith',
            'staticmethod.__call__',
            'staticmethod.__dict__',
            'staticmethod.__func__',
            'staticmethod.__get__',
            'staticmethod.__init__',
            'staticmethod.__isabstractmethod__',
            'staticmethod.__repr__',
            'staticmethod.__wrapped__',
            "str(object='') -> str\n"
            'str(bytes_or_buffer[, encoding[, errors]]) -> str\n'
            '\n'
            'Create a new string object from the given object. If encoding or\n'
            'errors is specified, then the object must expose a data buffer\n'
            'that will be decoded using the given encoding and error handler.\n'
            'Otherwise, returns the result of object.__str__() (if defined)\n'
            'or repr(object).\n'
            "encoding defaults to 'utf-8'.\n"
            "errors defaults to 'strict'.",
            'str.__add__',
            'str.__contains__',
            'str.__eq__',
            'str.__format__',
            'str.__ge__',
            'str.__getitem__',
            'str.__getnewargs__',
            'str.__gt__',
            'str.__hash__',
            'str.__iter__',
            'str.__le__',
            'str.__len__',
            'str.__lt__',
            'str.__mod__',
            'str.__mul__',
            'str.__ne__',
            'str.__repr__',
            'str.__rmod__',
            'str.__rmul__',
            'str.__sizeof__',
            'str.__str__',
            'str.capitalize',
            'str.casefold',
            'str.center',
            'str.count',
            'str.encode',
            'str.endswith',
            'str.expandtabs',
            'str.find',
            'str.format',
            'str.format_map',
            'str.index',
            'str.isalnum',
            'str.isalpha',
            'str.isascii',
            'str.isdecimal',
            'str.isdigit',
            'str.isidentifier',
            'str.islower',
            'str.isnumeric',
            'str.isprintable',
            'str.isspace',
            'str.istitle',
            'str.isupper',
            'str.join',
            'str.ljust',
            'str.lower',
            'str.lstrip',
            'str.partition',
            'str.removeprefix',
            'str.removesuffix',
            'str.replace',
            'str.rfind',
            'str.rindex',
            'str.rjust',
            'str.rpartition',
            'str.rsplit',
            'str.rstrip',
            'str.split',
            'str.splitlines',
            'str.startswith',
            'str.strip',
            'str.swapcase',
            'str.title',
            'str.translate',
            'str.upper',
            'str.zfill',
            'strip',
            'swapcase',
            'title',
            'to_bytes',
            'translate',
            'upper',
            'wrapper_descriptor.__call__',
            'wrapper_descriptor.__doc__',
            'wrapper_descriptor.__get__',
            'wrapper_descriptor.__name__',
            'wrapper_descriptor.__objclass__',
            'wrapper_descriptor.__qualname__',
            'wrapper_descriptor.__reduce__',
            'wrapper_descriptor.__repr__',
            'wrapper_descriptor.__text_signature__',
            'zfill',
        ]


class array_subclass(array):
    __slots__ = ('foo', 'bar', '__dict__')

    @property
    def something(self):
        return string.digits

    def do_nothing(self):
        pass


def test_custom_hash():
    a = array_subclass('b', b'000')
    a.bar = 'bar'
    a.non_slot_attribute = 42
    h = custom_hash(a)
    assert type(h) is CustomHash
    assert h.original is a
    assert h.reduced == (
        array_subclass,
        (('bar', 'bar'), ('itemsize', 1), ('typecode', 'b')),
        CustomHash(a.__dict__, (('non_slot_attribute', 42),)),
        (b'000',),
        (),
    )


def test_main():
    with TemporaryDirectory() as tmpdir:
        main(tmpdir, write_debug_log=True)
