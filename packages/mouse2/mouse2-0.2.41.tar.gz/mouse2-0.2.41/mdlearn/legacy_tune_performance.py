#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""tune_performance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_AjM3yMh8bNWhTj2XGAX19bZnuHkrc3I
"""

# WinSCP, копировать файл в /mnt/share/fedurova на pmc-clast.ineos.ac.ru
import os.path
import os
import optuna
#import runpy
import pandas as pd
import argparse
import math
import time

n_trials = 500

parameters = {
    "mode":
        {
            "type" : "categorical",
            "usage" : "cli",
            "key" : "mode",
            "values" : ["1gpu", "cpu", "2gpu"]  
        },
    "RNEIGH":
        {
            "type" : float,
            "usage" : "script",
            "min" : 0.2,
            "max" : 20.,
            "step" : 0.1
        },
    "nproc":
        {
            "type": int,
            "usage" : "cli",
            "key" : "nproc",
            "min" : 1,
            "max" : 8,
            "step" : 1
        }
}

run_filename_template = 'run_'   # Скрипт, который подается на вход Ламмпса
template_filename = 'template.lammps'
#out_data_filename_template = 'out_'
results_filename = 'research_progress.txt'
trials = []
trials_file = "trials.csv"


#if __name__ == "__main__":
#    header = '\t'.join(parameter_ordered_names(parameters) + 'TIME')
#    outfile = open(results_filename, 'w')
#    outfile.write(f'#{header}\n')
#   outfile.close()


def parameter_ordered_names(parameters):
    p_names = list(parameters.keys())
    p_names.sort()
    return p_names


def substitute_values(template_filename, output_filename,
                      substitutions = None):
    template_file = open(template_filename, 'r')
    template = template_file.read()
    template_file.close()
    if type(substitutions) == list:
        for substitution in substitutions:
            template = template.replace(*substitution)
    elif type(substitutions) == dict:
        for key in substitutions:
            template = template.replace(key, substitutions[key])
    run_file = open(output_filename, 'w')
    run_file.write(template)
    run_file.close()



def objective(trial: optuna.Trial):
    try:

        """parameters = {
            "npoly": {"type": "int", "min": npoly_min, "max": npoly_max, "log": True, "usage": "script"},
            "est": {"type": "float", "min": est_min, "max": est_max, "log": True, "usage": "script"}
            }"""

        args = []
        script_changes = []
        trial_data = { "ntrial" : trial.number }
        for param, details in parameters.items():
            if details['type'] == int:
              #Тут нужен int как тип, а не как строковая переменная, так же, как в словаре
                value = trial.suggest_int(param, details['min'], details['max'], log=details.get('log', False))
            elif details['type'] == float:
              #Так же, float как тип
                value = trial.suggest_float(param, details['min'], details['max'], log=details.get('log', False))
            elif details['type'] == "categorical":
                value = trial.suggest_categorical(param, details['values'])
            else:
                raise ValueError(f"Unsupported parameter type: {details['type']}")
                
            trial_data[param] = value

            if details['usage'] == 'script':
                script_changes.append((param, str(value)))
            elif details['usage'] == 'cli':
                args.append(f"--{param} {value}")
            
            


        script_changes.append(("LOGNAME", f"trial_{trial.number}.log"))
        script_changes.append(("NTRIAL", str(trial.number)))


        template = "template.lammps"
        run_filename = f"{run_filename_template}{trial.number}.lammps"
        substitute_values(template,run_filename,script_changes)
#        run_script = template 
#        for key, value in script_changes:
#           run_script = run_script.replace(f"${{{key}}}", str(value))      
#        with open(run_filename, 'w') as f:
#            f.write(run_script)

        #Сделал прокладку run_online.py для разбора аргументов командной строки
        command = f"/mnt/share/glagolev/run_online.py --input {run_filename} {' '.join(args)}"


        start_time = time.time()
        exit_code = os.system(command)
        exit_code = exit_code >> 8
        good = os.path.isfile(f'out_{trial.number}.data')
        end_time = time.time()
        duration = end_time - start_time
        trial_data["duration"] = duration 
        trial_data["good"] = good
        trials.append(trial_data)
        trials_df = pd.DataFrame.from_records(trials)
        
        trials_df.to_csv(trials_file)

        if good:
            return duration
# with open(results_filename, 'a') as outfile:
#                 В файл нужно записать номер испытания, значения всех параметров, и длительность выполнения
 #               outfile.write(f'{trial.number}\t{duration:.2f}\t{shape_parameter:.3f}\t{fluct_parameter:.3f}\n')
#            
#            shape_parameter, fluct_parameter = calculate_globular_order(
 #               npoly=script_changes[0][1],
 #               est=script_changes[1][1],
 #               number=trial.number,
  #              comm=comm
  #          return shape_parameter + fluct_parameter
        else:
            print(exit_code, duration)
          # Здесь записать в файл значения параметров и "FAIL"
            return math.inf

    except Exception as e:
        print(e)
        print(exit_code, duration)
        # Здесь записать в файл значения параметров и "FAIL"
        return math.inf


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
    description = 'Optimize the system')
    args = parser.parse_args()

    sampler = optuna.samplers.TPESampler()
    study = optuna.create_study(direction="minimize", sampler = sampler)
    study.optimize(objective, n_trials=n_trials, gc_after_trial=True)
    if True:
        print("Study statistics: ")
        print("  Number of finished trials: ", len(study.trials))
        print("Best trial:")
        trial = study.best_trial

        for key, value in trial.params.items():
            print("    {}: {}".format(key, value))

        study.trials_dataframe().to_csv('study.csv')

