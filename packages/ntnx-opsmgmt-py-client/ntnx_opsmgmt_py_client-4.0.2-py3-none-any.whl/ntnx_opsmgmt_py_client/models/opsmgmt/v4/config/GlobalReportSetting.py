# coding: utf-8


"""
IGNORE:
    Nutanix Cloud Management Platform APIs

    Provide functionalities that are common to APIs in namespaces aiops, devops, secops, finops.  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_opsmgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.NotificationPolicy import NotificationPolicy  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportCustomization import ReportCustomization  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.RetentionConfig import RetentionConfig  # noqa: F401,E501

class GlobalReportSetting(ExternalizableAbstractModel):

    """

    :param name: (:attr:`name`) Name of the global report setting.
    :type name: required
     min=1 chars, max=64 chars
    
    :param retention_config: (:attr:`retention_config`) 
    :type retention_config: 
    
    
    :param notification_policy: (:attr:`notification_policy`) 
    :type notification_policy: 
    
    
    :param report_customization: (:attr:`report_customization`) 
    :type report_customization: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'retention_config': 'opsmgmt.v4.config.RetentionConfig',
        'notification_policy': 'opsmgmt.v4.config.NotificationPolicy',
        'report_customization': 'opsmgmt.v4.config.ReportCustomization',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'retention_config': 'retentionConfig',
        'notification_policy': 'notificationPolicy',
        'report_customization': 'reportCustomization',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, retention_config=None, notification_policy=None, report_customization=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__retention_config = None
        self.__notification_policy = None
        self.__report_customization = None
        self.discriminator = None
        self.__name = name
        if retention_config is not None:
            self.__retention_config = retention_config
        if notification_policy is not None:
            self.__notification_policy = notification_policy
        if report_customization is not None:
            self.__report_customization = report_customization

    def _initialize_object_type(self):
        return 'opsmgmt.v4.config.GlobalReportSetting'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the global report setting.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def retention_config(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.RetentionConfig`
        """  # noqa: E501
        return self.__retention_config

    @retention_config.setter
    def retention_config(self, retention_config):

        self.__retention_config = retention_config

    @property
    def notification_policy(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.NotificationPolicy`
        """  # noqa: E501
        return self.__notification_policy

    @notification_policy.setter
    def notification_policy(self, notification_policy):

        self.__notification_policy = notification_policy

    @property
    def report_customization(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportCustomization`
        """  # noqa: E501
        return self.__report_customization

    @report_customization.setter
    def report_customization(self, report_customization):

        self.__report_customization = report_customization

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(GlobalReportSetting, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalReportSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

