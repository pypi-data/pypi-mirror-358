# coding: utf-8


"""
IGNORE:
    Nutanix Cloud Management Platform APIs

    Provide functionalities that are common to APIs in namespaces aiops, devops, secops, finops.  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.DataCriteria import DataCriteria  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.EntityType import EntityType  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.RepeatCriteria import RepeatCriteria  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.TimeFilter import TimeFilter  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.WidgetField import WidgetField  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.WidgetSize import WidgetSize  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.WidgetType import WidgetType  # noqa: F401,E501

class WidgetConfig(object):

    """Configuration of the widget.

    :param entity_type: (:attr:`entity_type`) 
    :type entity_type: 
    
    
    :param heading: (:attr:`heading`) Heading for a widget.
    :type heading: 
     max=64 chars
    
    :param description: (:attr:`description`) Description of the widget.
    :type description: 
     max=1000 chars
    
    :param fields: (:attr:`fields`) List of selected entity attributes/metrics for the widget.
    :type fields: 
    
    
    :param type: (:attr:`type`) 
    :type type: required
    
    
    :param size: (:attr:`size`) 
    :type size: required
    
    
    :param repeat_criteria: (:attr:`repeat_criteria`) 
    :type repeat_criteria: 
    
    
    :param data_criteria: (:attr:`data_criteria`) 
    :type data_criteria: 
    
    
    :param time_filter: (:attr:`time_filter`) 
    :type time_filter: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'entity_type': 'opsmgmt.v4.config.EntityType',
        'heading': 'str',
        'description': 'str',
        'fields': 'list[opsmgmt.v4.config.WidgetField]',
        'type': 'opsmgmt.v4.config.WidgetType',
        'size': 'opsmgmt.v4.config.WidgetSize',
        'repeat_criteria': 'opsmgmt.v4.config.RepeatCriteria',
        'data_criteria': 'opsmgmt.v4.config.DataCriteria',
        'time_filter': 'opsmgmt.v4.config.TimeFilter',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'entity_type': 'entityType',
        'heading': 'heading',
        'description': 'description',
        'fields': 'fields',
        'type': 'type',
        'size': 'size',
        'repeat_criteria': 'repeatCriteria',
        'data_criteria': 'dataCriteria',
        'time_filter': 'timeFilter',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, entity_type=None, heading=None, description=None, fields=None, type=None, size=None, repeat_criteria=None, data_criteria=None, time_filter=None, *args, **kwargs):  # noqa: E501
        self.__entity_type = None
        self.__heading = None
        self.__description = None
        self.__fields = None
        self.__type = None
        self.__size = None
        self.__repeat_criteria = None
        self.__data_criteria = None
        self.__time_filter = None
        self.discriminator = None
        if entity_type is not None:
            self.__entity_type = entity_type
        if heading is not None:
            self.__heading = heading
        if description is not None:
            self.__description = description
        if fields is not None:
            self.__fields = fields
        self.__type = type
        self.__size = size
        if repeat_criteria is not None:
            self.__repeat_criteria = repeat_criteria
        if data_criteria is not None:
            self.__data_criteria = data_criteria
        if time_filter is not None:
            self.__time_filter = time_filter
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'opsmgmt.v4.config.WidgetConfig'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def entity_type(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.EntityType`
        """  # noqa: E501
        return self.__entity_type

    @entity_type.setter
    def entity_type(self, entity_type):

        self.__entity_type = entity_type

    @property
    def heading(self):
        """
        Heading for a widget.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__heading

    @heading.setter
    def heading(self, heading):
        if heading is not None and len(heading) > 64:
            raise ValueError("Invalid value for `heading`, length must be less than or equal to `64`")  # noqa: E501

        self.__heading = heading

    @property
    def description(self):
        """
        Description of the widget.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def fields(self):
        """
        List of selected entity attributes/metrics for the widget.

        :type:
             list[ :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.WidgetField` ]
        """  # noqa: E501
        return self.__fields

    @fields.setter
    def fields(self, fields):

        self.__fields = fields

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.WidgetType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self.__type = type

    @property
    def size(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.WidgetSize`
        """  # noqa: E501
        return self.__size

    @size.setter
    def size(self, size):
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self.__size = size

    @property
    def repeat_criteria(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.RepeatCriteria`
        """  # noqa: E501
        return self.__repeat_criteria

    @repeat_criteria.setter
    def repeat_criteria(self, repeat_criteria):

        self.__repeat_criteria = repeat_criteria

    @property
    def data_criteria(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.DataCriteria`
        """  # noqa: E501
        return self.__data_criteria

    @data_criteria.setter
    def data_criteria(self, data_criteria):

        self.__data_criteria = data_criteria

    @property
    def time_filter(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.TimeFilter`
        """  # noqa: E501
        return self.__time_filter

    @time_filter.setter
    def time_filter(self, time_filter):

        self.__time_filter = time_filter

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(WidgetConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WidgetConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

