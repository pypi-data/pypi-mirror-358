# coding: utf-8


"""
IGNORE:
    Nutanix Cloud Management Platform APIs

    Provide functionalities that are common to APIs in namespaces aiops, devops, secops, finops.  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_opsmgmt_py_client.models.common.v1.config.KVPair import KVPair  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.SortKey import SortKey  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.SortOrder import SortOrder  # noqa: F401,E501

class DataCriteria(object):

    """Filtering, sorting and limit properties for the data to collected.

    :param filter_criteria: (:attr:`filter_criteria`) OData criteria that will be used to filter the returned data.
    :type filter_criteria: 
     max=2000 chars
    
    :param sort_column: (:attr:`sort_column`) Entity Property based on which the result data is to be sorted.
    :type sort_column: 
     max=500 chars
    
    :param sort_order: (:attr:`sort_order`) 
    :type sort_order: 
    
    
    :param limit: (:attr:`limit`) Limit on the maximum number of entities to be represented in the widget.
    :type limit: 
    
     min=0,
    :param sort_key: (:attr:`sort_key`) 
    :type sort_key: 
    
    
    :param custom_parameters: (:attr:`custom_parameters`) Generic key value pair used for custom attributes.
    :type custom_parameters: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'filter_criteria': 'str',
        'sort_column': 'str',
        'sort_order': 'opsmgmt.v4.config.SortOrder',
        'limit': 'int',
        'sort_key': 'opsmgmt.v4.config.SortKey',
        'custom_parameters': 'list[common.v1.config.KVPair]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'filter_criteria': 'filterCriteria',
        'sort_column': 'sortColumn',
        'sort_order': 'sortOrder',
        'limit': 'limit',
        'sort_key': 'sortKey',
        'custom_parameters': 'customParameters',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, filter_criteria=None, sort_column=None, sort_order=None, limit=None, sort_key=None, custom_parameters=None, *args, **kwargs):  # noqa: E501
        self.__filter_criteria = None
        self.__sort_column = None
        self.__sort_order = None
        self.__limit = None
        self.__sort_key = None
        self.__custom_parameters = None
        self.discriminator = None
        if filter_criteria is not None:
            self.__filter_criteria = filter_criteria
        if sort_column is not None:
            self.__sort_column = sort_column
        if sort_order is not None:
            self.__sort_order = sort_order
        if limit is not None:
            self.__limit = limit
        if sort_key is not None:
            self.__sort_key = sort_key
        if custom_parameters is not None:
            self.__custom_parameters = custom_parameters
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'opsmgmt.v4.config.DataCriteria'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def filter_criteria(self):
        """
        OData criteria that will be used to filter the returned data.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__filter_criteria

    @filter_criteria.setter
    def filter_criteria(self, filter_criteria):
        if filter_criteria is not None and len(filter_criteria) > 2000:
            raise ValueError("Invalid value for `filter_criteria`, length must be less than or equal to `2000`")  # noqa: E501

        self.__filter_criteria = filter_criteria

    @property
    def sort_column(self):
        """
        Entity Property based on which the result data is to be sorted.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__sort_column

    @sort_column.setter
    def sort_column(self, sort_column):
        if sort_column is not None and len(sort_column) > 500:
            raise ValueError("Invalid value for `sort_column`, length must be less than or equal to `500`")  # noqa: E501

        self.__sort_column = sort_column

    @property
    def sort_order(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.SortOrder`
        """  # noqa: E501
        return self.__sort_order

    @sort_order.setter
    def sort_order(self, sort_order):

        self.__sort_order = sort_order

    @property
    def limit(self):
        """
        Limit on the maximum number of entities to be represented in the widget.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__limit

    @limit.setter
    def limit(self, limit):
        if limit is not None and limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__limit = limit

    @property
    def sort_key(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.SortKey`
        """  # noqa: E501
        return self.__sort_key

    @sort_key.setter
    def sort_key(self, sort_key):

        self.__sort_key = sort_key

    @property
    def custom_parameters(self):
        """
        Generic key value pair used for custom attributes.

        :type:
             list[ :class:`~ntnx_opsmgmt_py_client.models.common.v1.config.KVPair` ]
        """  # noqa: E501
        return self.__custom_parameters

    @custom_parameters.setter
    def custom_parameters(self, custom_parameters):

        self.__custom_parameters = custom_parameters

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DataCriteria, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCriteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

