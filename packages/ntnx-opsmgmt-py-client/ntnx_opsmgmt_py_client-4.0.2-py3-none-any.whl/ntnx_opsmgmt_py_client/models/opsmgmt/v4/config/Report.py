# coding: utf-8


"""
IGNORE:
    Nutanix Cloud Management Platform APIs

    Provide functionalities that are common to APIs in namespaces aiops, devops, secops, finops.  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_opsmgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.EntitySelection import EntitySelection  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.Recipient import Recipient  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportFormat import ReportFormat  # noqa: F401,E501

class Report(ExternalizableAbstractModel):

    """

    :param name: (:attr:`name`) Report instance name
    :type name: required
     min=1 chars, max=256 chars
    
    :param description: (:attr:`description`) Description of the report. This will be part of generated report.
    :type description: 
     max=256 chars
    
    :param config_ext_id: (:attr:`config_ext_id`) UUID for the report configuration for which report needs to be generated.
    :type config_ext_id: required
    
    
    :param is_persistent: (:attr:`is_persistent`) Generated report saved or not
    :type is_persistent: 
    
    
    :param override_supported_formats: (:attr:`override_supported_formats`) List specifying the formats in which report is to be created. This overrides the supportedFormats defined in the report configuration.
    :type override_supported_formats: 
    
    
    :param start_time: (:attr:`start_time`) UTC date and time in \"%Y-%m-%d %H:%M:%S\" format for data collection start point. Eg:- 2023-10-23 11:34:45
    :type start_time: required
    
    
    :param end_time: (:attr:`end_time`) UTC date and time in \"%Y-%m-%d %H:%M:%S\" format for data collection end point. Eg:- 2023-10-23 11:34:45
    :type end_time: required
    
    
    :param recipient_formats: (:attr:`recipient_formats`) List specifying the formats in which the report is to be sent.
    :type recipient_formats: 
    
    
    :param recipients: (:attr:`recipients`) Recipients in addition to the ones specified on the report configuration.
    :type recipients: 
    
    
    :param creation_time: (:attr:`creation_time`) Time in ISO 8601 format when the report instance was created.
    :type creation_time: 
    
    
    :param timezone: (:attr:`timezone`) Timezone in which report is to be generated. This is the list supported by pytz.all_timezones. For more info, check http://pytz.sourceforge.net
    :type timezone: 
    
    
    :param entity_selection: (:attr:`entity_selection`) 
    :type entity_selection: 
    
    
    :param owner_ext_id: (:attr:`owner_ext_id`) Owner UUID for the report instance.\"
    :type owner_ext_id: 
    
    
    :param available_formats: (:attr:`available_formats`) List of formats in which report generation was successful.
    :type available_formats: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'config_ext_id': 'str',
        'is_persistent': 'bool',
        'override_supported_formats': 'list[opsmgmt.v4.config.ReportFormat]',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'recipient_formats': 'list[opsmgmt.v4.config.ReportFormat]',
        'recipients': 'list[opsmgmt.v4.config.Recipient]',
        'creation_time': 'datetime',
        'timezone': 'str',
        'entity_selection': 'opsmgmt.v4.config.EntitySelection',
        'owner_ext_id': 'str',
        'available_formats': 'list[opsmgmt.v4.config.ReportFormat]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'config_ext_id': 'configExtId',
        'is_persistent': 'isPersistent',
        'override_supported_formats': 'overrideSupportedFormats',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'recipient_formats': 'recipientFormats',
        'recipients': 'recipients',
        'creation_time': 'creationTime',
        'timezone': 'timezone',
        'entity_selection': 'entitySelection',
        'owner_ext_id': 'ownerExtId',
        'available_formats': 'availableFormats',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, config_ext_id=None, is_persistent=None, override_supported_formats=None, start_time=None, end_time=None, recipient_formats=None, recipients=None, creation_time=None, timezone=None, entity_selection=None, owner_ext_id=None, available_formats=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__config_ext_id = None
        self.__is_persistent = None
        self.__override_supported_formats = None
        self.__start_time = None
        self.__end_time = None
        self.__recipient_formats = None
        self.__recipients = None
        self.__creation_time = None
        self.__timezone = None
        self.__entity_selection = None
        self.__owner_ext_id = None
        self.__available_formats = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        self.__config_ext_id = config_ext_id
        if is_persistent is not None:
            self.__is_persistent = is_persistent
        if override_supported_formats is not None:
            self.__override_supported_formats = override_supported_formats
        self.__start_time = start_time
        self.__end_time = end_time
        if recipient_formats is not None:
            self.__recipient_formats = recipient_formats
        if recipients is not None:
            self.__recipients = recipients
        if creation_time is not None:
            self.__creation_time = creation_time
        if timezone is not None:
            self.__timezone = timezone
        if entity_selection is not None:
            self.__entity_selection = entity_selection
        if owner_ext_id is not None:
            self.__owner_ext_id = owner_ext_id
        if available_formats is not None:
            self.__available_formats = available_formats

    def _initialize_object_type(self):
        return 'opsmgmt.v4.config.Report'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Report instance name

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Description of the report. This will be part of generated report.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501

        self.__description = description

    @property
    def config_ext_id(self):
        """
        UUID for the report configuration for which report needs to be generated.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__config_ext_id

    @config_ext_id.setter
    def config_ext_id(self, config_ext_id):
        if config_ext_id is None:
            raise ValueError("Invalid value for `config_ext_id`, must not be `None`")  # noqa: E501
        if config_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', config_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `config_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__config_ext_id = config_ext_id

    @property
    def is_persistent(self):
        """
        Generated report saved or not

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_persistent

    @is_persistent.setter
    def is_persistent(self, is_persistent):

        self.__is_persistent = is_persistent

    @property
    def override_supported_formats(self):
        """
        List specifying the formats in which report is to be created. This overrides the supportedFormats defined in the report configuration.

        :type:
             list[ :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportFormat` ]
        """  # noqa: E501
        return self.__override_supported_formats

    @override_supported_formats.setter
    def override_supported_formats(self, override_supported_formats):

        self.__override_supported_formats = override_supported_formats

    @property
    def start_time(self):
        """
        UTC date and time in \"%Y-%m-%d %H:%M:%S\" format for data collection start point. Eg:- 2023-10-23 11:34:45

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__start_time

    @start_time.setter
    def start_time(self, start_time):
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self.__start_time = start_time

    @property
    def end_time(self):
        """
        UTC date and time in \"%Y-%m-%d %H:%M:%S\" format for data collection end point. Eg:- 2023-10-23 11:34:45

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__end_time

    @end_time.setter
    def end_time(self, end_time):
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self.__end_time = end_time

    @property
    def recipient_formats(self):
        """
        List specifying the formats in which the report is to be sent.

        :type:
             list[ :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportFormat` ]
        """  # noqa: E501
        return self.__recipient_formats

    @recipient_formats.setter
    def recipient_formats(self, recipient_formats):

        self.__recipient_formats = recipient_formats

    @property
    def recipients(self):
        """
        Recipients in addition to the ones specified on the report configuration.

        :type:
             list[ :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.Recipient` ]
        """  # noqa: E501
        return self.__recipients

    @recipients.setter
    def recipients(self, recipients):

        self.__recipients = recipients

    @property
    def creation_time(self):
        """
        Time in ISO 8601 format when the report instance was created.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__creation_time

    @creation_time.setter
    def creation_time(self, creation_time):

        self.__creation_time = creation_time

    @property
    def timezone(self):
        """
        Timezone in which report is to be generated. This is the list supported by pytz.all_timezones. For more info, check http://pytz.sourceforge.net

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__timezone

    @timezone.setter
    def timezone(self, timezone):
        if timezone is not None and not re.search('^[a-zA-Z]+(\/[a-zA-Z_]+)?$', timezone):  # noqa: E501
            raise ValueError(r"Invalid value for `timezone`, must be a follow pattern or equal to `/^[a-zA-Z]+(\/[a-zA-Z_]+)?$/`")  # noqa: E501

        self.__timezone = timezone

    @property
    def entity_selection(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.EntitySelection`
        """  # noqa: E501
        return self.__entity_selection

    @entity_selection.setter
    def entity_selection(self, entity_selection):

        self.__entity_selection = entity_selection

    @property
    def owner_ext_id(self):
        """
        Owner UUID for the report instance.\"

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__owner_ext_id

    @owner_ext_id.setter
    def owner_ext_id(self, owner_ext_id):
        if owner_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', owner_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `owner_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__owner_ext_id = owner_ext_id

    @property
    def available_formats(self):
        """
        List of formats in which report generation was successful.

        :type:
             list[ :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportFormat` ]
        """  # noqa: E501
        return self.__available_formats

    @available_formats.setter
    def available_formats(self, available_formats):

        self.__available_formats = available_formats

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Report, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

