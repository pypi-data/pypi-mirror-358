# coding: utf-8


"""
IGNORE:
    Nutanix Cloud Management Platform APIs

    Provide functionalities that are common to APIs in namespaces aiops, devops, secops, finops.  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class WidgetTemplateType(object):

    """List of predefined widgets supported.


    Allowed enum values:

        - _UNKNOWN
        - _REDACTED
        - CLUSTER_LICENSE_TABLE: Predefined cluster license widget.
        - MULTICLUSTER_LICENSE_SUMMARY: Predifined multi-cluster license summary widget.
        - ALERTS_HISTOGRAM: Predefined alert histogram widget.
        - BLOCKS_SUMMARY: Predefined block summary widget.
        - IGNORE_TIME_WINDOW_TABLE: Predefined ignore time window widget.
        - CLUSTER_CPU_RUNWAY_CHART: Predefined cluster cpu runway widget.
        - CLUSTER_MEMORY_RUNWAY_CHART: Predefined cluster memory runway widget.
        - CLUSTER_STORAGE_RUNWAY_CHART: Predefined cluster storage runway widget.
        - CLUSTER_INACTIVE_VM_TABLE: Predefined cluster inactive VM table widget.
        - CLUSTER_CONSTRAINED_VM_TABLE: Predefined cluster constrained VM table widget.
        - CLUSTER_OVERPROVISIONED_VM_TABLE: Predefined cluster overprovisioned VM table widget.
        - CLUSTER_BULLY_VM_TABLE: Predefined cluster bully VM table widget.
        - CLUSTER_POTENTIAL_CPU_RECLAIM: Predefined cluster potential CPU reclaim widget.
        - CLUSTER_POTENTIAL_MEMORY_RECLAIM: Predefined cluster potential memory reclaim widget.
        - CLUSTER_POTENTIAL_STORAGE_RECLAIM: Predefined cluster potential storage reclaim widget.
        - VCENTER_BLOCKS_SUMMARY: Predefined vCenter blocks summary widget.
        - VCENTER_CPU_RUNWAY_CHART: Predefined vCenter CPU runway chart widget.
        - VCENTER_MEMORY_RUNWAY_CHART: Predefined vCenter memory runway chart widget.
        - VCENTER_INACTIVE_VM_TABLE: Predefined vCenter inactive VM table widget.
        - VCENTER_CONSTRAINED_VM_TABLE: Predefined vCenter constrained VM table widget.
        - VCENTER_OVERPROVISIONED_VM_TABLE: Predefined vCenter overprovisioned VM table widget.
        - VCENTER_BULLY_VM_TABLE: Predefined vCenter bully VM table widget.
        - VCENTER_POTENTIAL_CPU_RECLAIM: Predefined vCenter potential CPU reclaim widget.
        - VCENTER_POTENTIAL_MEMORY_RECLAIM: Predefined vCenter potential memory reclaim widget.
        - VCENTER_POTENTIAL_STORAGE_RECLAIM: Predefined vCenter potential storage reclaim widget.
    """
    _UNKNOWN = "$UNKNOWN"
    _REDACTED = "$REDACTED"
    CLUSTER_LICENSE_TABLE = "CLUSTER_LICENSE_TABLE"
    MULTICLUSTER_LICENSE_SUMMARY = "MULTICLUSTER_LICENSE_SUMMARY"
    ALERTS_HISTOGRAM = "ALERTS_HISTOGRAM"
    BLOCKS_SUMMARY = "BLOCKS_SUMMARY"
    IGNORE_TIME_WINDOW_TABLE = "IGNORE_TIME_WINDOW_TABLE"
    CLUSTER_CPU_RUNWAY_CHART = "CLUSTER_CPU_RUNWAY_CHART"
    CLUSTER_MEMORY_RUNWAY_CHART = "CLUSTER_MEMORY_RUNWAY_CHART"
    CLUSTER_STORAGE_RUNWAY_CHART = "CLUSTER_STORAGE_RUNWAY_CHART"
    CLUSTER_INACTIVE_VM_TABLE = "CLUSTER_INACTIVE_VM_TABLE"
    CLUSTER_CONSTRAINED_VM_TABLE = "CLUSTER_CONSTRAINED_VM_TABLE"
    CLUSTER_OVERPROVISIONED_VM_TABLE = "CLUSTER_OVERPROVISIONED_VM_TABLE"
    CLUSTER_BULLY_VM_TABLE = "CLUSTER_BULLY_VM_TABLE"
    CLUSTER_POTENTIAL_CPU_RECLAIM = "CLUSTER_POTENTIAL_CPU_RECLAIM"
    CLUSTER_POTENTIAL_MEMORY_RECLAIM = "CLUSTER_POTENTIAL_MEMORY_RECLAIM"
    CLUSTER_POTENTIAL_STORAGE_RECLAIM = "CLUSTER_POTENTIAL_STORAGE_RECLAIM"
    VCENTER_BLOCKS_SUMMARY = "VCENTER_BLOCKS_SUMMARY"
    VCENTER_CPU_RUNWAY_CHART = "VCENTER_CPU_RUNWAY_CHART"
    VCENTER_MEMORY_RUNWAY_CHART = "VCENTER_MEMORY_RUNWAY_CHART"
    VCENTER_INACTIVE_VM_TABLE = "VCENTER_INACTIVE_VM_TABLE"
    VCENTER_CONSTRAINED_VM_TABLE = "VCENTER_CONSTRAINED_VM_TABLE"
    VCENTER_OVERPROVISIONED_VM_TABLE = "VCENTER_OVERPROVISIONED_VM_TABLE"
    VCENTER_BULLY_VM_TABLE = "VCENTER_BULLY_VM_TABLE"
    VCENTER_POTENTIAL_CPU_RECLAIM = "VCENTER_POTENTIAL_CPU_RECLAIM"
    VCENTER_POTENTIAL_MEMORY_RECLAIM = "VCENTER_POTENTIAL_MEMORY_RECLAIM"
    VCENTER_POTENTIAL_STORAGE_RECLAIM = "VCENTER_POTENTIAL_STORAGE_RECLAIM"


    def __init__(self, *args, **kwargs):  # noqa: E501
        self.discriminator = None
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'opsmgmt.v4.config.WidgetTemplateType'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr in vars(self):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(WidgetTemplateType, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WidgetTemplateType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

