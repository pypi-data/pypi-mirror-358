# coding: utf-8


"""
IGNORE:
    Nutanix Cloud Management Platform APIs

    Provide functionalities that are common to APIs in namespaces aiops, devops, secops, finops.  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_opsmgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.EntityType import EntityType  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.NotificationPolicy import NotificationPolicy  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportCustomization import ReportCustomization  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportFormat import ReportFormat  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportSchedule import ReportSchedule  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.RetentionConfig import RetentionConfig  # noqa: F401,E501
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.Section import Section  # noqa: F401,E501

class ReportConfig(ExternalizableAbstractModel):

    """

    :param name: (:attr:`name`) Name of the report configuration.
    :type name: required
     max=64 chars
    
    :param description: (:attr:`description`) Description of the report configuration.
    :type description: 
     max=1000 chars
    
    :param schedule: (:attr:`schedule`) 
    :type schedule: 
    
    
    :param retention_config: (:attr:`retention_config`) 
    :type retention_config: 
    
    
    :param sections: (:attr:`sections`) List of sections in the report.
    :type sections: required
    
    
    :param supported_formats: (:attr:`supported_formats`) List specifying the formats in which the report will be created.
    :type supported_formats: 
    
    
    :param timezone: (:attr:`timezone`) The timezone in which the report will be generated. This is the list supported by pytz.all_timezones. For more info, check http://pytz.sourceforge.net
    :type timezone: 
    
    
    :param notification_policy: (:attr:`notification_policy`) 
    :type notification_policy: 
    
    
    :param is_system_defined: (:attr:`is_system_defined`) Flag specifying if the report configuration is pre-defined.
    :type is_system_defined: 
    
    
    :param is_private: (:attr:`is_private`) Flag specifying if the report configuration is private.
    :type is_private: 
    
    
    :param is_imported: (:attr:`is_imported`) Flag specifying if the report configuration is imported.
    :type is_imported: 
    
    
    :param creation_time: (:attr:`creation_time`) Time in ISO 8601 format when the report configuration was created.
    :type creation_time: 
    
    
    :param start_time_offset_secs: (:attr:`start_time_offset_secs`) Offset for start time for data collection during report generation.
    :type start_time_offset_secs: 
    
    
    :param end_time_offset_secs: (:attr:`end_time_offset_secs`) Offset for end time for data collection during report generation.
    :type end_time_offset_secs: 
    
    
    :param report_customization: (:attr:`report_customization`) 
    :type report_customization: 
    
    
    :param default_section_entity_type: (:attr:`default_section_entity_type`) 
    :type default_section_entity_type: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'schedule': 'opsmgmt.v4.config.ReportSchedule',
        'retention_config': 'opsmgmt.v4.config.RetentionConfig',
        'sections': 'list[opsmgmt.v4.config.Section]',
        'supported_formats': 'list[opsmgmt.v4.config.ReportFormat]',
        'timezone': 'str',
        'notification_policy': 'opsmgmt.v4.config.NotificationPolicy',
        'is_system_defined': 'bool',
        'is_private': 'bool',
        'is_imported': 'bool',
        'creation_time': 'datetime',
        'start_time_offset_secs': 'int',
        'end_time_offset_secs': 'int',
        'report_customization': 'opsmgmt.v4.config.ReportCustomization',
        'default_section_entity_type': 'opsmgmt.v4.config.EntityType',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'schedule': 'schedule',
        'retention_config': 'retentionConfig',
        'sections': 'sections',
        'supported_formats': 'supportedFormats',
        'timezone': 'timezone',
        'notification_policy': 'notificationPolicy',
        'is_system_defined': 'isSystemDefined',
        'is_private': 'isPrivate',
        'is_imported': 'isImported',
        'creation_time': 'creationTime',
        'start_time_offset_secs': 'startTimeOffsetSecs',
        'end_time_offset_secs': 'endTimeOffsetSecs',
        'report_customization': 'reportCustomization',
        'default_section_entity_type': 'defaultSectionEntityType',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, schedule=None, retention_config=None, sections=None, supported_formats=None, timezone=None, notification_policy=None, is_system_defined=None, is_private=None, is_imported=None, creation_time=None, start_time_offset_secs=None, end_time_offset_secs=None, report_customization=None, default_section_entity_type=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__schedule = None
        self.__retention_config = None
        self.__sections = None
        self.__supported_formats = None
        self.__timezone = None
        self.__notification_policy = None
        self.__is_system_defined = None
        self.__is_private = None
        self.__is_imported = None
        self.__creation_time = None
        self.__start_time_offset_secs = None
        self.__end_time_offset_secs = None
        self.__report_customization = None
        self.__default_section_entity_type = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        if schedule is not None:
            self.__schedule = schedule
        if retention_config is not None:
            self.__retention_config = retention_config
        self.__sections = sections
        if supported_formats is not None:
            self.__supported_formats = supported_formats
        if timezone is not None:
            self.__timezone = timezone
        if notification_policy is not None:
            self.__notification_policy = notification_policy
        if is_system_defined is not None:
            self.__is_system_defined = is_system_defined
        if is_private is not None:
            self.__is_private = is_private
        if is_imported is not None:
            self.__is_imported = is_imported
        if creation_time is not None:
            self.__creation_time = creation_time
        if start_time_offset_secs is not None:
            self.__start_time_offset_secs = start_time_offset_secs
        if end_time_offset_secs is not None:
            self.__end_time_offset_secs = end_time_offset_secs
        if report_customization is not None:
            self.__report_customization = report_customization
        if default_section_entity_type is not None:
            self.__default_section_entity_type = default_section_entity_type

    def _initialize_object_type(self):
        return 'opsmgmt.v4.config.ReportConfig'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def name(self):
        """
        Name of the report configuration.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Description of the report configuration.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def schedule(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportSchedule`
        """  # noqa: E501
        return self.__schedule

    @schedule.setter
    def schedule(self, schedule):

        self.__schedule = schedule

    @property
    def retention_config(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.RetentionConfig`
        """  # noqa: E501
        return self.__retention_config

    @retention_config.setter
    def retention_config(self, retention_config):

        self.__retention_config = retention_config

    @property
    def sections(self):
        """
        List of sections in the report.

        :type:
             list[ :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.Section` ]
        """  # noqa: E501
        return self.__sections

    @sections.setter
    def sections(self, sections):
        if sections is None:
            raise ValueError("Invalid value for `sections`, must not be `None`")  # noqa: E501

        self.__sections = sections

    @property
    def supported_formats(self):
        """
        List specifying the formats in which the report will be created.

        :type:
             list[ :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportFormat` ]
        """  # noqa: E501
        return self.__supported_formats

    @supported_formats.setter
    def supported_formats(self, supported_formats):

        self.__supported_formats = supported_formats

    @property
    def timezone(self):
        """
        The timezone in which the report will be generated. This is the list supported by pytz.all_timezones. For more info, check http://pytz.sourceforge.net

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__timezone

    @timezone.setter
    def timezone(self, timezone):
        if timezone is not None and not re.search('^[a-zA-Z]+(\/[a-zA-Z_]+)?$', timezone):  # noqa: E501
            raise ValueError(r"Invalid value for `timezone`, must be a follow pattern or equal to `/^[a-zA-Z]+(\/[a-zA-Z_]+)?$/`")  # noqa: E501

        self.__timezone = timezone

    @property
    def notification_policy(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.NotificationPolicy`
        """  # noqa: E501
        return self.__notification_policy

    @notification_policy.setter
    def notification_policy(self, notification_policy):

        self.__notification_policy = notification_policy

    @property
    def is_system_defined(self):
        """
        Flag specifying if the report configuration is pre-defined.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_system_defined

    @is_system_defined.setter
    def is_system_defined(self, is_system_defined):

        self.__is_system_defined = is_system_defined

    @property
    def is_private(self):
        """
        Flag specifying if the report configuration is private.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_private

    @is_private.setter
    def is_private(self, is_private):

        self.__is_private = is_private

    @property
    def is_imported(self):
        """
        Flag specifying if the report configuration is imported.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_imported

    @is_imported.setter
    def is_imported(self, is_imported):

        self.__is_imported = is_imported

    @property
    def creation_time(self):
        """
        Time in ISO 8601 format when the report configuration was created.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__creation_time

    @creation_time.setter
    def creation_time(self, creation_time):

        self.__creation_time = creation_time

    @property
    def start_time_offset_secs(self):
        """
        Offset for start time for data collection during report generation.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__start_time_offset_secs

    @start_time_offset_secs.setter
    def start_time_offset_secs(self, start_time_offset_secs):

        self.__start_time_offset_secs = start_time_offset_secs

    @property
    def end_time_offset_secs(self):
        """
        Offset for end time for data collection during report generation.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__end_time_offset_secs

    @end_time_offset_secs.setter
    def end_time_offset_secs(self, end_time_offset_secs):

        self.__end_time_offset_secs = end_time_offset_secs

    @property
    def report_customization(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ReportCustomization`
        """  # noqa: E501
        return self.__report_customization

    @report_customization.setter
    def report_customization(self, report_customization):

        self.__report_customization = report_customization

    @property
    def default_section_entity_type(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.EntityType`
        """  # noqa: E501
        return self.__default_section_entity_type

    @default_section_entity_type.setter
    def default_section_entity_type(self, default_section_entity_type):

        self.__default_section_entity_type = default_section_entity_type

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ReportConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

