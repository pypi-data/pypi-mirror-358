# coding: utf-8


"""
IGNORE:
    Nutanix Cloud Management Platform APIs

    Provide functionalities that are common to APIs in namespaces aiops, devops, secops, finops.  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ScheduleInterval import ScheduleInterval  # noqa: F401,E501

class ReportSchedule(object):

    """Defines the parameters for schdeuling report creation from the report configuration.

    :param schedule_interval: (:attr:`schedule_interval`) 
    :type schedule_interval: required
    
    
    :param frequency: (:attr:`frequency`) Multiple of scheduleInterval. For example, if the scheduleInterval is set to daily and frequency is set to 2, the schedule will run every 2 days.
    :type frequency: required
    
    
    :param start_time: (:attr:`start_time`) Start time of the schedule. The value should be in extended ISO-8601 format. For example, 2022-04-23T01:23:45.678+09:00 represents 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html
    :type start_time: required
    
    
    :param end_time: (:attr:`end_time`) End time of the schedule. The value should be in extended ISO-8601 format. For example, 2022-04-23T01:23:45.678+09:00 represents 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html
    :type end_time: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'schedule_interval': 'opsmgmt.v4.config.ScheduleInterval',
        'frequency': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'schedule_interval': 'scheduleInterval',
        'frequency': 'frequency',
        'start_time': 'startTime',
        'end_time': 'endTime',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, schedule_interval=None, frequency=None, start_time=None, end_time=None, *args, **kwargs):  # noqa: E501
        self.__schedule_interval = None
        self.__frequency = None
        self.__start_time = None
        self.__end_time = None
        self.discriminator = None
        self.__schedule_interval = schedule_interval
        self.__frequency = frequency
        self.__start_time = start_time
        if end_time is not None:
            self.__end_time = end_time
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'opsmgmt.v4.config.ReportSchedule'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def schedule_interval(self):
        """
        

        :type:
            :class:`~ntnx_opsmgmt_py_client.models.opsmgmt.v4.config.ScheduleInterval`
        """  # noqa: E501
        return self.__schedule_interval

    @schedule_interval.setter
    def schedule_interval(self, schedule_interval):
        if schedule_interval is None:
            raise ValueError("Invalid value for `schedule_interval`, must not be `None`")  # noqa: E501

        self.__schedule_interval = schedule_interval

    @property
    def frequency(self):
        """
        Multiple of scheduleInterval. For example, if the scheduleInterval is set to daily and frequency is set to 2, the schedule will run every 2 days.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__frequency

    @frequency.setter
    def frequency(self, frequency):
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501

        self.__frequency = frequency

    @property
    def start_time(self):
        """
        Start time of the schedule. The value should be in extended ISO-8601 format. For example, 2022-04-23T01:23:45.678+09:00 represents 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__start_time

    @start_time.setter
    def start_time(self, start_time):
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self.__start_time = start_time

    @property
    def end_time(self):
        """
        End time of the schedule. The value should be in extended ISO-8601 format. For example, 2022-04-23T01:23:45.678+09:00 represents 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__end_time

    @end_time.setter
    def end_time(self, end_time):

        self.__end_time = end_time

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ReportSchedule, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

