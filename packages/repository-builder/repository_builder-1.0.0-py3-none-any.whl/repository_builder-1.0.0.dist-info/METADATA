Metadata-Version: 2.4
Name: repository-builder
Version: 1.0.0
Summary: A comprehensive collection of Python scripts and tools for enhanced productivity.
Home-page: https://github.com/gwanczuk/Repository-Builder
Author: Gina R. Rodriguez
Author-email: "Gina R. Rodriguez" <DCV5793@tn.gov>
License: MIT License
        
        <<<<<<< HEAD
        Copyright (c) 2025 Global Scripts Repository
        =======
        Copyright (c) 2025 Repository-Builder
        >>>>>>> b5ac9cc (Release: prepared for publication)
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/gwanczuk/Repository-Builder
Project-URL: Bug Tracker, https://github.com/gwanczuk/Repository-Builder/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

<<<<<<< HEAD
# 🚀 Global Scripts Repository

**Powerful automation tools for developers with intelligent documentation generation and professional export capabilities.**

[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Documentation](https://img.shields.io/badge/docs-comprehensive-green.svg)](#-documentation)

## 🌟 Overview

Global Scripts is a comprehensive toolkit designed to streamline development workflows through intelligent automation. The centerpiece is an advanced README generator that analyzes your projects and creates professional documentation with the ability to export to DOCX format for stakeholder sharing.

### ✨ Key Features

- **🔍 Intelligent Project Analysis**: Automatically scans project structure, Python files, dependencies, and metadata
- **📝 Multiple Template Types**: Comprehensive, Simple, API-focused, and Minimal templates
- **📄 Professional DOCX Export**: Creates Word documents with professional styling
- **🔧 Easy Integration**: Simple integration into existing Python scripts and workflows
- **📦 Batch Processing**: Process multiple projects simultaneously
- **🎯 Interactive Mode**: Guided setup for all experience levels
- **⚙️ Highly Configurable**: Extensive customization options
- **🗂️ Path Management**: Smart handling of VS Code virtual file system paths

## 🚀 Quick Start

### 1. Clone and Setup

```bash
# Clone the repository
git clone https://github.com/gwanczuk/Global-Scripts.git
cd Global-Scripts

# Navigate to the main tool directory
cd "Global Scripts/my-python-tool"

# Run automated setup
python setup.py
```

### 2. Install Dependencies

```bash
# Install required packages
pip install python-docx

# Verify installation
python verify_setup.py
```

### 3. Generate Your First README

```bash
# Basic generation
python scripts/enhanced_readme_cli.py /path/to/your/project

# With DOCX export
python scripts/enhanced_readme_cli.py /path/to/your/project --template comprehensive --docx

# Interactive mode
python scripts/enhanced_readme_cli.py --interactive
```

## 📁 Repository Structure

```text
Global-Scripts/
├── 📋 Documentation & Tutorials
│   ├── README.md                           # This file
│   ├── Virtual_Environment_Tutorial.ipynb  # Complete venv setup guide
│   └── Global_Scripts_Tutorial.ipynb       # Comprehensive usage tutorial
└── 🛠️ Global Scripts/
    └── my-python-tool/
        ├── 📚 Documentation
        │   ├── COMPLETE_README.md           # Detailed feature documentation
        │   ├── NAVIGATION_GUIDE.md          # Path resolution help
        │   ├── PROJECT_README.md            # Project-specific docs
        │   └── my-python-tool README.md     # Tool-specific docs
        ├── ⚙️ Core Components
        │   ├── setup.py                     # Automated setup script
        │   ├── requirements.txt             # Python dependencies
        │   ├── demo.py                      # Interactive demonstration
        │   ├── global_manager.py            # Main management module
        │   ├── path_helper.py               # Smart path resolution
        │   └── verify_setup.py              # Setup verification
        ├── 🚀 Execution Scripts
        │   ├── run_global_scripts.bat       # Windows execution
        │   └── run_global_scripts.sh        # Unix/Linux execution
        ├── 🖥️ Command Line Interfaces
        │   └── scripts/
        │       ├── enhanced_readme_cli.py   # Advanced README generator
        │       ├── my_tool_cli.py           # General tool interface
        │       └── readme_cli.py            # Basic README generator
        └── 🏗️ Source Code
            └── src/
                ├── global_readme_generator.py  # Core generation engine
                ├── my_tool.py                  # Main tool implementation
                ├── readme_generator.py         # README generation logic
                └── venv_manager.py             # Virtual environment tools
```

## 🎯 Use Cases

### For Individual Developers

- **📝 Project Documentation**: Generate professional README files for GitHub repositories
- **📊 Code Analysis**: Understand project structure and dependencies
- **📄 Stakeholder Reports**: Export documentation to DOCX for non-technical audiences

### For Development Teams

- **🔄 Standardized Documentation**: Consistent README format across all projects
- **⚡ CI/CD Integration**: Automated documentation generation in pipelines
- **📋 Batch Processing**: Document multiple microservices or libraries at once

### For Organizations

- **🏢 Enterprise Documentation**: Professional Word documents for management
- **📈 Project Portfolios**: Comprehensive documentation for project reviews
- **🎨 Custom Branding**: Customizable templates with organizational styling

## 📖 Documentation

### 📚 Getting Started

- **[Virtual Environment Tutorial](Virtual_Environment_Tutorial.ipynb)**: Complete guide to Python environment setup
- **[Global Scripts Tutorial](Global_Scripts_Tutorial.ipynb)**: Comprehensive usage tutorial with examples
- **[Navigation Guide](Global%20Scripts/my-python-tool/NAVIGATION_GUIDE.md)**: Help with path resolution

### 🔧 Advanced Usage

- **[Complete README](Global%20Scripts/my-python-tool/COMPLETE_README.md)**: Detailed feature documentation
- **[Demo Script](Global%20Scripts/my-python-tool/demo.py)**: Interactive feature demonstration

## 🛠️ Requirements

### System Requirements

- **Python**: 3.8 or higher
- **Operating System**: Windows, macOS, or Linux
- **Memory**: 512MB available RAM
- **Storage**: 50MB free space

### Python Dependencies

```text
python-docx>=0.8.11    # DOCX export functionality
pathlib                # Enhanced path handling (built-in)
ast                     # Python code analysis (built-in)
json                    # Configuration files (built-in)
```

### Optional Dependencies

```text
rich                    # Enhanced terminal output
click                   # Improved CLI interfaces
requests                # API integrations
```

## 🚀 Usage Examples

### Basic README Generation

```python
from src.global_readme_generator import ProjectAnalyzer, ReadmeGenerator

# Analyze project
analyzer = ProjectAnalyzer('/path/to/your/project')
project_info = analyzer.analyze_project()

# Generate README
generator = ReadmeGenerator(project_info)
readme_content = generator.generate_readme(template='comprehensive')

# Save README
with open('README.md', 'w') as f:
    f.write(readme_content)
```

### Command Line Usage

```bash
# Generate with specific template
python scripts/enhanced_readme_cli.py /path/to/project --template comprehensive

# Export to DOCX
python scripts/enhanced_readme_cli.py /path/to/project --docx --output "Project_Docs.docx"

# Batch process multiple projects
python scripts/enhanced_readme_cli.py --batch --projects "proj1,proj2,proj3"

# Interactive guided mode
python scripts/enhanced_readme_cli.py --interactive
```

## 🔧 Configuration

### Template Options

- **`comprehensive`**: Detailed documentation with all sections
- **`simple`**: Basic README with essential information
- **`api`**: API-focused documentation for libraries
- **`minimal`**: Minimal README for small projects

### Output Formats

- **Markdown**: Standard README.md files
- **DOCX**: Professional Word documents
- **HTML**: Web-ready documentation (coming soon)

## 🤝 Contributing

We welcome contributions! Here's how you can help:

1. **🐛 Report Issues**: Found a bug? Open an issue with details
2. **💡 Suggest Features**: Have an idea? Share it in the discussions
3. **🔧 Submit Pull Requests**: Improve the code or documentation
4. **📝 Improve Documentation**: Help make the docs even better

### Development Setup

```bash
# Fork and clone the repository
git clone https://github.com/yourusername/Global-Scripts.git
cd Global-Scripts

# Create development environment
python -m venv dev_env
source dev_env/bin/activate  # On Windows: dev_env\Scripts\activate

# Install development dependencies
pip install -r requirements.txt
pip install pytest black flake8  # Additional dev tools

# Run tests
python -m pytest tests/
```

## 📜 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- **Python Community**: For the excellent ecosystem and tools
- **python-docx**: For enabling professional document export
- **VS Code**: For the excellent development environment
- **Contributors**: Everyone who helps improve this project

## 📞 Support

- **📧 Issues**: [GitHub Issues](https://github.com/gwanczuk/Global-Scripts/issues)
- **💬 Discussions**: [GitHub Discussions](https://github.com/gwanczuk/Global-Scripts/discussions)
- **📖 Documentation**: See the comprehensive guides in this repository

## 🎯 Roadmap

### Upcoming Features

- **🌐 HTML Export**: Web-ready documentation generation
- **🎨 Custom Themes**: More styling options for DOCX export
- **🔗 API Integration**: REST API for remote documentation generation
- **📊 Analytics Dashboard**: Usage tracking and insights
- **🔌 Plugin System**: Extensible architecture for custom features

### Version History

- **v1.0.0**: Initial release with core README generation
- **v1.1.0**: Added DOCX export functionality
- **v1.2.0**: Batch processing and enhanced CLI
- **v1.3.0**: Path management and VS Code integration

---

**Made with ❤️ by the Global Scripts team**
=======
# 🚀 Global Scripts - Complete Workspace Solution

**A comprehensive collection of Python scripts and tools for enhanced productivity**

## 📁 Repository Structure

```
Global-Scripts-Publication/
├── Main_Scripts/           # Core functionality scripts
├── Helper_Scripts/         # Utility and support scripts  
├── Tutorials/              # Interactive learning notebooks
├── Documentation/          # Comprehensive documentation
├── Execution_Scripts/      # Ready-to-run script examples
├── Tests/                  # Test suites and validation scripts
└── Config/                 # Configuration files and templates
```

## 🧪 Test Suites

- **Enhanced_Global_Manager_Test_Suite.ipynb** - Comprehensive testing for global manager
- **Enhanced_Manager_Test_Suite.ipynb** - Enhanced manager functionality tests

## 🚀 Quick Start

1. **Clone or download** this repository
2. **Navigate** to your workspace
3. **Follow** the tutorials in the `Tutorials/` directory
4. **Run tests** in the `Tests/` directory to verify functionality
5. **Explore** the documentation in `Documentation/`

---

**Generated on:** 2025-06-28 15:03:34
>>>>>>> b5ac9cc (Release: prepared for publication)
