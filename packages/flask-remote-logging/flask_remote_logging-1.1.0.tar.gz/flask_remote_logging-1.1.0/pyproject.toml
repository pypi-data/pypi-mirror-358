[project]
name = "flask-remote-logging"
dynamic = ["version"]
description = "Flask extension for sending logs to remote logging services including Graylog, Google Cloud Logging, AWS CloudWatch Logs, and Azure Monitor Logs."
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "Marc Ford", email = "thenixninja@gmail.com" }
]
maintainers = [
    { name = "Marc Ford", email = "thenixninja@gmail.com" }
]
keywords = ["flask", "graylog", "gelf", "logging", "extension", "google-cloud-logging", "gcp", "aws", "cloudwatch", "azure", "monitor", "remote-logging"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Flask",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Topic :: Communications",
]
dependencies = [
    "flask>=1.4.4,<3.0.0",
    "user-agents>=2.0.0",
]

[project.optional-dependencies]
# Graylog support
graylog = [
    "pygelf>=0.4.2",
]

# Google Cloud Logging support
gcp = [
    "google-cloud-logging>=3.0.0",
]

# AWS CloudWatch Logs support
aws = [
    "boto3>=1.26.0",
]

# Azure Monitor Logs support
azure = [
    "requests>=2.25.0",
]

# IBM Cloud Logs support
ibm = [
    "requests>=2.25.0",
]

# Oracle Cloud Infrastructure Logging support
oci = [
    "oci>=2.40.0",
]

# Install all backends
all = [
    "pygelf>=0.4.2",
    "google-cloud-logging>=3.0.0", 
    "boto3>=1.26.0",
    "requests>=2.25.0",
    "oci>=2.40.0",
]

# Development and testing dependencies
test = [
    "pytest>=6.0",
    "pytest-cov>=2.10,<6.0",
    "pytest-mock>=3.6,<4.0",
    "pytest-xdist>=2.0,<4.0",
]
dev = [
    "isort>=5.0",
    "mypy>=1.0",
    "bandit>=1.7.0",
    "flake8>=4.0",
    "pre-commit>=2.20.0",
]

# Documentation dependencies
docs = [
    "sphinx>=5.0.0",
    "myst-parser>=1.0.0",
]

[project.urls]
"Homepage" = "https://github.com/MarcFord/flask-remote-logging"
"Bug Reports" = "https://github.com/MarcFord/flask-remote-logging/issues"
"Source" = "https://github.com/MarcFord/flask-remote-logging"
"Documentation" = "https://github.com/MarcFord/flask-remote-logging#readme"
"Changelog" = "https://github.com/MarcFord/flask-remote-logging/blob/main/CHANGELOG.md"

[build-system]
requires = ["setuptools>=45.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
# Version from Git tags
fallback_version = "0.0.1-dev"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-v",
]
# Filter out deprecation warnings from external libraries
filterwarnings = [
    "ignore::pytest.PytestDeprecationWarning:pytest_cov.*",
    "ignore::DeprecationWarning:pytest_cov.*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
omit = ["tests/*"]

[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \tests
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

[tool.pylint.format]
max-line-length = 120

[tool.flake8]
max-line-length = 114

extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info"
]

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
# Temporarily relaxed for backend extensions
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false  # Relaxed for conditional imports
warn_no_return = true
warn_unreachable = false  # Relaxed due to conditional imports
strict_equality = true
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "requests.*"
ignore_missing_imports = true
