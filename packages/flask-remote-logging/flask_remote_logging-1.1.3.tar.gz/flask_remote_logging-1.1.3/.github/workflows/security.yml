name: Security Audit

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual trigger

jobs:
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run security audit with bandit
      run: uv tool run bandit -r src/flask_remote_logging/ -f json -o bandit-report.json

    - name: Run dependency vulnerability check
      run: |
        uv tool install safety
        uv tool run safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

    - name: Create security issue if vulnerabilities found
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let vulnerabilities = [];
          
          // Check bandit report
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            if (banditReport.results && banditReport.results.length > 0) {
              vulnerabilities.push('ðŸš¨ **Bandit Security Issues Found**');
              banditReport.results.forEach(issue => {
                vulnerabilities.push(`- ${issue.test_name}: ${issue.issue_text} (${issue.filename}:${issue.line_number})`);
              });
            }
          } catch (e) {
            console.log('No bandit report or parsing error:', e.message);
          }
          
          // Check safety report
          try {
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            if (safetyReport && safetyReport.length > 0) {
              vulnerabilities.push('\nðŸ”’ **Dependency Vulnerabilities Found**');
              safetyReport.forEach(vuln => {
                vulnerabilities.push(`- ${vuln.package_name} ${vuln.installed_version}: ${vuln.vulnerability_id}`);
              });
            }
          } catch (e) {
            console.log('No safety report or parsing error:', e.message);
          }
          
          if (vulnerabilities.length > 0) {
            const body = [
              '# ðŸš¨ Security Vulnerabilities Detected',
              '',
              'The scheduled security audit has detected potential security issues:',
              '',
              ...vulnerabilities,
              '',
              '**Action Required:** Please review and address these security concerns.',
              '',
              `**Workflow:** ${context.workflow}`,
              `**Run:** ${context.runNumber}`,
              `**Commit:** ${context.sha.substring(0, 7)}`
            ].join('\n');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Security vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['security', 'automated']
            });
          }
