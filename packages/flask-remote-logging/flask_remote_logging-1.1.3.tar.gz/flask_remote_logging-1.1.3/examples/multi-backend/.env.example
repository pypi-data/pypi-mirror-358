# Multi-Backend Logging Flask Example Environment Variables
# Copy this file to .env and adjust the values for your setup
# Enable only the backends you want to use by setting *_ENABLE=true

# Global Configuration
LOG_LEVEL=INFO
ENVIRONMENT=development
PORT=5000

# Flask Configuration
FLASK_ENV=development
FLASK_DEBUG=true

# =============================================================================
# BACKEND CONFIGURATION
# Enable each backend by setting *_ENABLE=true and providing the required configuration
# =============================================================================

# Graylog Configuration
GRAYLOG_ENABLE=false
GRAYLOG_HOST=localhost
GRAYLOG_PORT=12201

# AWS CloudWatch Logs Configuration
AWS_ENABLE=false
AWS_REGION=us-east-1
# AWS_ACCESS_KEY_ID=your-access-key-id  # Optional if using IAM roles
# AWS_SECRET_ACCESS_KEY=your-secret-access-key  # Optional if using IAM roles
AWS_LOG_GROUP=/aws/flask-multi-backend/logs
AWS_LOG_STREAM=multi-backend-stream

# Google Cloud Logging Configuration
GCP_ENABLE=false
GCP_PROJECT_ID=your-gcp-project-id
# GCP_CREDENTIALS_PATH=/path/to/service-account.json  # Optional if using default credentials
GCP_LOG_NAME=flask-multi-backend

# Azure Monitor Logs Configuration
AZURE_ENABLE=false
AZURE_WORKSPACE_ID=your-log-analytics-workspace-id
AZURE_WORKSPACE_KEY=your-log-analytics-primary-key
AZURE_LOG_TYPE=FlaskMultiBackend

# IBM Cloud Logging Configuration
IBM_ENABLE=false
IBM_INGESTION_KEY=your-logdna-ingestion-key
IBM_LOG_ENDPOINT=logs.us-south.logging.cloud.ibm.com
IBM_APP_NAME=flask-multi-backend

# Oracle Cloud Infrastructure (OCI) Logging Configuration
OCI_ENABLE=false
OCI_CONFIG_FILE=~/.oci/config
OCI_CONFIG_PROFILE=DEFAULT
OCI_LOG_GROUP_ID=ocid1.loggroup.oc1.iad.your-log-group-id
OCI_LOG_ID=ocid1.log.oc1.iad.your-log-id
OCI_COMPARTMENT_ID=ocid1.compartment.oc1..your-compartment-id
OCI_LOG_SOURCE_NAME=flask-multi-backend

# =============================================================================
# EXAMPLE CONFIGURATIONS
# =============================================================================

# Example 1: Enable Graylog + AWS (common for hybrid cloud)
# GRAYLOG_ENABLE=true
# AWS_ENABLE=true

# Example 2: Enable all cloud providers for maximum redundancy
# AWS_ENABLE=true
# GCP_ENABLE=true
# AZURE_ENABLE=true
# IBM_ENABLE=true
# OCI_ENABLE=true

# Example 3: Enable Graylog for development + AWS for production
# GRAYLOG_ENABLE=true
# AWS_ENABLE=true

# =============================================================================
# OPTIONAL: CUSTOM USER SIMULATION HEADERS
# =============================================================================
# These headers can be used to simulate different cloud provider users in requests
# 
# Multi-provider user context example:
# curl -H "X-User-ID: alice123" \
#      -H "X-Username: alice" \
#      -H "X-User-Email: alice@example.com" \
#      -H "X-AWS-User-ARN: arn:aws:iam::123456789012:user/alice" \
#      -H "X-GCP-User-Email: alice@company.com" \
#      -H "X-MS-CLIENT-PRINCIPAL-NAME: alice@company.com" \
#      -H "X-IBM-User-ID: alice@company.com" \
#      -H "X-OCI-User-OCID: ocid1.user.oc1..alice123" \
#      http://localhost:5000/logs/user-context
