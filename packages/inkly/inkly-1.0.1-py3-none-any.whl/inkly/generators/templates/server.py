"""FastAPIサーバー生成用テンプレート"""

# FastAPIメインアプリケーション
SERVER_MAIN_TEMPLATE = '''"""
Auto-generated FastAPI server.
Do not edit this file directly. Make changes to the original OpenAPI specification.
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

{%- set processed_tags = [] %}
{%- for endpoint in endpoints %}
{%- for tag in endpoint.tags %}
{%- if tag not in processed_tags %}
from .routes.{{ tag | lower | replace(' ', '_') }} import router as {{ tag | lower | replace(' ', '_') }}_router
{%- set _ = processed_tags.append(tag) %}
{%- endif %}
{%- endfor %}
{%- endfor %}

app = FastAPI(
    title="Generated API Server",
    description="Auto-generated server from OpenAPI specification",
    version="1.0.0",
)

# CORS設定
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ルータの登録
{%- for tag in processed_tags %}
app.include_router({{ tag | lower | replace(' ', '_') }}_router, prefix="/{{ tag | lower }}", tags=["{{ tag }}"])
{%- endfor %}

@app.get("/")
async def root():
    """API ルート"""
    return {"message": "Generated API Server is running!"}

@app.get("/health")
async def health_check():
    """ヘルスチェック"""
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
'''

# FastAPIルート
SERVER_ROUTE_TEMPLATE = '''"""{{ tag }} ルート定義"""

from fastapi import APIRouter, Depends, HTTPException
from typing import List

from ..dependencies import get_current_user
{%- if mock_response %}
from ..interfaces import {{ tag | title }}Interface, get_{{ tag | lower }}_service
{%- endif %}

router = APIRouter()

{%- for endpoint in endpoints %}

@router.{{ endpoint.method | lower }}("{{ endpoint.path }}")
async def {{ endpoint.operation_id }}(
{%- for param in endpoint.parameters %}
{%- if param.in == 'path' %}
    {{ param.name }}: {{ param.type }},
{%- elif param.in == 'query' %}
    {{ param.name }}: {{ param.type }} = None,
{%- endif %}
{%- endfor %}
{%- if endpoint.request_body %}
    request_data: {{ endpoint.request_body.type }},
{%- endif %}
{%- if mock_response %}
    service: {{ tag | title }}Interface = Depends(get_{{ tag | lower }}_service),
{%- endif %}
) -> {{ endpoint.responses | get_return_type }}:
    """{{ endpoint.summary }}"""
{%- if mock_response %}
    try:
        return await service.{{ endpoint.operation_id }}(
{%- for param in endpoint.parameters %}
            {{ param.name }}={{ param.name }},
{%- endfor %}
{%- if endpoint.request_body %}
            data=request_data,
{%- endif %}
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
{%- else %}
    # TODO: Implement {{ endpoint.operation_id }}
    raise HTTPException(status_code=501, detail="Not implemented")
{%- endif %}

{%- endfor %}
'''

# FastAPI依存関係
SERVER_DEPENDENCIES_TEMPLATE = '''"""
Auto-generated dependencies.
Do not edit this file directly. Make changes to the original OpenAPI specification.
"""

from typing import Optional
from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

security = HTTPBearer()

async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)) -> dict:
    """
    現在のユーザーを取得する

    実際の実装では、JWTトークンの検証やデータベースからのユーザー情報取得を行う
    """
    # TODO: Implement user authentication
    # For now, return a mock user
    return {"id": 1, "username": "user", "email": "user@example.com"}

async def get_optional_current_user(credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)) -> Optional[dict]:
    """
    現在のユーザーを取得する（認証が必須ではない場合）
    """
    if credentials is None:
        return None
    return await get_current_user(credentials)
'''

# FastAPIインターフェース
SERVER_INTERFACES_TEMPLATE = '''"""
Auto-generated service interfaces.
Do not edit this file directly. Make changes to the original OpenAPI specification.
"""

from abc import ABC, abstractmethod
from typing import Any, Dict, List

{%- set processed_tags = [] %}
{%- for endpoint in endpoints %}
{%- for tag in endpoint.tags %}
{%- if tag not in processed_tags %}

class {{ tag | title }}Interface(ABC):
    """{{ tag }} サービスインターフェース"""

{%- for ep in endpoints %}
{%- if tag in ep.tags %}
    @abstractmethod
    async def {{ ep.operation_id }}(
        self,
{%- for param in ep.parameters %}
        {{ param.name }}: {{ param.type }},
{%- endfor %}
{%- if ep.request_body %}
        data: {{ ep.request_body.type }},
{%- endif %}
    ) -> {{ ep.responses | get_return_type }}:
        """{{ ep.summary }}"""
        pass

{%- endif %}
{%- endfor %}

# Dependency injection
def get_{{ tag | lower }}_service() -> {{ tag | title }}Interface:
    """{{ tag }} サービスのインスタンスを取得"""
    # TODO: Implement actual service instance
    from .implementations import {{ tag | title }}Service
    return {{ tag | title }}Service()

{%- set _ = processed_tags.append(tag) %}
{%- endif %}
{%- endfor %}
{%- endfor %}
'''

# FastAPIリクエストモデル
SERVER_REQUEST_MODEL_TEMPLATE = '''"""
このファイルは自動生成されたファイルです。
直接編集しないでください。変更は元のOpenAPI仕様書で行ってください。

{{ model.name }} リクエストモデル定義
"""

from __future__ import annotations
from typing import Any
from pydantic import BaseModel


class {{ model.name }}(BaseModel):
    """{{ model.description }}"""
{%- for field in model.fields %}
    {{ field.name }}: {{ field.type }}{% if field.description %}  # {{ field.description }}{% endif %}
{%- endfor %}
'''

# FastAPIレスポンスモデル
SERVER_RESPONSE_MODEL_TEMPLATE = '''"""
このファイルは自動生成されたファイルです。
直接編集しないでください。変更は元のOpenAPI仕様書で行ってください。

{{ model.name }} レスポンスモデル定義
"""

from __future__ import annotations
from typing import Any
from pydantic import BaseModel


class {{ model.name }}(BaseModel):
    """{{ model.description }}"""
{%- for field in model.fields %}
    {{ field.name }}: {{ field.type }}{% if field.description %}  # {{ field.description }}{% endif %}
{%- endfor %}
'''
