"""Flask/Cloud Functions生成用テンプレート"""

# Flaskサービスインターフェース
FLASK_SERVICE_INTERFACE_TEMPLATE = '''"""
Generated by inkly v{{ version | default("1.0.0") }}
Do not edit this file directly. Make changes to the original OpenAPI specification.

{{ tag | title }}ServiceInterface - Service interface for {{ tag }} operations
"""

from __future__ import annotations
from abc import ABC, abstractmethod

{% set imports = [] %}
{% set model_imports = [] %}
{% for model in request_models %}
{% if model.class_name not in imports %}
{% set _ = imports.append(model.class_name) %}
{% endif %}
{% endfor %}
{% for model in response_models %}
{% if model.class_name not in imports %}
{% set _ = imports.append(model.class_name) %}
{% endif %}
{% endfor %}

{# パラメータで使用されている型を収集 #}
{% for endpoint in endpoints %}
{% for param in endpoint.parameters %}
{% if param.type not in ['str', 'int', 'float', 'bool'] and param.type not in model_imports %}
{% set _ = model_imports.append(param.type) %}
{% endif %}
{% endfor %}
{% endfor %}

{# Request/Responseモデルのインポート #}
{% for import_model in imports %}
{% if "Request" in import_model %}
from .models.requests.{{ import_model | camel_to_snake }} import {{ import_model }}
{% else %}
from .models.responses.{{ import_model | camel_to_snake }} import {{ import_model }}
{% endif %}
{% endfor %}

{# パラメータで使用されるモデルのインポート #}
{% for model_type in model_imports %}
from .models.{{ model_type | camel_to_snake }} import {{ model_type }}
{% endfor %}


class {{ tag | title }}ServiceInterface(ABC):
    """
    Service interface for {{ tag }} operations.

    This interface defines the contract for {{ tag }} service implementations.
    Implement this interface to provide actual business logic for {{ tag }} operations.
    All methods should be implemented by concrete service classes.
    """

{% for endpoint in endpoints %}
    @abstractmethod
    def {{ endpoint.operation_id | replace('get', 'list') if endpoint.operation_id.startswith('get') and not 'ById' in endpoint.operation_id else endpoint.operation_id }}(
        self,
{% for param in endpoint.parameters %}
        {{ param.name }}: {{ param.type }},
{% endfor %}
{% if endpoint.request_body %}
{% set request_class_name = endpoint.operation_id | to_pascal_case + "Request" %}
        request: {{ request_class_name }},
{% endif %}
    ) -> {{ endpoint.operation_id | to_pascal_case }}Response:
        """
        {{ endpoint.summary or "Execute " + endpoint.operation_id + " operation" }}.

{%- if endpoint.description %}
        {{ endpoint.description }}
{%- endif %}

        Args:
{% for param in endpoint.parameters %}
            {{ param.name }}: {{ param.description or param.name + " parameter" }}
{% endfor %}
{% if endpoint.request_body %}
            request: Request data for {{ endpoint.operation_id }}
{% endif %}

        Returns:
            {{ endpoint.operation_id | to_pascal_case }}Response: Response containing the operation result

        Raises:
            NotImplementedError: This method must be implemented by concrete classes
        """
        raise NotImplementedError

{% endfor %}
'''

# Flaskモデル
FLASK_MODEL_TEMPLATE = '''"""
Auto-generated model definition file.
Do not edit this file directly. Make changes to the original OpenAPI specification.

Generated by inkly v{{ version | default("1.0.0") }}

{{ model.name }} model definition
"""

from __future__ import annotations
{%- set imports = [] %}
{%- set needs_any = false %}
{%- set needs_literal = false %}
{%- set should_import_enum = false %}
{%- for field in model.fields %}
{%- if "Any" in field.type %}
{%- set needs_any = true %}
{%- endif %}
{%- if "Literal[" in field.type %}
{%- set needs_literal = true %}
{%- endif %}
{%- if "Enum" in field.type and not should_import_enum %}
{%- set should_import_enum = true %}
{%- endif %}
{%- set field_type_clean = field.type.split('|')[0].strip() %}
{%- if field_type_clean.startswith('list[') %}
{%- set inner_type = field_type_clean[5:-1] %}
{%- if inner_type not in ['str', 'int', 'float', 'bool', 'Any'] and inner_type != model.name and inner_type not in imports and not inner_type.startswith('Literal[') %}
{%- set _ = imports.append(inner_type) %}
{%- endif %}
{%- elif field_type_clean not in ['str', 'int', 'float', 'bool', 'Any'] and field_type_clean != model.name and field_type_clean not in imports and not field_type_clean.startswith('Literal[') %}
{%- set _ = imports.append(field_type_clean) %}
{%- endif %}
{%- endfor %}

from pydantic import BaseModel
{% if should_import_enum %}
from enum import Enum
{% endif %}
{% if needs_any or needs_literal %}
from typing import{% if needs_any %} Any{% endif %}{% if (needs_any and needs_literal) %},{% endif %}{% if needs_literal %} Literal{% endif %}
{% endif %}
{% set imported = [] %}
{% for import_model in imports %}
{% if import_model not in imported %}
{% set _ = imported.append(import_model) %}
{% if "Response" in model.name or "Request" in model.name %}
from ..{{ import_model | lower }} import {{ import_model }}
{% else %}
from .{{ import_model | camel_to_snake }} import {{ import_model }}
{% endif %}
{% endif %}
{% endfor %}
{% if model.enums %}
{% for enum in model.enums %}
{% if enum.name not in imported %}
from .{{ enum.name | lower }} import {{ enum.name }}
{% endif %}
{% endfor %}
{% endif %}


class {{ model.name }}(BaseModel):
    """{{ model.description or model.name + " data model" }}.

    This model represents the data structure for {{ model.name | lower }} objects.
    All fields are validated according to the OpenAPI specification.
    """
{% for field in model.fields %}
    {{ field.name }}: {{ field.type }}{% if field.description %}  # {{ field.description }}{% endif %}
{% endfor %}

'''

# Flask Enum
FLASK_ENUM_TEMPLATE = '''"""
Generated by inkly v{{ version | default("1.0.0") }}
Do not edit this file directly. Make changes to the original OpenAPI specification.

{{ enum.name }} enum definition
"""

from enum import Enum


class {{ enum.name }}(Enum):
    """{{ enum.description }}"""
{%- for value in enum['values'] %}
    {{ value.name }} = {{ value.value }}
{%- endfor %}

'''
