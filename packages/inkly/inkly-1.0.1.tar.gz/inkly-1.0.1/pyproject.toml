[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "inkly"
version = "1.0.1"
description = "OpenAPI client & server code generator"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Inkly Team", email = "info@inkly.dev"},
]
keywords = ["openapi", "code-generation", "client", "server", "fastapi", "pydantic"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Typing :: Typed",
]

dependencies = [
    "pydantic>=2.5.0",
    "httpx>=0.25.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pyyaml>=6.0",
    "jinja2>=3.1.0",
    "click>=8.0.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pyright>=1.1.350",
    "ruff>=0.3.0",
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/inkly-team/inkly"
Repository = "https://github.com/inkly-team/inkly"
Documentation = "https://github.com/inkly-team/inkly"
Issues = "https://github.com/inkly-team/inkly/issues"

[tool.hatch.build.targets.wheel]
packages = ["inkly"]

[project.scripts]
inkly = "inkly.cli:main"

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0911", # too many return statements
    "RUF001",  # ambiguous unicode characters in docstrings
    "RUF002",  # ambiguous unicode characters in docstrings
    "ARG002",  # unused method argument
    "TCH001",  # type checking imports
    "PLC0415", # import should be at top level
    "B904",   # exception chaining
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pyright]
include = ["inkly", "tests"]
exclude = ["**/__pycache__"]
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.12"
pythonPlatform = "All"
typeCheckingMode = "strict"
useLibraryCodeForTypes = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=inkly",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["inkly"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 
