# Stub file for type hints

import threading
import asyncio
import types
import weakref
import functools
import inspect
from concurrent.futures import ThreadPoolExecutor
from collections import defaultdict
from typing import Callable
from functools import wraps

class WXEvents:
    def __init__(self, max_workers): ...
    def _wrap_handler(self, handler: Callable): ...
    def subscribe(self, event_name, handler): ...
    def subscribe_once(self, event_name, handler: Callable): ...
    def unsubscribe(self, event_name, handler: Callable): ...
    def _run_handler(self, handler, *args, **kwargs): ...
    def publish(self, event_name, *args, **kwargs): ...
    def clear_event(self, event_name): ...
    def clear_all(self): ...
    def shutdown(self): ...
    @staticmethod
    def register_event(cls): ...
    @staticmethod
    def on_event(event_name, once): ...

EVENTS_CACHE: WXEvents