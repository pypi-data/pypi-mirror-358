# Stub file for type hints

import enum
import time
from datetime import datetime, timedelta, timezone
from functools import wraps
from typing import Union, Optional, Callable, Dict, Any

class WXTimes:
    class UNIT:
        S: str
        MS: str
        US: str
        NS: str

    @staticmethod
    def timeit(unit: UNIT = UNIT.S, precision: int = 3, logger: Optional[Callable[[Dict[str, Any]], None]] = None): ...
    @staticmethod
    def get_current_datetime(timezone_offset: Optional[float] = None): ...
    @staticmethod
    def format_datetime(dt: datetime = None, fmt: str = '%Y-%m-%d %H:%M:%S', timezone_offset: Optional[float] = None): ...
    @staticmethod
    def get_num_datetime(year: int, month: int, day: int, hour: int = 23, minute: int = 59, second: int = 59): ...
    @staticmethod
    def datetime_to_timestamp(dt: datetime): ...
    @staticmethod
    def timestamp_to_datetime(ts: float, timezone_offset: Optional[float] = None): ...
    @staticmethod
    def parse_datetime(time_str: str, fmt: str = '%Y-%m-%d %H:%M:%S', timezone_offset: Optional[float] = None): ...
    @staticmethod
    def add_time(dt: datetime, days: float = 0, hours: float = 0, minutes: float = 0, seconds: float = 0): ...
    @staticmethod
    def subtract_time(dt: datetime, days: float = 0, hours: float = 0, minutes: float = 0, seconds: float = 0): ...
    @staticmethod
    def time_diff(start: datetime, end: datetime, unit: str = 'seconds'): ...
    @staticmethod
    def convert_timezone(dt: datetime, to_offset: Optional[float], from_offset: Optional[float] = None): ...
    @staticmethod
    def is_leap_year(year: int): ...
    @staticmethod
    def sleep(seconds: Union[int, float]): ...
    @staticmethod
    def get_tomorrow_datetime(dt: datetime = None, timezone_offset: Optional[float] = None): ...
    @staticmethod
    def retry(max_retries: int = 3, delay: float = 1.0): ...
