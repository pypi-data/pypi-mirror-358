# Stub file for type hints

import asyncio
import threading
import time
from concurrent.futures import ThreadPoolExecutor
from typing import TypeVar
from typing import Generic
from typing import List

class WXRunnable:
    def run(self): ...

R: Any
class WXController:
    def __init__(self): ...
    def set_status(self, status: bool): ...
    def get_status(self): ...

class WXRunnableHandler:
    def __init__(self, runnable: R, controller: WXController, interval_time: float = 0.005, lock: threading.RLock = None): ...
    def loop(self): ...

class WXThreadPoolHandler:
    def __init__(self, runnable_list: List[R], interval_time: float = 0.005, max_workers: int = None, thread_name_prefix: str = ''): ...
    def set_status(self, status: bool): ...
    def get_status(self): ...

class WXAsyncRunnable:
    pass

AR: Any
class WXAsyncRunnableHandler:
    def __init__(self, runnable: AR, controller: WXController, interval_time: float = 0.005, lock: threading.RLock = None): ...

class WXAsyncLoopHandler:
    def __init__(self, runnable_list: List[AR], interval_time: float = 0.005, thread_daemon: bool = False, thread_name_prefix: str = ''): ...
    def _exec_loop(self): ...
    def set_status(self, status: bool): ...
    def get_status(self): ...
