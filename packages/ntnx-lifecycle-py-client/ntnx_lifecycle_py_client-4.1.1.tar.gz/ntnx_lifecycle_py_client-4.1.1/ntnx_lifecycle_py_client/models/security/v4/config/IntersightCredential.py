# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.security.v4.config.IntersightConnectionType import IntersightConnectionType  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.security.v4.config.KeyBasedAuth import KeyBasedAuth  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.security.v4.config.KeyBasedAuthCredential import KeyBasedAuthCredential  # noqa: F401,E501

class IntersightCredential(KeyBasedAuthCredential):

    """

    :param url: (:attr:`url`) Intersight connection url
    :type url: required
    
    
    :param deployment_type: (:attr:`deployment_type`) 
    :type deployment_type: required
    
    
    :param type: (:attr:`type`) Pre-defined type of credential.
    :type type: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'url': 'str',
        'deployment_type': 'security.v4.config.IntersightConnectionType',
        'type': 'str',
        'credential': 'security.v4.config.KeyBasedAuth',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'url': 'url',
        'deployment_type': 'deploymentType',
        'type': 'type',
        'credential': 'credential',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, url=None, deployment_type=None, type=None, credential=None, *args, **kwargs):  # noqa: E501
        KeyBasedAuthCredential.__init__(self, credential, *args, **kwargs)
        self.__url = None
        self.__deployment_type = None
        self.__type = None
        self.discriminator = None
        self.__url = url
        self.__deployment_type = deployment_type
        if type is not None:
            self.__type = type

    def _initialize_object_type(self):
        return 'security.v4.config.IntersightCredential'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def url(self):
        """
        Intersight connection url

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__url

    @url.setter
    def url(self, url):
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if url is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', url):  # noqa: E501
            raise ValueError(r"Invalid value for `url`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__url = url

    @property
    def deployment_type(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.security.v4.config.IntersightConnectionType`
        """  # noqa: E501
        return self.__deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        if deployment_type is None:
            raise ValueError("Invalid value for `deployment_type`, must not be `None`")  # noqa: E501

        self.__deployment_type = deployment_type

    @property
    def type(self):
        """
        Pre-defined type of credential.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(IntersightCredential, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntersightCredential):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

