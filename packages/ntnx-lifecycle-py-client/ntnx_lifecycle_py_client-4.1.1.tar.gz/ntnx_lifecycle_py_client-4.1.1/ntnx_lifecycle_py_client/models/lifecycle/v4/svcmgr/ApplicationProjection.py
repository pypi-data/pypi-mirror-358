# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.Application import Application  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.Service import Service  # noqa: F401,E501

class ApplicationProjection(Application):

    """

    :param name: (:attr:`name`) 
    :type name: 
    
    
    :param version: (:attr:`version`) 
    :type version: 
    
    
    :param apptype: (:attr:`apptype`) 
    :type apptype: 
    
    
    :param uuid: (:attr:`uuid`) 
    :type uuid: 
    
    
    :param cluster_uuid: (:attr:`cluster_uuid`) 
    :type cluster_uuid: 
    
    
    :param action: (:attr:`action`) 
    :type action: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param created_timestamp: (:attr:`created_timestamp`) 
    :type created_timestamp: 
    
    
    :param last_updated_timestamp: (:attr:`last_updated_timestamp`) 
    :type last_updated_timestamp: 
    
    
    :param is_inactive: (:attr:`is_inactive`) 
    :type is_inactive: 
    
    
    :param sub_services: (:attr:`sub_services`) 
    :type sub_services: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'version': 'str',
        'apptype': 'str',
        'uuid': 'str',
        'cluster_uuid': 'str',
        'action': 'str',
        'status': 'str',
        'created_timestamp': 'datetime',
        'last_updated_timestamp': 'datetime',
        'is_inactive': 'bool',
        'sub_services': 'list[lifecycle.v4.svcmgr.Service]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'apptype': 'apptype',
        'uuid': 'uuid',
        'cluster_uuid': 'clusterUuid',
        'action': 'action',
        'status': 'status',
        'created_timestamp': 'createdTimestamp',
        'last_updated_timestamp': 'lastUpdatedTimestamp',
        'is_inactive': 'isInactive',
        'sub_services': 'subServices',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, version=None, apptype=None, uuid=None, cluster_uuid=None, action=None, status=None, created_timestamp=None, last_updated_timestamp=None, is_inactive=None, sub_services=None, *args, **kwargs):  # noqa: E501
        Application.__init__(self, name, version, apptype, uuid, cluster_uuid, action, status, created_timestamp, last_updated_timestamp, is_inactive, sub_services, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'lifecycle.v4.svcmgr.ApplicationProjection'

    def _initialize_object_version(self):
        return 'v4.r1'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ApplicationProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

