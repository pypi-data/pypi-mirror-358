# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoadBalancer import LoadBalancer  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoadBalancerConfigType import LoadBalancerConfigType  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoadBalancerResourceConfig import LoadBalancerResourceConfig  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoadBalancerType import LoadBalancerType  # noqa: F401,E501

class LoadBalancerConfigObject(object):

    """Load balancer configuration of the cluster.

    :param name: (:attr:`name`) Name of the Load Balancer configuration. The name should be unique for every configuration.
    :type name: required
     min=1 chars, max=16 chars
    
    :param instances: (:attr:`instances`) 
    :type instances: required
    
    
    :param config_type: (:attr:`config_type`) 
    :type config_type: 
    
    
    :param resource_config: (:attr:`resource_config`) 
    :type resource_config: 
    
    
    :param msp_uuid: (:attr:`msp_uuid`) UUID of the MSP wanting to use this LB.
    :type msp_uuid: 
    
    
    :param type: (:attr:`type`) 
    :type type: 
    
    
    :param action: (:attr:`action`) Action to be taken on load balancer.
    :type action: 
    
    
    :param kind: (:attr:`kind`) Kind of LB such as envoyproxy etc.
    :type kind: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'instances': 'list[lifecycle.v4.svcmgr.LoadBalancer]',
        'config_type': 'lifecycle.v4.svcmgr.LoadBalancerConfigType',
        'resource_config': 'lifecycle.v4.svcmgr.LoadBalancerResourceConfig',
        'msp_uuid': 'str',
        'type': 'lifecycle.v4.svcmgr.LoadBalancerType',
        'action': 'str',
        'kind': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'instances': 'instances',
        'config_type': 'configType',
        'resource_config': 'resourceConfig',
        'msp_uuid': 'mspUuid',
        'type': 'type',
        'action': 'Action',
        'kind': 'Kind',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, instances=None, config_type=None, resource_config=None, msp_uuid=None, type=None, action=None, kind=None, *args, **kwargs):  # noqa: E501
        self.__name = None
        self.__instances = None
        self.__config_type = None
        self.__resource_config = None
        self.__msp_uuid = None
        self.__type = None
        self.__action = None
        self.__kind = None
        self.discriminator = None
        self.__name = name
        self.__instances = instances
        if config_type is not None:
            self.__config_type = config_type
        if resource_config is not None:
            self.__resource_config = resource_config
        if msp_uuid is not None:
            self.__msp_uuid = msp_uuid
        if type is not None:
            self.__type = type
        if action is not None:
            self.__action = action
        if kind is not None:
            self.__kind = kind
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'lifecycle.v4.svcmgr.LoadBalancerConfigObject'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def name(self):
        """
        Name of the Load Balancer configuration. The name should be unique for every configuration.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 16:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `16`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if name is not None and not re.search('^(([a-z]|[a-z][a-z0-9-]*[a-z0-9]))*([a-z]|[a-z][a-z0-9-]*[a-z0-9])$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^(([a-z]|[a-z][a-z0-9-]*[a-z0-9]))*([a-z]|[a-z][a-z0-9-]*[a-z0-9])$/`")  # noqa: E501

        self.__name = name

    @property
    def instances(self):
        """
        

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoadBalancer` ]
        """  # noqa: E501
        return self.__instances

    @instances.setter
    def instances(self, instances):
        if instances is None:
            raise ValueError("Invalid value for `instances`, must not be `None`")  # noqa: E501

        self.__instances = instances

    @property
    def config_type(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoadBalancerConfigType`
        """  # noqa: E501
        return self.__config_type

    @config_type.setter
    def config_type(self, config_type):

        self.__config_type = config_type

    @property
    def resource_config(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoadBalancerResourceConfig`
        """  # noqa: E501
        return self.__resource_config

    @resource_config.setter
    def resource_config(self, resource_config):

        self.__resource_config = resource_config

    @property
    def msp_uuid(self):
        """
        UUID of the MSP wanting to use this LB.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__msp_uuid

    @msp_uuid.setter
    def msp_uuid(self, msp_uuid):
        if msp_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', msp_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `msp_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__msp_uuid = msp_uuid

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoadBalancerType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def action(self):
        """
        Action to be taken on load balancer.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__action

    @action.setter
    def action(self, action):
        allowed_values = ["deploy"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self.__action = action

    @property
    def kind(self):
        """
        Kind of LB such as envoyproxy etc.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__kind

    @kind.setter
    def kind(self, kind):
        allowed_values = ["envoyproxy"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self.__kind = kind

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(LoadBalancerConfigObject, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadBalancerConfigObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

