# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.common.v1.config.IPv4Address import IPv4Address  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.IpRange import IpRange  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.VcenterLocation import VcenterLocation  # noqa: F401,E501

class ClusterNetworkConfig(object):

    """Cluster Network configuration.

    :param name: (:attr:`name`) Name of the network configuration.
    :type name: required
     min=1 chars,
    
    :param dns_servers: (:attr:`dns_servers`) List of DNS servers to be used by this configuration.
    :type dns_servers: 
    
    
    :param gateway_ip: (:attr:`gateway_ip`) 
    :type gateway_ip: 
    
    
    :param ip_ranges: (:attr:`ip_ranges`) 
    :type ip_ranges: 
    
    
    :param esx_location: (:attr:`esx_location`) 
    :type esx_location: 
    
    
    :param netmask: (:attr:`netmask`) 
    :type netmask: 
    
    
    :param network: (:attr:`network`) Network managed by the IPAM (IP address management) entity.
    :type network: required
     min=1 chars,
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'dns_servers': 'list[common.v1.config.IPv4Address]',
        'gateway_ip': 'common.v1.config.IPv4Address',
        'ip_ranges': 'list[lifecycle.v4.svcmgr.IpRange]',
        'esx_location': 'lifecycle.v4.svcmgr.VcenterLocation',
        'netmask': 'common.v1.config.IPv4Address',
        'network': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'dns_servers': 'dnsServers',
        'gateway_ip': 'gatewayIp',
        'ip_ranges': 'ipRanges',
        'esx_location': 'esxLocation',
        'netmask': 'netmask',
        'network': 'network',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, dns_servers=None, gateway_ip=None, ip_ranges=None, esx_location=None, netmask=None, network=None, *args, **kwargs):  # noqa: E501
        self.__name = None
        self.__dns_servers = None
        self.__gateway_ip = None
        self.__ip_ranges = None
        self.__esx_location = None
        self.__netmask = None
        self.__network = None
        self.discriminator = None
        self.__name = name
        if dns_servers is not None:
            self.__dns_servers = dns_servers
        if gateway_ip is not None:
            self.__gateway_ip = gateway_ip
        if ip_ranges is not None:
            self.__ip_ranges = ip_ranges
        if esx_location is not None:
            self.__esx_location = esx_location
        if netmask is not None:
            self.__netmask = netmask
        self.__network = network
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'lifecycle.v4.svcmgr.ClusterNetworkConfig'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def name(self):
        """
        Name of the network configuration.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def dns_servers(self):
        """
        List of DNS servers to be used by this configuration.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.common.v1.config.IPv4Address` ]
        """  # noqa: E501
        return self.__dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):

        self.__dns_servers = dns_servers

    @property
    def gateway_ip(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.common.v1.config.IPv4Address`
        """  # noqa: E501
        return self.__gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):

        self.__gateway_ip = gateway_ip

    @property
    def ip_ranges(self):
        """
        

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.IpRange` ]
        """  # noqa: E501
        return self.__ip_ranges

    @ip_ranges.setter
    def ip_ranges(self, ip_ranges):

        self.__ip_ranges = ip_ranges

    @property
    def esx_location(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.VcenterLocation`
        """  # noqa: E501
        return self.__esx_location

    @esx_location.setter
    def esx_location(self, esx_location):

        self.__esx_location = esx_location

    @property
    def netmask(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.common.v1.config.IPv4Address`
        """  # noqa: E501
        return self.__netmask

    @netmask.setter
    def netmask(self, netmask):

        self.__netmask = netmask

    @property
    def network(self):
        """
        Network managed by the IPAM (IP address management) entity.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__network

    @network.setter
    def network(self, network):
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501
        if network is not None and len(network) < 1:
            raise ValueError("Invalid value for `network`, length must be greater than or equal to `1`")  # noqa: E501

        self.__network = network

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ClusterNetworkConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterNetworkConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

