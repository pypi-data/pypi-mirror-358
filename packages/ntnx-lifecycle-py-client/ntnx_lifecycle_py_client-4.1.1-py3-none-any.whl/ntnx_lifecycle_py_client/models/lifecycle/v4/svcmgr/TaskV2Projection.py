# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.common.v1.config.KVPair import KVPair  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.error.AppMessage import AppMessage  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.EntityReference import EntityReference  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.OwnerReference import OwnerReference  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.TaskReferenceInternal import TaskReferenceInternal  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.TaskStatus import TaskStatus  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.TaskStep import TaskStep  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.TaskV2 import TaskV2  # noqa: F401,E501

class TaskV2Projection(TaskV2):

    """

    :param ext_id: (:attr:`ext_id`) A globally unique identifier of a task.
    :type ext_id: 
    
    
    :param msp_uuid: (:attr:`msp_uuid`) A globally unique identifier of MSP task.
    :type msp_uuid: 
    
    
    :param operation: (:attr:`operation`) The operation name being tracked by the task.
    :type operation: 
    
    
    :param operation_description: (:attr:`operation_description`) Description of the operation being tracked by the task.
    :type operation_description: 
    
    
    :param parent_task: (:attr:`parent_task`) 
    :type parent_task: 
    
    
    :param created_time: (:attr:`created_time`) UTC date and time in RFC-3339 format when the task was created.
    :type created_time: 
    
    
    :param started_time: (:attr:`started_time`) UTC date and time in RFC-3339 format when the task was started.
    :type started_time: 
    
    
    :param completed_time: (:attr:`completed_time`) UTC date and time in RFC-3339 format when the task was completed.
    :type completed_time: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param name: (:attr:`name`) 
    :type name: 
    
    
    :param type: (:attr:`type`) 
    :type type: 
    
    
    :param progress_percentage: (:attr:`progress_percentage`) Task progress expressed as a percentage.
    :type progress_percentage: 
    
     min=0, max=100
    :param entities_affected: (:attr:`entities_affected`) Reference to entities associated with the task.
    :type entities_affected: 
    
    
    :param sub_tasks: (:attr:`sub_tasks`) Reference to tasks spawned as children of the current task.
    :type sub_tasks: 
    
    
    :param sub_steps: (:attr:`sub_steps`) List of steps completed as part of the task.
    :type sub_steps: 
    
    
    :param is_cancelable: (:attr:`is_cancelable`) Signifies if the task can be cancelled.
    :type is_cancelable: 
    
    
    :param owned_by: (:attr:`owned_by`) 
    :type owned_by: 
    
    
    :param completion_details: (:attr:`completion_details`) Additional details on the task to aid the user with further actions post completion of the task.
    :type completion_details: 
    
    
    :param error_messages: (:attr:`error_messages`) Error details explaining a task failure. These would be populated only in the case of task failures.
    :type error_messages: 
    
    
    :param legacy_error_message: (:attr:`legacy_error_message`) Provides an error message in the absence of a well-defined error message for the tasks created through legacy APIs.
    :type legacy_error_message: 
    
    
    :param warnings: (:attr:`warnings`) Warning messages to alert the user of issues which did not directly cause task failure. These can be populated for any task.
    :type warnings: 
    
    
    :param last_updated_time: (:attr:`last_updated_time`) UTC date and time in RFC-3339 format when the task was last updated.
    :type last_updated_time: 
    
    
    :param cluster_ext_ids: (:attr:`cluster_ext_ids`) List of globally unique identifiers for clusters associated with the task or any of its subtasks.
    :type cluster_ext_ids: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ext_id': 'str',
        'msp_uuid': 'str',
        'operation': 'str',
        'operation_description': 'str',
        'parent_task': 'lifecycle.v4.svcmgr.TaskReferenceInternal',
        'created_time': 'str',
        'started_time': 'str',
        'completed_time': 'str',
        'status': 'lifecycle.v4.svcmgr.TaskStatus',
        'name': 'str',
        'type': 'str',
        'progress_percentage': 'int',
        'entities_affected': 'list[lifecycle.v4.svcmgr.EntityReference]',
        'sub_tasks': 'list[lifecycle.v4.svcmgr.TaskReferenceInternal]',
        'sub_steps': 'list[lifecycle.v4.svcmgr.TaskStep]',
        'is_cancelable': 'bool',
        'owned_by': 'lifecycle.v4.svcmgr.OwnerReference',
        'completion_details': 'list[common.v1.config.KVPair]',
        'error_messages': 'list[lifecycle.v4.error.AppMessage]',
        'legacy_error_message': 'str',
        'warnings': 'list[lifecycle.v4.error.AppMessage]',
        'last_updated_time': 'str',
        'cluster_ext_ids': 'list[str]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ext_id': 'extId',
        'msp_uuid': 'mspUuid',
        'operation': 'operation',
        'operation_description': 'operationDescription',
        'parent_task': 'parentTask',
        'created_time': 'createdTime',
        'started_time': 'startedTime',
        'completed_time': 'completedTime',
        'status': 'status',
        'name': 'name',
        'type': 'type',
        'progress_percentage': 'progressPercentage',
        'entities_affected': 'entitiesAffected',
        'sub_tasks': 'subTasks',
        'sub_steps': 'subSteps',
        'is_cancelable': 'isCancelable',
        'owned_by': 'ownedBy',
        'completion_details': 'completionDetails',
        'error_messages': 'errorMessages',
        'legacy_error_message': 'legacyErrorMessage',
        'warnings': 'warnings',
        'last_updated_time': 'lastUpdatedTime',
        'cluster_ext_ids': 'clusterExtIds',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ext_id=None, msp_uuid=None, operation=None, operation_description=None, parent_task=None, created_time=None, started_time=None, completed_time=None, status=None, name=None, type=None, progress_percentage=None, entities_affected=None, sub_tasks=None, sub_steps=None, is_cancelable=None, owned_by=None, completion_details=None, error_messages=None, legacy_error_message=None, warnings=None, last_updated_time=None, cluster_ext_ids=None, *args, **kwargs):  # noqa: E501
        TaskV2.__init__(self, ext_id, msp_uuid, operation, operation_description, parent_task, created_time, started_time, completed_time, status, name, type, progress_percentage, entities_affected, sub_tasks, sub_steps, is_cancelable, owned_by, completion_details, error_messages, legacy_error_message, warnings, last_updated_time, cluster_ext_ids, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'lifecycle.v4.svcmgr.TaskV2Projection'

    def _initialize_object_version(self):
        return 'v4.r1'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(TaskV2Projection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskV2Projection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

