# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.common.v1.config.IPv4Address import IPv4Address  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.BaseClientConfig import BaseClientConfig  # noqa: F401,E501

class AhvClientConfig(BaseClientConfig):

    """Ahv client configuration.

    :param prism_ip: (:attr:`prism_ip`) 
    :type prism_ip: 
    
    
    :param prism_port: (:attr:`prism_port`) Prism Element Port.
    :type prism_port: 
    
    
    :param service_name: (:attr:`service_name`) 
    :type service_name: 
    
    
    :param ca_chain: (:attr:`ca_chain`) client config CA (Certificate Authority) chain.
    :type ca_chain: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'prism_ip': 'common.v1.config.IPv4Address',
        'prism_port': 'int',
        'service_name': 'str',
        'ca_chain': 'str',
        'certificate': 'str',
        'key': 'str',
        'username': 'str',
        'password': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'prism_ip': 'prismIp',
        'prism_port': 'prismPort',
        'service_name': 'serviceName',
        'ca_chain': 'caChain',
        'certificate': 'certificate',
        'key': 'key',
        'username': 'username',
        'password': 'password',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, prism_ip=None, prism_port=None, service_name=None, ca_chain=None, certificate=None, key=None, username=None, password=None, *args, **kwargs):  # noqa: E501
        BaseClientConfig.__init__(self, certificate, key, username, password, *args, **kwargs)
        self.__prism_ip = None
        self.__prism_port = None
        self.__service_name = None
        self.__ca_chain = None
        self.discriminator = None
        if prism_ip is not None:
            self.__prism_ip = prism_ip
        if prism_port is not None:
            self.__prism_port = prism_port
        if service_name is not None:
            self.__service_name = service_name
        if ca_chain is not None:
            self.__ca_chain = ca_chain

    def _initialize_object_type(self):
        return 'lifecycle.v4.svcmgr.AhvClientConfig'

    def _initialize_object_version(self):
        return 'v4.r1'


    @property
    def prism_ip(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.common.v1.config.IPv4Address`
        """  # noqa: E501
        return self.__prism_ip

    @prism_ip.setter
    def prism_ip(self, prism_ip):

        self.__prism_ip = prism_ip

    @property
    def prism_port(self):
        """
        Prism Element Port.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__prism_port

    @prism_port.setter
    def prism_port(self, prism_port):

        self.__prism_port = prism_port

    @property
    def service_name(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__service_name

    @service_name.setter
    def service_name(self, service_name):

        self.__service_name = service_name

    @property
    def ca_chain(self):
        """
        client config CA (Certificate Authority) chain.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ca_chain

    @ca_chain.setter
    def ca_chain(self, ca_chain):

        self.__ca_chain = ca_chain

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AhvClientConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AhvClientConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

