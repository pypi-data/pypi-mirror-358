# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class History(object):

    """

    :param name: (:attr:`name`) 
    :type name: 
    
    
    :param version: (:attr:`version`) 
    :type version: 
    
    
    :param apptype: (:attr:`apptype`) 
    :type apptype: 
    
    
    :param cluster_uuid: (:attr:`cluster_uuid`) 
    :type cluster_uuid: 
    
    
    :param uuid: (:attr:`uuid`) 
    :type uuid: 
    
    
    :param parent_app_uuid: (:attr:`parent_app_uuid`) 
    :type parent_app_uuid: 
    
    
    :param action: (:attr:`action`) 
    :type action: 
    
    
    :param status: (:attr:`status`) 
    :type status: 
    
    
    :param message: (:attr:`message`) 
    :type message: 
    
    
    :param task_uuid: (:attr:`task_uuid`) 
    :type task_uuid: 
    
    
    :param created_timestamp: (:attr:`created_timestamp`) 
    :type created_timestamp: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'version': 'str',
        'apptype': 'str',
        'cluster_uuid': 'str',
        'uuid': 'str',
        'parent_app_uuid': 'str',
        'action': 'str',
        'status': 'str',
        'message': 'str',
        'task_uuid': 'str',
        'created_timestamp': 'datetime',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'apptype': 'apptype',
        'cluster_uuid': 'clusterUuid',
        'uuid': 'uuid',
        'parent_app_uuid': 'parentAppUuid',
        'action': 'action',
        'status': 'status',
        'message': 'message',
        'task_uuid': 'taskUuid',
        'created_timestamp': 'createdTimestamp',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, version=None, apptype=None, cluster_uuid=None, uuid=None, parent_app_uuid=None, action=None, status=None, message=None, task_uuid=None, created_timestamp=None, *args, **kwargs):  # noqa: E501
        self.__name = None
        self.__version = None
        self.__apptype = None
        self.__cluster_uuid = None
        self.__uuid = None
        self.__parent_app_uuid = None
        self.__action = None
        self.__status = None
        self.__message = None
        self.__task_uuid = None
        self.__created_timestamp = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if version is not None:
            self.__version = version
        if apptype is not None:
            self.__apptype = apptype
        if cluster_uuid is not None:
            self.__cluster_uuid = cluster_uuid
        if uuid is not None:
            self.__uuid = uuid
        if parent_app_uuid is not None:
            self.__parent_app_uuid = parent_app_uuid
        if action is not None:
            self.__action = action
        if status is not None:
            self.__status = status
        if message is not None:
            self.__message = message
        if task_uuid is not None:
            self.__task_uuid = task_uuid
        if created_timestamp is not None:
            self.__created_timestamp = created_timestamp
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'lifecycle.v4.svcmgr.History'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def name(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):

        self.__name = name

    @property
    def version(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__version

    @version.setter
    def version(self, version):
        if version is not None and not re.search('^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)$', version):  # noqa: E501
            raise ValueError(r"Invalid value for `version`, must be a follow pattern or equal to `/^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)$/`")  # noqa: E501

        self.__version = version

    @property
    def apptype(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__apptype

    @apptype.setter
    def apptype(self, apptype):
        allowed_values = ["Service", "Application"]  # noqa: E501
        if apptype not in allowed_values:
            raise ValueError(
                "Invalid value for `apptype` ({0}), must be one of {1}"  # noqa: E501
                .format(apptype, allowed_values)
            )

        self.__apptype = apptype

    @property
    def cluster_uuid(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        if cluster_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_uuid = cluster_uuid

    @property
    def uuid(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__uuid

    @uuid.setter
    def uuid(self, uuid):
        if uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__uuid = uuid

    @property
    def parent_app_uuid(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__parent_app_uuid

    @parent_app_uuid.setter
    def parent_app_uuid(self, parent_app_uuid):
        if parent_app_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', parent_app_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `parent_app_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__parent_app_uuid = parent_app_uuid

    @property
    def action(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__action

    @action.setter
    def action(self, action):

        self.__action = action

    @property
    def status(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def message(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__message

    @message.setter
    def message(self, message):

        self.__message = message

    @property
    def task_uuid(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__task_uuid

    @task_uuid.setter
    def task_uuid(self, task_uuid):
        if task_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', task_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `task_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__task_uuid = task_uuid

    @property
    def created_timestamp(self):
        """
        

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):

        self.__created_timestamp = created_timestamp

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(History, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, History):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

