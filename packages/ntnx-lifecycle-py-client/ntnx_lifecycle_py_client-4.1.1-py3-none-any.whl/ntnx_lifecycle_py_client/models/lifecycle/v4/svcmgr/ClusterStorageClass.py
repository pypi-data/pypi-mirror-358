# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.NutanixStorageClass import NutanixStorageClass  # noqa: F401,E501

class ClusterStorageClass(object):

    """Storage Class to be used by the cluster.

    :param name: (:attr:`name`) Unique name of the storage class. The name is used to refer to the storage class.
    :type name: required
    
    
    :param description: (:attr:`description`) 
    :type description: 
    
    
    :param mount_options: (:attr:`mount_options`) MountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. [\"ro\", \"soft\"].
    :type mount_options: 
    
    
    :param reclaim_policy: (:attr:`reclaim_policy`) Controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class.
    :type reclaim_policy: 
    
    
    :param storage_type: (:attr:`storage_type`) Storage type for the storage class. e.g. NutanixVolumes
    :type storage_type: 
    
    
    :param is_default_storage_class: (:attr:`is_default_storage_class`) Whether this storage class is marked as the default one.
    :type is_default_storage_class: 
    
    
    :param nutanix_storage_class: (:attr:`nutanix_storage_class`) 
    :type nutanix_storage_class: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'mount_options': 'str',
        'reclaim_policy': 'str',
        'storage_type': 'str',
        'is_default_storage_class': 'bool',
        'nutanix_storage_class': 'lifecycle.v4.svcmgr.NutanixStorageClass',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'mount_options': 'mountOptions',
        'reclaim_policy': 'reclaimPolicy',
        'storage_type': 'storageType',
        'is_default_storage_class': 'isDefaultStorageClass',
        'nutanix_storage_class': 'nutanixStorageClass',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, mount_options=None, reclaim_policy=None, storage_type=None, is_default_storage_class=None, nutanix_storage_class=None, *args, **kwargs):  # noqa: E501
        self.__name = None
        self.__description = None
        self.__mount_options = None
        self.__reclaim_policy = None
        self.__storage_type = None
        self.__is_default_storage_class = None
        self.__nutanix_storage_class = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        if mount_options is not None:
            self.__mount_options = mount_options
        if reclaim_policy is not None:
            self.__reclaim_policy = reclaim_policy
        if storage_type is not None:
            self.__storage_type = storage_type
        if is_default_storage_class is not None:
            self.__is_default_storage_class = is_default_storage_class
        if nutanix_storage_class is not None:
            self.__nutanix_storage_class = nutanix_storage_class
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'lifecycle.v4.svcmgr.ClusterStorageClass'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def name(self):
        """
        Unique name of the storage class. The name is used to refer to the storage class.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):

        self.__description = description

    @property
    def mount_options(self):
        """
        MountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. [\"ro\", \"soft\"].

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__mount_options

    @mount_options.setter
    def mount_options(self, mount_options):

        self.__mount_options = mount_options

    @property
    def reclaim_policy(self):
        """
        Controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__reclaim_policy

    @reclaim_policy.setter
    def reclaim_policy(self, reclaim_policy):

        self.__reclaim_policy = reclaim_policy

    @property
    def storage_type(self):
        """
        Storage type for the storage class. e.g. NutanixVolumes

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__storage_type

    @storage_type.setter
    def storage_type(self, storage_type):

        self.__storage_type = storage_type

    @property
    def is_default_storage_class(self):
        """
        Whether this storage class is marked as the default one.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_default_storage_class

    @is_default_storage_class.setter
    def is_default_storage_class(self, is_default_storage_class):

        self.__is_default_storage_class = is_default_storage_class

    @property
    def nutanix_storage_class(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.NutanixStorageClass`
        """  # noqa: E501
        return self.__nutanix_storage_class

    @nutanix_storage_class.setter
    def nutanix_storage_class(self, nutanix_storage_class):

        self.__nutanix_storage_class = nutanix_storage_class

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ClusterStorageClass, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterStorageClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

