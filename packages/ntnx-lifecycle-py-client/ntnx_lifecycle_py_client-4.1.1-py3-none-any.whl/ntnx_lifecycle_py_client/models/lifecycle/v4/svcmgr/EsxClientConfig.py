# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.common.v1.config.IPv4Address import IPv4Address  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.BaseClientConfig import BaseClientConfig  # noqa: F401,E501

class EsxClientConfig(BaseClientConfig):

    """Esx client configuration.

    :param vcenter_ip: (:attr:`vcenter_ip`) 
    :type vcenter_ip: 
    
    
    :param vcenter_port: (:attr:`vcenter_port`) Vcenter Port.
    :type vcenter_port: 
    
    
    :param extension_key: (:attr:`extension_key`) VCenter extension Key.
    :type extension_key: 
     min=1 chars,
    
    :param is_insecure: (:attr:`is_insecure`) For insecure tls connection.
    :type is_insecure: 
    
    
    :param thumb_print: (:attr:`thumb_print`) TLS certificate thumbprint.
    :type thumb_print: 
     min=1 chars,
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'vcenter_ip': 'common.v1.config.IPv4Address',
        'vcenter_port': 'int',
        'extension_key': 'str',
        'is_insecure': 'bool',
        'thumb_print': 'str',
        'certificate': 'str',
        'key': 'str',
        'username': 'str',
        'password': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'vcenter_ip': 'vcenterIp',
        'vcenter_port': 'vcenterPort',
        'extension_key': 'extensionKey',
        'is_insecure': 'isInsecure',
        'thumb_print': 'thumbPrint',
        'certificate': 'certificate',
        'key': 'key',
        'username': 'username',
        'password': 'password',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, vcenter_ip=None, vcenter_port=None, extension_key=None, is_insecure=None, thumb_print=None, certificate=None, key=None, username=None, password=None, *args, **kwargs):  # noqa: E501
        BaseClientConfig.__init__(self, certificate, key, username, password, *args, **kwargs)
        self.__vcenter_ip = None
        self.__vcenter_port = None
        self.__extension_key = None
        self.__is_insecure = None
        self.__thumb_print = None
        self.discriminator = None
        if vcenter_ip is not None:
            self.__vcenter_ip = vcenter_ip
        if vcenter_port is not None:
            self.__vcenter_port = vcenter_port
        if extension_key is not None:
            self.__extension_key = extension_key
        if is_insecure is not None:
            self.__is_insecure = is_insecure
        if thumb_print is not None:
            self.__thumb_print = thumb_print

    def _initialize_object_type(self):
        return 'lifecycle.v4.svcmgr.EsxClientConfig'

    def _initialize_object_version(self):
        return 'v4.r1'


    @property
    def vcenter_ip(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.common.v1.config.IPv4Address`
        """  # noqa: E501
        return self.__vcenter_ip

    @vcenter_ip.setter
    def vcenter_ip(self, vcenter_ip):

        self.__vcenter_ip = vcenter_ip

    @property
    def vcenter_port(self):
        """
        Vcenter Port.

        :type:
                :class:`~int`
        """  # noqa: E501
        return self.__vcenter_port

    @vcenter_port.setter
    def vcenter_port(self, vcenter_port):

        self.__vcenter_port = vcenter_port

    @property
    def extension_key(self):
        """
        VCenter extension Key.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__extension_key

    @extension_key.setter
    def extension_key(self, extension_key):
        if extension_key is not None and len(extension_key) < 1:
            raise ValueError("Invalid value for `extension_key`, length must be greater than or equal to `1`")  # noqa: E501

        self.__extension_key = extension_key

    @property
    def is_insecure(self):
        """
        For insecure tls connection.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_insecure

    @is_insecure.setter
    def is_insecure(self, is_insecure):

        self.__is_insecure = is_insecure

    @property
    def thumb_print(self):
        """
        TLS certificate thumbprint.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__thumb_print

    @thumb_print.setter
    def thumb_print(self, thumb_print):
        if thumb_print is not None and len(thumb_print) < 1:
            raise ValueError("Invalid value for `thumb_print`, length must be greater than or equal to `1`")  # noqa: E501

        self.__thumb_print = thumb_print

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(EsxClientConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EsxClientConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

