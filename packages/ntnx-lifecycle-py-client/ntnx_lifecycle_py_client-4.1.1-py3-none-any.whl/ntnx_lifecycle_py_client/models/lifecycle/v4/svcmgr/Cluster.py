# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.common.v1.config.FQDN import FQDN  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.common.v1.config.KVStringPair import KVStringPair  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClientConfig import ClientConfig  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterDeploymentType import ClusterDeploymentType  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterManagementIps import ClusterManagementIps  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterNetworkConfig import ClusterNetworkConfig  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterResourceConfig import ClusterResourceConfig  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterStorageClass import ClusterStorageClass  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterType import ClusterType  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.Config import Config  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoadBalancerConfig import LoadBalancerConfig  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoggingVolumeConfig import LoggingVolumeConfig  # noqa: F401,E501

class Cluster(ExternalizableAbstractModel):

    """A model that represents a Service Cluster for Micro Services Platform(MSP).

    :param name: (:attr:`name`) Name of the cluster.
    :type name: required
     min=1 chars, max=32 chars
    
    :param description: (:attr:`description`) Brief description about the cluster.
    :type description: 
    
    
    :param status: (:attr:`status`) The status of deployed cluster.
    :type status: 
    
    
    :param cluster_type: (:attr:`cluster_type`) 
    :type cluster_type: 
    
    
    :param domain: (:attr:`domain`) 
    :type domain: 
    
    
    :param deployment_type: (:attr:`deployment_type`) 
    :type deployment_type: 
    
    
    :param management_ips: (:attr:`management_ips`) 
    :type management_ips: 
    
    
    :param worker_configs: (:attr:`worker_configs`) 
    :type worker_configs: 
    
    
    :param control_plane_config: (:attr:`control_plane_config`) 
    :type control_plane_config: required
    
    
    :param load_balancer_configs: (:attr:`load_balancer_configs`) 
    :type load_balancer_configs: 
    
    
    :param storage_classes: (:attr:`storage_classes`) The storage class specification used for creation of volumes needed for stateful services.
    :type storage_classes: 
    
    
    :param logging_volume_config: (:attr:`logging_volume_config`) Configuration of the default volume to be attached to a node for logging purpose.
    :type logging_volume_config: 
    
    
    :param client_configs: (:attr:`client_configs`) Client spec needed for VM/Network CRUD operations.
    :type client_configs: 
    
    
    :param resource_configs: (:attr:`resource_configs`) Resource configuration list for the VM resources.
    :type resource_configs: 
    
    
    :param network_configs: (:attr:`network_configs`) Network configuration of the cluster.
    :type network_configs: 
    
    
    :param annotations: (:attr:`annotations`) Key Value pairs that can be used to customize cluster deployment configuration. Supported annotations are -   - Select storage provisioner service. Accepted values are csi/volume_provisioner.     Key: \"msp/storage/service\"     Value: \"volume_provisioner/csi\"    - Disable logging add-ons on the cluster.     Key: \"msp/logging/disable\"     Value: \"true\"    - Disable monitoring add-ons on the cluster.     Key: \"msp/monitoring/disable\"     Value: \"true\" 
    :type annotations: 
    
    
    :param controller_version: (:attr:`controller_version`) The controller version with which the cluster was deployed.
    :type controller_version: 
    
    
    :param envoy_ips: (:attr:`envoy_ips`) The envoy nodes ips.
    :type envoy_ips: 
    
    
    :param etcd_ips: (:attr:`etcd_ips`) The etcd nodes ips.
    :type etcd_ips: 
    
    
    :param external_master_ip: (:attr:`external_master_ip`) The external master ip.
    :type external_master_ip: 
    
    
    :param is_locked_down: (:attr:`is_locked_down`) Boolean value indicating if cluster is locked or not.
    :type is_locked_down: 
    
    
    :param master_ips: (:attr:`master_ips`) The control plane node ips.
    :type master_ips: 
    
    
    :param worker_ips: (:attr:`worker_ips`) The worker nodes ips.
    :type worker_ips: 
    
    
    :param version: (:attr:`version`) The version of the cluster.
    :type version: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'status': 'str',
        'cluster_type': 'lifecycle.v4.svcmgr.ClusterType',
        'domain': 'common.v1.config.FQDN',
        'deployment_type': 'lifecycle.v4.svcmgr.ClusterDeploymentType',
        'management_ips': 'lifecycle.v4.svcmgr.ClusterManagementIps',
        'worker_configs': 'list[lifecycle.v4.svcmgr.Config]',
        'control_plane_config': 'lifecycle.v4.svcmgr.Config',
        'load_balancer_configs': 'lifecycle.v4.svcmgr.LoadBalancerConfig',
        'storage_classes': 'list[lifecycle.v4.svcmgr.ClusterStorageClass]',
        'logging_volume_config': 'list[lifecycle.v4.svcmgr.LoggingVolumeConfig]',
        'client_configs': 'list[lifecycle.v4.svcmgr.ClientConfig]',
        'resource_configs': 'list[lifecycle.v4.svcmgr.ClusterResourceConfig]',
        'network_configs': 'list[lifecycle.v4.svcmgr.ClusterNetworkConfig]',
        'annotations': 'list[common.v1.config.KVStringPair]',
        'controller_version': 'str',
        'envoy_ips': 'list[str]',
        'etcd_ips': 'list[str]',
        'external_master_ip': 'str',
        'is_locked_down': 'bool',
        'master_ips': 'list[str]',
        'worker_ips': 'list[str]',
        'version': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'status': 'status',
        'cluster_type': 'clusterType',
        'domain': 'domain',
        'deployment_type': 'deploymentType',
        'management_ips': 'managementIps',
        'worker_configs': 'workerConfigs',
        'control_plane_config': 'ControlPlaneConfig',
        'load_balancer_configs': 'loadBalancerConfigs',
        'storage_classes': 'storageClasses',
        'logging_volume_config': 'loggingVolumeConfig',
        'client_configs': 'clientConfigs',
        'resource_configs': 'resourceConfigs',
        'network_configs': 'networkConfigs',
        'annotations': 'annotations',
        'controller_version': 'controllerVersion',
        'envoy_ips': 'envoyIps',
        'etcd_ips': 'etcdIps',
        'external_master_ip': 'externalMasterIp',
        'is_locked_down': 'isLockedDown',
        'master_ips': 'masterIps',
        'worker_ips': 'workerIps',
        'version': 'version',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, status=None, cluster_type=None, domain=None, deployment_type=None, management_ips=None, worker_configs=None, control_plane_config=None, load_balancer_configs=None, storage_classes=None, logging_volume_config=None, client_configs=None, resource_configs=None, network_configs=None, annotations=None, controller_version=None, envoy_ips=None, etcd_ips=None, external_master_ip=None, is_locked_down=None, master_ips=None, worker_ips=None, version=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__status = None
        self.__cluster_type = None
        self.__domain = None
        self.__deployment_type = None
        self.__management_ips = None
        self.__worker_configs = None
        self.__control_plane_config = None
        self.__load_balancer_configs = None
        self.__storage_classes = None
        self.__logging_volume_config = None
        self.__client_configs = None
        self.__resource_configs = None
        self.__network_configs = None
        self.__annotations = None
        self.__controller_version = None
        self.__envoy_ips = None
        self.__etcd_ips = None
        self.__external_master_ip = None
        self.__is_locked_down = None
        self.__master_ips = None
        self.__worker_ips = None
        self.__version = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        if status is not None:
            self.__status = status
        if cluster_type is not None:
            self.__cluster_type = cluster_type
        if domain is not None:
            self.__domain = domain
        if deployment_type is not None:
            self.__deployment_type = deployment_type
        if management_ips is not None:
            self.__management_ips = management_ips
        if worker_configs is not None:
            self.__worker_configs = worker_configs
        self.__control_plane_config = control_plane_config
        if load_balancer_configs is not None:
            self.__load_balancer_configs = load_balancer_configs
        if storage_classes is not None:
            self.__storage_classes = storage_classes
        if logging_volume_config is not None:
            self.__logging_volume_config = logging_volume_config
        if client_configs is not None:
            self.__client_configs = client_configs
        if resource_configs is not None:
            self.__resource_configs = resource_configs
        if network_configs is not None:
            self.__network_configs = network_configs
        if annotations is not None:
            self.__annotations = annotations
        if controller_version is not None:
            self.__controller_version = controller_version
        if envoy_ips is not None:
            self.__envoy_ips = envoy_ips
        if etcd_ips is not None:
            self.__etcd_ips = etcd_ips
        if external_master_ip is not None:
            self.__external_master_ip = external_master_ip
        if is_locked_down is not None:
            self.__is_locked_down = is_locked_down
        if master_ips is not None:
            self.__master_ips = master_ips
        if worker_ips is not None:
            self.__worker_ips = worker_ips
        if version is not None:
            self.__version = version

    def _initialize_object_type(self):
        return 'lifecycle.v4.svcmgr.Cluster'

    def _initialize_object_version(self):
        return 'v4.r1'


    @property
    def name(self):
        """
        Name of the cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 32:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if name is not None and not re.search('^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]))*([A-Za-z]|[A-Za-z][A-Za-z0-9-]*[A-Za-z0-9])$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]))*([A-Za-z]|[A-Za-z][A-Za-z0-9-]*[A-Za-z0-9])$/`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Brief description about the cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):

        self.__description = description

    @property
    def status(self):
        """
        The status of deployed cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def cluster_type(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterType`
        """  # noqa: E501
        return self.__cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):

        self.__cluster_type = cluster_type

    @property
    def domain(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.common.v1.config.FQDN`
        """  # noqa: E501
        return self.__domain

    @domain.setter
    def domain(self, domain):

        self.__domain = domain

    @property
    def deployment_type(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterDeploymentType`
        """  # noqa: E501
        return self.__deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):

        self.__deployment_type = deployment_type

    @property
    def management_ips(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterManagementIps`
        """  # noqa: E501
        return self.__management_ips

    @management_ips.setter
    def management_ips(self, management_ips):

        self.__management_ips = management_ips

    @property
    def worker_configs(self):
        """
        

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.Config` ]
        """  # noqa: E501
        return self.__worker_configs

    @worker_configs.setter
    def worker_configs(self, worker_configs):

        self.__worker_configs = worker_configs

    @property
    def control_plane_config(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.Config`
        """  # noqa: E501
        return self.__control_plane_config

    @control_plane_config.setter
    def control_plane_config(self, control_plane_config):
        if control_plane_config is None:
            raise ValueError("Invalid value for `control_plane_config`, must not be `None`")  # noqa: E501

        self.__control_plane_config = control_plane_config

    @property
    def load_balancer_configs(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoadBalancerConfig`
        """  # noqa: E501
        return self.__load_balancer_configs

    @load_balancer_configs.setter
    def load_balancer_configs(self, load_balancer_configs):

        self.__load_balancer_configs = load_balancer_configs

    @property
    def storage_classes(self):
        """
        The storage class specification used for creation of volumes needed for stateful services.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterStorageClass` ]
        """  # noqa: E501
        return self.__storage_classes

    @storage_classes.setter
    def storage_classes(self, storage_classes):

        self.__storage_classes = storage_classes

    @property
    def logging_volume_config(self):
        """
        Configuration of the default volume to be attached to a node for logging purpose.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.LoggingVolumeConfig` ]
        """  # noqa: E501
        return self.__logging_volume_config

    @logging_volume_config.setter
    def logging_volume_config(self, logging_volume_config):

        self.__logging_volume_config = logging_volume_config

    @property
    def client_configs(self):
        """
        Client spec needed for VM/Network CRUD operations.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClientConfig` ]
        """  # noqa: E501
        return self.__client_configs

    @client_configs.setter
    def client_configs(self, client_configs):

        self.__client_configs = client_configs

    @property
    def resource_configs(self):
        """
        Resource configuration list for the VM resources.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterResourceConfig` ]
        """  # noqa: E501
        return self.__resource_configs

    @resource_configs.setter
    def resource_configs(self, resource_configs):

        self.__resource_configs = resource_configs

    @property
    def network_configs(self):
        """
        Network configuration of the cluster.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.ClusterNetworkConfig` ]
        """  # noqa: E501
        return self.__network_configs

    @network_configs.setter
    def network_configs(self, network_configs):

        self.__network_configs = network_configs

    @property
    def annotations(self):
        """
        Key Value pairs that can be used to customize cluster deployment configuration. Supported annotations are -   - Select storage provisioner service. Accepted values are csi/volume_provisioner.     Key: \"msp/storage/service\"     Value: \"volume_provisioner/csi\"    - Disable logging add-ons on the cluster.     Key: \"msp/logging/disable\"     Value: \"true\"    - Disable monitoring add-ons on the cluster.     Key: \"msp/monitoring/disable\"     Value: \"true\" 

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.common.v1.config.KVStringPair` ]
        """  # noqa: E501
        return self.__annotations

    @annotations.setter
    def annotations(self, annotations):

        self.__annotations = annotations

    @property
    def controller_version(self):
        """
        The controller version with which the cluster was deployed.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__controller_version

    @controller_version.setter
    def controller_version(self, controller_version):

        self.__controller_version = controller_version

    @property
    def envoy_ips(self):
        """
        The envoy nodes ips.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__envoy_ips

    @envoy_ips.setter
    def envoy_ips(self, envoy_ips):

        self.__envoy_ips = envoy_ips

    @property
    def etcd_ips(self):
        """
        The etcd nodes ips.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__etcd_ips

    @etcd_ips.setter
    def etcd_ips(self, etcd_ips):

        self.__etcd_ips = etcd_ips

    @property
    def external_master_ip(self):
        """
        The external master ip.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__external_master_ip

    @external_master_ip.setter
    def external_master_ip(self, external_master_ip):

        self.__external_master_ip = external_master_ip

    @property
    def is_locked_down(self):
        """
        Boolean value indicating if cluster is locked or not.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_locked_down

    @is_locked_down.setter
    def is_locked_down(self, is_locked_down):

        self.__is_locked_down = is_locked_down

    @property
    def master_ips(self):
        """
        The control plane node ips.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__master_ips

    @master_ips.setter
    def master_ips(self, master_ips):

        self.__master_ips = master_ips

    @property
    def worker_ips(self):
        """
        The worker nodes ips.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__worker_ips

    @worker_ips.setter
    def worker_ips(self, worker_ips):

        self.__worker_ips = worker_ips

    @property
    def version(self):
        """
        The version of the cluster.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__version

    @version.setter
    def version(self, version):
        if version is not None and not re.search('^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$', version):  # noqa: E501
            raise ValueError(r"Invalid value for `version`, must be a follow pattern or equal to `/^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$/`")  # noqa: E501

        self.__version = version

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Cluster, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

