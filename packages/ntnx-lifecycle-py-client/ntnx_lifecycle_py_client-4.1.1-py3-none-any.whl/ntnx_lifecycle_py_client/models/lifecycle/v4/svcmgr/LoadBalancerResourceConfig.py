# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Management APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.common.v1.config.KVStringPair import KVStringPair  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.svcmgr.VmResourceConfig import VmResourceConfig  # noqa: F401,E501

class LoadBalancerResourceConfig(VmResourceConfig):

    """load balancer vm resource configuration.

    :param gold_image_ref: (:attr:`gold_image_ref`) Gold image name/UUID.
    :type gold_image_ref: 
    
    
    :param gold_image_version: (:attr:`gold_image_version`) OS version of the gold image.
    :type gold_image_version: 
    
    
    :param labels: (:attr:`labels`) Labels for this resource configuration. Its a key value pair of strings.
    :type labels: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'gold_image_ref': 'str',
        'gold_image_version': 'str',
        'labels': 'list[common.v1.config.KVStringPair]',
        'cpu': 'int',
        'disk_mib': 'int',
        'memory_mib': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'gold_image_ref': 'goldImageRef',
        'gold_image_version': 'goldImageVersion',
        'labels': 'labels',
        'cpu': 'cpu',
        'disk_mib': 'diskMib',
        'memory_mib': 'memoryMib',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, gold_image_ref=None, gold_image_version=None, labels=None, cpu=None, disk_mib=None, memory_mib=None, *args, **kwargs):  # noqa: E501
        VmResourceConfig.__init__(self, cpu, disk_mib, memory_mib, *args, **kwargs)
        self.__gold_image_ref = None
        self.__gold_image_version = None
        self.__labels = None
        self.discriminator = None
        if gold_image_ref is not None:
            self.__gold_image_ref = gold_image_ref
        if gold_image_version is not None:
            self.__gold_image_version = gold_image_version
        if labels is not None:
            self.__labels = labels

    def _initialize_object_type(self):
        return 'lifecycle.v4.svcmgr.LoadBalancerResourceConfig'

    def _initialize_object_version(self):
        return 'v4.r1'


    @property
    def gold_image_ref(self):
        """
        Gold image name/UUID.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__gold_image_ref

    @gold_image_ref.setter
    def gold_image_ref(self, gold_image_ref):

        self.__gold_image_ref = gold_image_ref

    @property
    def gold_image_version(self):
        """
        OS version of the gold image.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__gold_image_version

    @gold_image_version.setter
    def gold_image_version(self, gold_image_version):

        self.__gold_image_version = gold_image_version

    @property
    def labels(self):
        """
        Labels for this resource configuration. Its a key value pair of strings.

        :type:
             list[ :class:`~ntnx_lifecycle_py_client.models.common.v1.config.KVStringPair` ]
        """  # noqa: E501
        return self.__labels

    @labels.setter
    def labels(self, labels):

        self.__labels = labels

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(LoadBalancerResourceConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadBalancerResourceConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

