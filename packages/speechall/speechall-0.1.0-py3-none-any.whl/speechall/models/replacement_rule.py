# coding: utf-8

"""
    Speechall API

    The Speechall REST API provides powerful and flexible speech-to-text capabilities. It allows you to transcribe audio files using various underlying STT providers and models, optionally apply custom text replacement rules, and access results in multiple formats. The API includes standard endpoints for transcription and endpoints compatible with the OpenAI API structure. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from speechall.models.exact_rule import ExactRule
from speechall.models.regex_group_rule import RegexGroupRule
from speechall.models.regex_rule import RegexRule
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

REPLACEMENTRULE_ONE_OF_SCHEMAS = ["ExactRule", "RegexGroupRule", "RegexRule"]

class ReplacementRule(BaseModel):
    """
    Defines a single rule for finding and replacing text in a transcription. Use one of the specific rule types (`ExactRule`, `RegexRule`, `RegexGroupRule`). The `kind` property acts as a discriminator.
    """
    # data type: ExactRule
    oneof_schema_1_validator: Optional[ExactRule] = None
    # data type: RegexRule
    oneof_schema_2_validator: Optional[RegexRule] = None
    # data type: RegexGroupRule
    oneof_schema_3_validator: Optional[RegexGroupRule] = None
    if TYPE_CHECKING:
        actual_instance: Union[ExactRule, RegexGroupRule, RegexRule]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(REPLACEMENTRULE_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ReplacementRule.construct()
        error_messages = []
        match = 0
        # validate data type: ExactRule
        if not isinstance(v, ExactRule):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExactRule`")
        else:
            match += 1
        # validate data type: RegexRule
        if not isinstance(v, RegexRule):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RegexRule`")
        else:
            match += 1
        # validate data type: RegexGroupRule
        if not isinstance(v, RegexGroupRule):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RegexGroupRule`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ReplacementRule with oneOf schemas: ExactRule, RegexGroupRule, RegexRule. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ReplacementRule with oneOf schemas: ExactRule, RegexGroupRule, RegexRule. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> ReplacementRule:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> ReplacementRule:
        """Returns the object represented by the json string"""
        instance = ReplacementRule.construct()
        error_messages = []
        match = 0

        # deserialize data into ExactRule
        try:
            instance.actual_instance = ExactRule.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RegexRule
        try:
            instance.actual_instance = RegexRule.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RegexGroupRule
        try:
            instance.actual_instance = RegexGroupRule.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ReplacementRule with oneOf schemas: ExactRule, RegexGroupRule, RegexRule. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ReplacementRule with oneOf schemas: ExactRule, RegexGroupRule, RegexRule. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


