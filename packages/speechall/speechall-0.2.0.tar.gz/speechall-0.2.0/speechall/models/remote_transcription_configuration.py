# coding: utf-8

"""
    Speechall API

    The Speechall REST API provides powerful and flexible speech-to-text capabilities. It allows you to transcribe audio files using various underlying STT providers and models, optionally apply custom text replacement rules, and access results in multiple formats. The API includes standard endpoints for transcription and endpoints compatible with the OpenAI API structure. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictStr, confloat, conint, conlist, validator
from speechall.models.replacement_rule import ReplacementRule
from speechall.models.transcript_language_code import TranscriptLanguageCode
from speechall.models.transcript_output_format import TranscriptOutputFormat
from speechall.models.transcription_model_identifier import TranscriptionModelIdentifier

class RemoteTranscriptionConfiguration(BaseModel):
    """
    Configuration options for transcribing audio specified by a remote URL via the `/transcribe-remote` endpoint.  # noqa: E501
    """
    model: TranscriptionModelIdentifier = Field(...)
    language: Optional[TranscriptLanguageCode] = None
    output_format: Optional[TranscriptOutputFormat] = None
    ruleset_id: Optional[StrictStr] = Field(default=None, description="The unique identifier (UUID) of a pre-defined replacement ruleset to apply to the final transcription text.")
    punctuation: Optional[StrictBool] = Field(default=True, description="Whether to add punctuation. Support varies by model (e.g., Deepgram, AssemblyAI). Defaults to `true`.")
    timestamp_granularity: Optional[StrictStr] = Field(default='segment', description="Level of timestamp detail (`word` or `segment`). Defaults to `segment`.")
    diarization: Optional[StrictBool] = Field(default=False, description="Enable speaker diarization. Defaults to `false`.")
    initial_prompt: Optional[StrictStr] = Field(default=None, description="Optional text prompt to guide the transcription model. Support varies (e.g., OpenAI).")
    temperature: Optional[Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)]] = Field(default=None, description="Controls output randomness for supported models (e.g., OpenAI). Value between 0 and 1.")
    smart_format: Optional[StrictBool] = Field(default=None, description="Enable provider-specific smart formatting (e.g., Deepgram). Defaults vary.")
    speakers_expected: Optional[conint(strict=True, le=10, ge=1)] = Field(default=None, description="Hint for the number of expected speakers for diarization (e.g., RevAI, Deepgram).")
    custom_vocabulary: Optional[conlist(StrictStr)] = Field(default=None, description="List of custom words/phrases to improve recognition (e.g., Deepgram, AssemblyAI).")
    file_url: StrictStr = Field(default=..., description="The publicly accessible URL of the audio file to transcribe. The API server must be able to fetch the audio from this URL.")
    replacement_ruleset: Optional[conlist(ReplacementRule)] = Field(default=None, description="An array of replacement rules to be applied directly to this transcription request, in order. This allows defining rules inline instead of (or in addition to) using a pre-saved `ruleset_id`.")
    __properties = ["model", "language", "output_format", "ruleset_id", "punctuation", "timestamp_granularity", "diarization", "initial_prompt", "temperature", "smart_format", "speakers_expected", "custom_vocabulary", "file_url", "replacement_ruleset"]

    @validator('timestamp_granularity')
    def timestamp_granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('word', 'segment',):
            raise ValueError("must be one of enum values ('word', 'segment')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RemoteTranscriptionConfiguration:
        """Create an instance of RemoteTranscriptionConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in replacement_ruleset (list)
        _items = []
        if self.replacement_ruleset:
            for _item in self.replacement_ruleset:
                if _item:
                    _items.append(_item.to_dict())
            _dict['replacement_ruleset'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RemoteTranscriptionConfiguration:
        """Create an instance of RemoteTranscriptionConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RemoteTranscriptionConfiguration.parse_obj(obj)

        _obj = RemoteTranscriptionConfiguration.parse_obj({
            "model": obj.get("model"),
            "language": obj.get("language"),
            "output_format": obj.get("output_format"),
            "ruleset_id": obj.get("ruleset_id"),
            "punctuation": obj.get("punctuation") if obj.get("punctuation") is not None else True,
            "timestamp_granularity": obj.get("timestamp_granularity") if obj.get("timestamp_granularity") is not None else 'segment',
            "diarization": obj.get("diarization") if obj.get("diarization") is not None else False,
            "initial_prompt": obj.get("initial_prompt"),
            "temperature": obj.get("temperature"),
            "smart_format": obj.get("smart_format"),
            "speakers_expected": obj.get("speakers_expected"),
            "custom_vocabulary": obj.get("custom_vocabulary"),
            "file_url": obj.get("file_url"),
            "replacement_ruleset": [ReplacementRule.from_dict(_item) for _item in obj.get("replacement_ruleset")] if obj.get("replacement_ruleset") is not None else None
        })
        return _obj


