# coding: utf-8

"""
    Speechall API

    The Speechall REST API provides powerful and flexible speech-to-text capabilities. It allows you to transcribe audio files using various underlying STT providers and models, optionally apply custom text replacement rules, and access results in multiple formats. The API includes standard endpoints for transcription and endpoints compatible with the OpenAI API structure. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class RegexGroupRule(BaseModel):
    """
    Defines a replacement rule that uses regex capture groups to apply different replacements to different parts of the matched text.  # noqa: E501
    """
    kind: StrictStr = Field(default=..., description="Discriminator field identifying the rule type as 'regex_group'.")
    pattern: StrictStr = Field(default=..., description="The regular expression pattern containing capture groups `(...)`. The entire pattern must match for replacements to occur.")
    group_replacements: Dict[str, StrictStr] = Field(default=..., alias="groupReplacements", description="An object where keys are capture group numbers (as strings, e.g., \"1\", \"2\") and values are the respective replacement strings for those groups. Groups not listed are kept as matched. The entire match is reconstructed using these replacements.")
    flags: Optional[conlist(StrictStr)] = Field(default=None, description="An array of flags to modify the regex behavior.")
    __properties = ["kind", "pattern", "groupReplacements", "flags"]

    @validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('regex_group',):
            raise ValueError("must be one of enum values ('regex_group')")
        return value

    @validator('flags')
    def flags_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('i', 'm', 's', 'x', 'u',):
                raise ValueError("each list item must be one of ('i', 'm', 's', 'x', 'u')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RegexGroupRule:
        """Create an instance of RegexGroupRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RegexGroupRule:
        """Create an instance of RegexGroupRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RegexGroupRule.parse_obj(obj)

        _obj = RegexGroupRule.parse_obj({
            "kind": obj.get("kind"),
            "pattern": obj.get("pattern"),
            "group_replacements": obj.get("groupReplacements"),
            "flags": obj.get("flags")
        })
        return _obj


