# coding: utf-8

"""
    Speechall API

    The Speechall REST API provides powerful and flexible speech-to-text capabilities. It allows you to transcribe audio files using various underlying STT providers and models, optionally apply custom text replacement rules, and access results in multiple formats. The API includes standard endpoints for transcription and endpoints compatible with the OpenAI API structure. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class TranscriptionSegment(BaseModel):
    """
    Represents a time-coded segment of the transcription, typically corresponding to a phrase, sentence, or speaker turn.  # noqa: E501
    """
    start: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The start time of the segment in seconds from the beginning of the audio.")
    end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The end time of the segment in seconds from the beginning of the audio.")
    text: Optional[StrictStr] = Field(default=None, description="The transcribed text content of this segment.")
    speaker: Optional[StrictStr] = Field(default=None, description="An identifier for the speaker of this segment, present if diarization was enabled and successful.")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The model's confidence score for the transcription of this segment, typically between 0 and 1 (if provided by the model).")
    __properties = ["start", "end", "text", "speaker", "confidence"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TranscriptionSegment:
        """Create an instance of TranscriptionSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TranscriptionSegment:
        """Create an instance of TranscriptionSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TranscriptionSegment.parse_obj(obj)

        _obj = TranscriptionSegment.parse_obj({
            "start": obj.get("start"),
            "end": obj.get("end"),
            "text": obj.get("text"),
            "speaker": obj.get("speaker"),
            "confidence": obj.get("confidence")
        })
        return _obj


