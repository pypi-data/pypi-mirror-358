# coding: utf-8

"""
    Speechall API

    The Speechall REST API provides powerful and flexible speech-to-text capabilities. It allows you to transcribe audio files using various underlying STT providers and models, optionally apply custom text replacement rules, and access results in multiple formats. The API includes standard endpoints for transcription and endpoints compatible with the OpenAI API structure. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from speechall.models.transcription_detailed import TranscriptionDetailed
from speechall.models.transcription_only_text import TranscriptionOnlyText
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

TRANSCRIPTIONRESPONSE_ONE_OF_SCHEMAS = ["TranscriptionDetailed", "TranscriptionOnlyText"]

class TranscriptionResponse(BaseModel):
    """
    Represents the JSON structure returned when a JSON-based `output_format` (`json` or `json_text`) is requested. It can be either a detailed structure or a simple text-only structure.
    """
    # data type: TranscriptionDetailed
    oneof_schema_1_validator: Optional[TranscriptionDetailed] = None
    # data type: TranscriptionOnlyText
    oneof_schema_2_validator: Optional[TranscriptionOnlyText] = None
    if TYPE_CHECKING:
        actual_instance: Union[TranscriptionDetailed, TranscriptionOnlyText]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(TRANSCRIPTIONRESPONSE_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        # Check if it's a valid type for either schema
        if isinstance(v, (TranscriptionDetailed, TranscriptionOnlyText)):
            return v
        
        # If not an instance of either expected type, raise error
        error_messages = [
            f"Error! Input type `{type(v)}` is not `TranscriptionDetailed`",
            f"Error! Input type `{type(v)}` is not `TranscriptionOnlyText`"
        ]
        raise ValueError("No match found when setting `actual_instance` in TranscriptionResponse with oneOf schemas: TranscriptionDetailed, TranscriptionOnlyText. Details: " + ", ".join(error_messages))

    @classmethod
    def from_dict(cls, obj: dict) -> TranscriptionResponse:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> TranscriptionResponse:
        """Returns the object represented by the json string"""
        instance = TranscriptionResponse.construct()
        error_messages = []
        
        # Parse JSON once to avoid multiple parsing
        try:
            json_obj = json.loads(json_str)
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid JSON: {str(e)}")
        
        # Try TranscriptionDetailed first - if it has extra fields beyond id/text, prefer it
        # Check if the JSON contains fields that are specific to TranscriptionDetailed
        has_detailed_fields = any(key in json_obj for key in ['language', 'duration', 'segments', 'words', 'provider_metadata'])
        
        if has_detailed_fields:
            # Definitely should be TranscriptionDetailed
            try:
                instance.actual_instance = TranscriptionDetailed.from_json(json_str)
                return instance
            except (ValidationError, ValueError) as e:
                error_messages.append(f"TranscriptionDetailed validation failed: {str(e)}")
        
        # Try TranscriptionDetailed first (even without extra fields, it might still be the correct type)
        try:
            instance.actual_instance = TranscriptionDetailed.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(f"TranscriptionDetailed validation failed: {str(e)}")
        
        # Fall back to TranscriptionOnlyText
        try:
            instance.actual_instance = TranscriptionOnlyText.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(f"TranscriptionOnlyText validation failed: {str(e)}")

        # If we get here, neither worked
        raise ValueError("No match found when deserializing the JSON string into TranscriptionResponse with oneOf schemas: TranscriptionDetailed, TranscriptionOnlyText. Details: " + ", ".join(error_messages))

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


