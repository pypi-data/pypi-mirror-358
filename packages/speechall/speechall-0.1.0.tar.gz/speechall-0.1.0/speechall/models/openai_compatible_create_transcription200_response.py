# coding: utf-8

"""
    Speechall API

    The Speechall REST API provides powerful and flexible speech-to-text capabilities. It allows you to transcribe audio files using various underlying STT providers and models, optionally apply custom text replacement rules, and access results in multiple formats. The API includes standard endpoints for transcription and endpoints compatible with the OpenAI API structure. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

OPENAICOMPATIBLECREATETRANSCRIPTION200RESPONSE_ONE_OF_SCHEMAS = ["OpenAICreateTranscriptionResponseJson", "OpenAICreateTranscriptionResponseVerboseJson"]

class OpenaiCompatibleCreateTranscription200Response(BaseModel):
    """
    OpenaiCompatibleCreateTranscription200Response
    """
    # data type: OpenAICreateTranscriptionResponseVerboseJson
    oneof_schema_1_validator: Optional[OpenAICreateTranscriptionResponseVerboseJson] = None
    # data type: OpenAICreateTranscriptionResponseJson
    oneof_schema_2_validator: Optional[OpenAICreateTranscriptionResponseJson] = None
    if TYPE_CHECKING:
        actual_instance: Union[OpenAICreateTranscriptionResponseJson, OpenAICreateTranscriptionResponseVerboseJson]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(OPENAICOMPATIBLECREATETRANSCRIPTION200RESPONSE_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = OpenaiCompatibleCreateTranscription200Response.construct()
        error_messages = []
        match = 0
        # validate data type: OpenAICreateTranscriptionResponseVerboseJson
        if not isinstance(v, OpenAICreateTranscriptionResponseVerboseJson):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OpenAICreateTranscriptionResponseVerboseJson`")
        else:
            match += 1
        # validate data type: OpenAICreateTranscriptionResponseJson
        if not isinstance(v, OpenAICreateTranscriptionResponseJson):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OpenAICreateTranscriptionResponseJson`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in OpenaiCompatibleCreateTranscription200Response with oneOf schemas: OpenAICreateTranscriptionResponseJson, OpenAICreateTranscriptionResponseVerboseJson. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in OpenaiCompatibleCreateTranscription200Response with oneOf schemas: OpenAICreateTranscriptionResponseJson, OpenAICreateTranscriptionResponseVerboseJson. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> OpenaiCompatibleCreateTranscription200Response:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> OpenaiCompatibleCreateTranscription200Response:
        """Returns the object represented by the json string"""
        instance = OpenaiCompatibleCreateTranscription200Response.construct()
        error_messages = []
        match = 0

        # deserialize data into OpenAICreateTranscriptionResponseVerboseJson
        try:
            instance.actual_instance = OpenAICreateTranscriptionResponseVerboseJson.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OpenAICreateTranscriptionResponseJson
        try:
            instance.actual_instance = OpenAICreateTranscriptionResponseJson.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into OpenaiCompatibleCreateTranscription200Response with oneOf schemas: OpenAICreateTranscriptionResponseJson, OpenAICreateTranscriptionResponseVerboseJson. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into OpenaiCompatibleCreateTranscription200Response with oneOf schemas: OpenAICreateTranscriptionResponseJson, OpenAICreateTranscriptionResponseVerboseJson. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


