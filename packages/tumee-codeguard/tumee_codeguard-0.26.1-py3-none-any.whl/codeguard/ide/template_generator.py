"""
Gitignore template generator for intelligent template creation.
Creates templates based on workspace analysis and detected project characteristics.
"""

from pathlib import Path
from typing import Dict, List, Set

from .workspace_analyzer import WorkspaceAnalyzer, WorkspaceInfo


class GitignoreTemplateGenerator:
    """Generates intelligent gitignore templates based on workspace analysis."""

    def __init__(self, workspace_analyzer: WorkspaceAnalyzer):
        """
        Initialize template generator.

        Args:
            workspace_analyzer: WorkspaceAnalyzer instance for project detection
        """
        self.workspace_analyzer = workspace_analyzer

        # Language-specific patterns
        self.language_patterns = {
            "javascript": [
                "# Node.js dependencies",
                "node_modules/",
                "npm-debug.log*",
                "yarn-debug.log*",
                "yarn-error.log*",
                "",
                "# Production builds",
                "dist/",
                "build/",
                ".next/",
                ".nuxt/",
                ".cache/",
                "",
                "# Environment variables",
                ".env",
                ".env.local",
                ".env.*.local",
            ],
            "typescript": [
                "# TypeScript compiled output",
                "*.tsbuildinfo",
                "*.d.ts.map",
            ],
            "python": [
                "# Python bytecode",
                "__pycache__/",
                "*.py[cod]",
                "*$py.class",
                "",
                "# Virtual environments",
                "venv/",
                ".venv/",
                "env/",
                ".env/",
                "",
                "# Distribution / packaging",
                ".Python",
                "build/",
                "develop-eggs/",
                "dist/",
                "downloads/",
                "eggs/",
                ".eggs/",
                "lib/",
                "lib64/",
                "parts/",
                "sdist/",
                "var/",
                "wheels/",
                "*.egg-info/",
                ".installed.cfg",
                "*.egg",
                "",
                "# PyInstaller",
                "*.manifest",
                "*.spec",
            ],
            "rust": [
                "# Rust compilation output",
                "target/",
                "Cargo.lock",  # Only for applications, not libraries
                "",
                "# Generated by cargo",
                "**/*.rs.bk",
            ],
            "go": [
                "# Go build output",
                "*.exe",
                "*.exe~",
                "*.dll",
                "*.so",
                "*.dylib",
                "",
                "# Go test files",
                "*.test",
                "",
                "# Go coverage",
                "*.out",
                "",
                "# Go module cache",
                "go.sum",
            ],
            "java": [
                "# Java compiled class files",
                "*.class",
                "",
                "# Log files",
                "*.log",
                "",
                "# Package Files",
                "*.jar",
                "*.war",
                "*.nar",
                "*.ear",
                "*.zip",
                "*.tar.gz",
                "*.rar",
                "",
                "# Maven",
                "target/",
                "",
                "# Gradle",
                ".gradle/",
                "build/",
            ],
            "csharp": [
                "# .NET build output",
                "bin/",
                "obj/",
                "",
                "# .NET Core",
                "project.lock.json",
                "project.fragment.lock.json",
                "artifacts/",
                "",
                "# Visual Studio",
                ".vs/",
                "*.user",
                "*.userosscache",
                "*.sln.docstates",
            ],
            "php": [
                "# Composer dependencies",
                "vendor/",
                "composer.lock",
                "",
                "# Laravel",
                ".env",
                "storage/",
                "bootstrap/cache/",
            ],
            "ruby": [
                "# Ruby gems",
                "vendor/bundle/",
                ".bundle/",
                "",
                "# Ruby version files",
                ".ruby-version",
                ".ruby-gemset",
            ],
            "swift": [
                "# Xcode",
                "*.xcodeproj",
                "*.xcworkspace",
                "DerivedData/",
                "",
                "# Swift Package Manager",
                ".build/",
                "Packages/",
            ],
        }

        # Framework-specific patterns
        self.framework_patterns = {
            "react": [
                "# React build output",
                "build/",
                "",
                "# Create React App",
                ".env.local",
                ".env.development.local",
                ".env.test.local",
                ".env.production.local",
            ],
            "vue": [
                "# Vue.js build output",
                "dist/",
                "",
                "# Vue CLI",
                ".env.local",
                ".env.*.local",
            ],
            "angular": [
                "# Angular build output",
                "dist/",
                "tmp/",
                "out-tsc/",
                "",
                "# Angular dependencies",
                "node_modules/",
                "",
                "# Angular CLI",
                ".angular/cache/",
            ],
            "nextjs": [
                "# Next.js build output",
                ".next/",
                "out/",
                "",
                "# Next.js dependencies",
                ".vercel",
            ],
            "django": [
                "# Django",
                "*.log",
                "local_settings.py",
                "db.sqlite3",
                "db.sqlite3-journal",
                "",
                "# Django migrations",
                "*/migrations/*.py",
                "!*/migrations/__init__.py",
            ],
            "flask": [
                "# Flask",
                "instance/",
                ".webassets-cache",
            ],
            "rails": [
                "# Rails",
                "*.rbc",
                "capybara-*.html",
                ".rspec",
                "/log/*",
                "/tmp/*",
                "!/log/.keep",
                "!/tmp/.keep",
            ],
            "spring": [
                "# Spring Boot",
                "target/",
                "!.mvn/wrapper/maven-wrapper.jar",
                "!**/src/main/**",
                "!**/src/test/**",
            ],
            "electron": [
                "# Electron build output",
                "dist/",
                "dist-electron/",
                "",
                "# Electron cache",
                ".electron-cache/",
            ],
            "flutter": [
                "# Flutter build output",
                "build/",
                "",
                "# Flutter dependencies",
                ".dart_tool/",
                ".flutter-plugins",
                ".flutter-plugins-dependencies",
                ".packages",
                ".pub-cache/",
                ".pub/",
            ],
        }

        # Build tool patterns
        self.build_tool_patterns = {
            "webpack": [
                "# Webpack build output",
                "dist/",
                ".cache/",
            ],
            "vite": [
                "# Vite build output",
                "dist/",
                ".vite/",
            ],
            "rollup": [
                "# Rollup build output",
                "dist/",
            ],
            "parcel": [
                "# Parcel build output",
                "dist/",
                ".parcel-cache/",
            ],
            "maven": [
                "# Maven",
                "target/",
                "pom.xml.tag",
                "pom.xml.releaseBackup",
                "pom.xml.versionsBackup",
                "pom.xml.next",
                "release.properties",
                "dependency-reduced-pom.xml",
                "buildNumber.properties",
                ".mvn/timing.properties",
                ".mvn/wrapper/maven-wrapper.jar",
            ],
            "gradle": [
                "# Gradle",
                ".gradle/",
                "build/",
                "!gradle/wrapper/gradle-wrapper.jar",
                "!**/src/main/**",
                "!**/src/test/**",
            ],
        }

        # Common base patterns that apply to most projects
        self.base_patterns = [
            "# IDE files",
            ".vscode/",
            ".idea/",
            "*.swp",
            "*.swo",
            "*~",
            "",
            "# OS generated files",
            ".DS_Store",
            ".DS_Store?",
            "._*",
            ".Spotlight-V100",
            ".Trashes",
            "ehthumbs.db",
            "Thumbs.db",
            "",
            "# Temporary files",
            "*.tmp",
            "*.temp",
            "*.bak",
            "*.backup",
            "",
            "# Logs",
            "*.log",
            "logs/",
            "",
            "# Environment variables",
            ".env",
            ".env.local",
            "",
            "# Coverage reports",
            "coverage/",
            "*.lcov",
            ".nyc_output/",
            "",
            "# Cache directories",
            ".cache/",
            "tmp/",
            "temp/",
        ]

        # Test-specific patterns
        self.test_patterns = [
            "# Test results",
            "test-results/",
            "junit.xml",
            "coverage.xml",
            "",
            "# Test artifacts",
            "screenshots/",
            "videos/",
        ]

        # Documentation patterns
        self.doc_patterns = [
            "# Documentation build output",
            "docs/_build/",
            "site/",
            ".docusaurus/",
        ]

    async def generate_template(self, workspace_path: Path, context: str = "template") -> str:
        """
        Generate intelligent gitignore template based on workspace analysis.

        Args:
            workspace_path: Path to workspace root
            context: Context hint ("template", "default", "detected")

        Returns:
            Generated gitignore template as string
        """
        if context == "default":
            return self._generate_default_template()

        # Analyze workspace to detect project characteristics
        workspace_info = await self.workspace_analyzer.analyze_workspace(workspace_path)

        if context == "detected":
            return self._generate_detected_template(workspace_info)

        # Generate comprehensive template based on analysis
        return self._generate_comprehensive_template(workspace_info)

    def _generate_default_template(self) -> str:
        """Generate a generic default template."""
        template_lines = [
            "# General gitignore template",
            "# See https://git-scm.com/docs/gitignore",
            "",
        ]

        # Add base patterns
        template_lines.extend(self.base_patterns)

        return "\n".join(template_lines)

    def _generate_detected_template(self, workspace_info: WorkspaceInfo) -> str:
        """Generate template based only on detected technologies."""
        template_lines = [
            "# Gitignore template for detected project type",
            f"# Project type: {workspace_info.project_type}",
            f"# Languages: {', '.join(sorted(workspace_info.languages))}",
            f"# Frameworks: {', '.join(sorted(workspace_info.frameworks))}",
            "",
        ]

        # Add language-specific patterns
        for language in sorted(workspace_info.languages):
            if language in self.language_patterns:
                template_lines.extend(self.language_patterns[language])
                template_lines.append("")

        # Add framework-specific patterns
        for framework in sorted(workspace_info.frameworks):
            if framework in self.framework_patterns:
                template_lines.extend(self.framework_patterns[framework])
                template_lines.append("")

        # Add build tool patterns
        for tool in sorted(workspace_info.build_tools):
            if tool in self.build_tool_patterns:
                template_lines.extend(self.build_tool_patterns[tool])
                template_lines.append("")

        return "\n".join(template_lines)

    def _generate_comprehensive_template(self, workspace_info: WorkspaceInfo) -> str:
        """Generate comprehensive template with all relevant patterns."""
        template_lines = [
            "# Comprehensive gitignore template",
            f"# Generated for {workspace_info.project_type} project",
            "",
            "# Project information:",
            f"# Languages: {', '.join(sorted(workspace_info.languages)) if workspace_info.languages else 'None detected'}",
            f"# Frameworks: {', '.join(sorted(workspace_info.frameworks)) if workspace_info.frameworks else 'None detected'}",
            f"# Build tools: {', '.join(sorted(workspace_info.build_tools)) if workspace_info.build_tools else 'None detected'}",
            f"# Package managers: {', '.join(sorted(workspace_info.package_managers)) if workspace_info.package_managers else 'None detected'}",
            "",
        ]

        # Add dependencies section
        if (
            workspace_info.languages & {"javascript", "typescript"}
            or "npm" in workspace_info.package_managers
        ):
            template_lines.extend(
                [
                    "# Dependencies",
                    "node_modules/",
                    "npm-debug.log*",
                    "yarn-debug.log*",
                    "yarn-error.log*",
                    "pnpm-debug.log*",
                    "",
                ]
            )

        if "python" in workspace_info.languages:
            template_lines.extend(
                [
                    "# Python dependencies",
                    "__pycache__/",
                    "*.py[cod]",
                    "*$py.class",
                    "venv/",
                    ".venv/",
                    "env/",
                    ".env/",
                    "",
                ]
            )

        # Add language-specific patterns
        for language in sorted(workspace_info.languages):
            if language in self.language_patterns:
                template_lines.extend([f"# {language.title()} specific"])
                template_lines.extend(self.language_patterns[language])
                template_lines.append("")

        # Add framework-specific patterns
        if workspace_info.frameworks:
            template_lines.append("# Framework specific")
            for framework in sorted(workspace_info.frameworks):
                if framework in self.framework_patterns:
                    template_lines.extend(self.framework_patterns[framework])
                    template_lines.append("")

        # Add build tool patterns
        if workspace_info.build_tools:
            template_lines.append("# Build tools")
            for tool in sorted(workspace_info.build_tools):
                if tool in self.build_tool_patterns:
                    template_lines.extend(self.build_tool_patterns[tool])
                    template_lines.append("")

        # Add test patterns if tests detected
        if workspace_info.has_tests:
            template_lines.extend(self.test_patterns)
            template_lines.append("")

        # Add documentation patterns if docs detected
        if workspace_info.has_docs:
            template_lines.extend(self.doc_patterns)
            template_lines.append("")

        # Add base patterns (IDE, OS, etc.)
        template_lines.extend(self.base_patterns)

        # Add IDE-specific patterns if detected
        if workspace_info.ides:
            template_lines.extend(["", "# IDE specific (detected in workspace)"])
            for ide in sorted(workspace_info.ides):
                if ide == "vscode":
                    template_lines.extend(
                        [
                            "# VS Code",
                            ".vscode/settings.json",
                            ".vscode/tasks.json",
                            ".vscode/launch.json",
                            ".vscode/extensions.json",
                            "!.vscode/settings.json.example",
                        ]
                    )
                elif ide == "intellij":
                    template_lines.extend(
                        [
                            "# IntelliJ IDEA",
                            ".idea/",
                            "*.iws",
                            "*.iml",
                            "*.ipr",
                        ]
                    )

        # Clean up extra newlines
        while template_lines and template_lines[-1] == "":
            template_lines.pop()

        return "\n".join(template_lines)
