# coding: utf-8


"""
IGNORE:
    Nutanix IAM Versioned APIs

    Nutanix APIs for managing users, user-groups, directory services, identity providers, roles and authorization policies.  # noqa: E501

    OpenAPI spec version: 4.1.1-beta-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ntnx_iam_py_client.api_client import ApiClient


class CertificateAuthenticationProvidersApi(object):
    """IGNORE:
    NOTE: A placeholder for class level description
    IGNORE
    """  # noqa: E501

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()

        self.api_client = api_client
        self.__headers_to_skip = { 'authorization', 'cookie', 'host', 'user-agent' }

    def create_cert_auth_provider(self, clientCaChain, caCertFileName, isCertAuthEnabled, name, isCacEnabled, dirSvcExtID=None, certRevocationInfo=None, createdBy=None, tenantId=None, createdTime=None, links=None, lastUpdatedTime=None, extId=None, **kwargs):  # noqa: E501
        """Create certificate-based authentication provider

        >>> response = api.create_cert_auth_provider(clientCaChain, caCertFileName, isCertAuthEnabled, name, isCacEnabled, (optional) dirSvcExtID, (optional) certRevocationInfo, (optional) createdBy, (optional) tenantId, (optional) createdTime, (optional) links, (optional) lastUpdatedTime, (optional) extId)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.create_cert_auth_provider(clientCaChain, caCertFileName, isCertAuthEnabled, name, isCacEnabled, async_req=True)
        >>> result = thread.get()

        :param clientCaChain: 
        :type clientCaChain:
            :class:`str`, required
        :param caCertFileName: 
        :type caCertFileName:
            :class:`str`, required
        :param isCertAuthEnabled: 
        :type isCertAuthEnabled:
            :class:`bool`, required
        :param name: 
        :type name:
            :class:`str`, required
        :param isCacEnabled: 
        :type isCacEnabled:
            :class:`bool`, required
        :param dirSvcExtID: 
        :type dirSvcExtID:
            :class:`str`
        :param certRevocationInfo: 
        :type certRevocationInfo:
            :class:`iam.v4.authn.CertRevocationInfo`
        :param createdBy: 
        :type createdBy:
            :class:`str`
        :param tenantId: 
        :type tenantId:
            :class:`str`
        :param createdTime: 
        :type createdTime:
            :class:`datetime`
        :param links: 
        :type links:

        :param lastUpdatedTime: 
        :type lastUpdatedTime:
            :class:`datetime`
        :param extId: 
        :type extId:
            :class:`str`
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_iam_py_client.models.iam.v4.authn.CreateCertAuthProviderApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']

        # verify the required parameter 'clientCaChain' is set
        if ('clientCaChain' not in params or params['clientCaChain'] is None):
            raise ValueError("Missing the required parameter `clientCaChain` when calling `create_cert_auth_provider`")  # noqa: E501
        # verify the required parameter 'caCertFileName' is set
        if ('caCertFileName' not in params or params['caCertFileName'] is None):
            raise ValueError("Missing the required parameter `caCertFileName` when calling `create_cert_auth_provider`")  # noqa: E501
        # verify the required parameter 'isCertAuthEnabled' is set
        if ('isCertAuthEnabled' not in params or params['isCertAuthEnabled'] is None):
            raise ValueError("Missing the required parameter `isCertAuthEnabled` when calling `create_cert_auth_provider`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_cert_auth_provider`")  # noqa: E501
        # verify the required parameter 'isCacEnabled' is set
        if ('isCacEnabled' not in params or params['isCacEnabled'] is None):
            raise ValueError("Missing the required parameter `isCacEnabled` when calling `create_cert_auth_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client._select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501
        if 'Content-Type' in params and params.get('Content-Type') is not None:
            header_params['Content-Type'] = params.get('Content-Type')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['clientCaChain', 'caCertFileName', 'isCertAuthEnabled', 'name', 'isCacEnabled', 'dirSvcExtID', 'certRevocationInfo', 'createdBy', 'tenantId', 'createdTime', 'links', 'lastUpdatedTime', 'extId'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}
        if 'clientCaChain' in params and params['clientCaChain'] is not None:
            form_params.append(('clientCaChain', params['clientCaChain']))  # noqa: E501
        if 'dirSvcExtID' in params and params['dirSvcExtID'] is not None:
            form_params.append(('dirSvcExtID', params['dirSvcExtID']))  # noqa: E501
        if 'certRevocationInfo' in params and params['certRevocationInfo'] is not None:
            form_params.append(('certRevocationInfo', params['certRevocationInfo']))  # noqa: E501
        if 'caCertFileName' in params and params['caCertFileName'] is not None:
            form_params.append(('caCertFileName', params['caCertFileName']))  # noqa: E501
        if 'isCertAuthEnabled' in params and params['isCertAuthEnabled'] is not None:
            form_params.append(('isCertAuthEnabled', params['isCertAuthEnabled']))  # noqa: E501
        if 'createdBy' in params and params['createdBy'] is not None:
            form_params.append(('createdBy', params['createdBy']))  # noqa: E501
        if 'tenantId' in params and params['tenantId'] is not None:
            form_params.append(('tenantId', params['tenantId']))  # noqa: E501
        if 'name' in params and params['name'] is not None:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'createdTime' in params and params['createdTime'] is not None:
            form_params.append(('createdTime', params['createdTime']))  # noqa: E501
        if 'links' in params and params['links'] is not None:
            form_params.append(('links', params['links']))  # noqa: E501
            collection_formats['links'] = 'multi'  # noqa: E501
        if 'isCacEnabled' in params and params['isCacEnabled'] is not None:
            form_params.append(('isCacEnabled', params['isCacEnabled']))  # noqa: E501
        if 'lastUpdatedTime' in params and params['lastUpdatedTime'] is not None:
            form_params.append(('lastUpdatedTime', params['lastUpdatedTime']))  # noqa: E501
        if 'extId' in params and params['extId'] is not None:
            form_params.append(('extId', params['extId']))  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/iam/v4.1.b1/authn/cert-auth-providers', 'POST',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='iam.v4.authn.CreateCertAuthProviderApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/iam/v4.1.b1/authn/cert-auth-providers', 'POST',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='iam.v4.authn.CreateCertAuthProviderApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            pass

    def delete_cert_auth_provider_by_id(self, extId, **kwargs):  # noqa: E501
        """Delete certificate-based authentication provider

        >>> response = api.delete_cert_auth_provider_by_id(extId)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.delete_cert_auth_provider_by_id(extId, async_req=True)
        >>> result = thread.get()

        :param extId: UUID V5 created for the certificate-based authentication provider.
        :type extId:
            :class:`str`, required
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_iam_py_client.models.iam.v4.authn.DeleteCertAuthProviderApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']

        # verify the required parameter 'extId' is set
        if ('extId' not in params or params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `delete_cert_auth_provider_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params and params['extId'] is not None:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['extId'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/iam/v4.1.b1/authn/cert-auth-providers/{extId}', 'DELETE',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='iam.v4.authn.DeleteCertAuthProviderApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/iam/v4.1.b1/authn/cert-auth-providers/{extId}', 'DELETE',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='iam.v4.authn.DeleteCertAuthProviderApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            pass

    def get_cert_auth_provider_by_id(self, extId, **kwargs):  # noqa: E501
        """Get certificate-based authentication provider

        >>> response = api.get_cert_auth_provider_by_id(extId)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.get_cert_auth_provider_by_id(extId, async_req=True)
        >>> result = thread.get()

        :param extId: UUID V5 created for the certificate-based authentication provider.
        :type extId:
            :class:`str`, required
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_iam_py_client.models.iam.v4.authn.GetCertAuthProviderApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']

        # verify the required parameter 'extId' is set
        if ('extId' not in params or params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `get_cert_auth_provider_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params and params['extId'] is not None:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['extId'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/iam/v4.1.b1/authn/cert-auth-providers/{extId}', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='iam.v4.authn.GetCertAuthProviderApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/iam/v4.1.b1/authn/cert-auth-providers/{extId}', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='iam.v4.authn.GetCertAuthProviderApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            pass

    def list_cert_auth_providers(self, _page=None, _limit=None, **kwargs):  # noqa: E501
        """List certificate-based authentication providers

        >>> response = api.list_cert_auth_providers((optional) _page, (optional) _limit)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.list_cert_auth_providers(async_req=True)
        >>> result = thread.get()

        :param _page: A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results. 
        :type _page:
            :class:`int`
        :param _limit: A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set. 
        :type _limit:
            :class:`int`
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_iam_py_client.models.iam.v4.authn.ListCertAuthProvidersApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']


        collection_formats = {}

        path_params = {}

        query_params = []
        if '_page' in params and params['_page'] is not None:
            query_params.append(('$page', params['_page']))  # noqa: E501
        if '_limit' in params and params['_limit'] is not None:
            query_params.append(('$limit', params['_limit']))  # noqa: E501

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['_page', '_limit'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/iam/v4.1.b1/authn/cert-auth-providers', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='iam.v4.authn.ListCertAuthProvidersApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/iam/v4.1.b1/authn/cert-auth-providers', 'GET',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='iam.v4.authn.ListCertAuthProvidersApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            pass

    def update_cert_auth_provider_by_id(self, extId, clientCaChain=None, dirSvcExtID=None, certRevocationInfo=None, caCertFileName=None, isCertAuthEnabled=None, createdBy=None, tenantId=None, name=None, createdTime=None, links=None, isCacEnabled=None, lastUpdatedTime=None, extId2=None, **kwargs):  # noqa: E501
        """Update certificate-based authentication provider

        >>> response = api.update_cert_auth_provider_by_id(extId, (optional) clientCaChain, (optional) dirSvcExtID, (optional) certRevocationInfo, (optional) caCertFileName, (optional) isCertAuthEnabled, (optional) createdBy, (optional) tenantId, (optional) name, (optional) createdTime, (optional) links, (optional) isCacEnabled, (optional) lastUpdatedTime, (optional) extId2)

        This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True.

        >>> thread = api.update_cert_auth_provider_by_id(extId, async_req=True)
        >>> result = thread.get()

        :param extId: UUID V5 created for the certificate-based authentication provider.
        :type extId:
            :class:`str`, required
        :param clientCaChain: 
        :type clientCaChain:
            :class:`str`
        :param dirSvcExtID: 
        :type dirSvcExtID:
            :class:`str`
        :param certRevocationInfo: 
        :type certRevocationInfo:
            :class:`iam.v4.authn.CertRevocationInfo`
        :param caCertFileName: 
        :type caCertFileName:
            :class:`str`
        :param isCertAuthEnabled: 
        :type isCertAuthEnabled:
            :class:`bool`
        :param createdBy: 
        :type createdBy:
            :class:`str`
        :param tenantId: 
        :type tenantId:
            :class:`str`
        :param name: 
        :type name:
            :class:`str`
        :param createdTime: 
        :type createdTime:
            :class:`datetime`
        :param links: 
        :type links:

        :param isCacEnabled: 
        :type isCacEnabled:
            :class:`bool`
        :param lastUpdatedTime: 
        :type lastUpdatedTime:
            :class:`datetime`
        :param extId2: 
        :type extId2:
            :class:`str`
        :param kwargs: kwargs for the method.
                       The following can be passed for an asynchronous HTTP call::

                           async_req=True
        :return: An instance of class :class:`~ntnx_iam_py_client.models.iam.v4.authn.UpdateCertAuthProviderApiResponse`.

                 If the method is called asynchronously, returns the request thread.
        """ # noqa: E501
        kwargs['_return_http_data_only'] = True

        params = dict(locals())
        for key, val in six.iteritems(params['kwargs']):
            params[key] = val
        del params['kwargs']
        del params['self']

        # verify the required parameter 'extId' is set
        if ('extId' not in params or params['extId'] is None):
            raise ValueError("Missing the required parameter `extId` when calling `update_cert_auth_provider_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extId' in params and params['extId'] is not None:
            path_params['extId'] = params['extId']  # noqa: E501

        query_params = []

        header_params = {}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client._select_header_accept(
            ['application/json'])  # noqa: E501
        if 'Accept' in params and params.get('Accept') is not None:
            header_params['Accept'] = params.get('Accept')

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client._select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501
        if 'Content-Type' in params and params.get('Content-Type') is not None:
            header_params['Content-Type'] = params.get('Content-Type')

        # Process operation specific headers
        extra_params = []
        extra_params.append('async_req')
        extra_params.append('_return_http_data_only')
        extra_params.append('_preload_content')
        extra_params.append('_request_timeout')
        all_params = set(['extId', 'clientCaChain', 'dirSvcExtID', 'certRevocationInfo', 'caCertFileName', 'isCertAuthEnabled', 'createdBy', 'tenantId', 'name', 'createdTime', 'links', 'isCacEnabled', 'lastUpdatedTime', 'extId2'])
        all_params.update(extra_params)
        for key, val in six.iteritems(params):
            if val is not None and key.lower() not in self.__headers_to_skip and key not in all_params:
                if key.lower() == 'if_match'.lower():
                    key = 'If-Match'
                elif key.lower() == 'if_none_match'.lower():
                    key = 'If-None-Match'
                header_params[key] = val

        form_params = []
        local_var_files = {}
        if 'clientCaChain' in params and params['clientCaChain'] is not None:
            form_params.append(('clientCaChain', params['clientCaChain']))  # noqa: E501
        if 'dirSvcExtID' in params and params['dirSvcExtID'] is not None:
            form_params.append(('dirSvcExtID', params['dirSvcExtID']))  # noqa: E501
        if 'certRevocationInfo' in params and params['certRevocationInfo'] is not None:
            form_params.append(('certRevocationInfo', params['certRevocationInfo']))  # noqa: E501
        if 'caCertFileName' in params and params['caCertFileName'] is not None:
            form_params.append(('caCertFileName', params['caCertFileName']))  # noqa: E501
        if 'isCertAuthEnabled' in params and params['isCertAuthEnabled'] is not None:
            form_params.append(('isCertAuthEnabled', params['isCertAuthEnabled']))  # noqa: E501
        if 'createdBy' in params and params['createdBy'] is not None:
            form_params.append(('createdBy', params['createdBy']))  # noqa: E501
        if 'tenantId' in params and params['tenantId'] is not None:
            form_params.append(('tenantId', params['tenantId']))  # noqa: E501
        if 'name' in params and params['name'] is not None:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'createdTime' in params and params['createdTime'] is not None:
            form_params.append(('createdTime', params['createdTime']))  # noqa: E501
        if 'links' in params and params['links'] is not None:
            form_params.append(('links', params['links']))  # noqa: E501
            collection_formats['links'] = 'multi'  # noqa: E501
        if 'isCacEnabled' in params and params['isCacEnabled'] is not None:
            form_params.append(('isCacEnabled', params['isCacEnabled']))  # noqa: E501
        if 'lastUpdatedTime' in params and params['lastUpdatedTime'] is not None:
            form_params.append(('lastUpdatedTime', params['lastUpdatedTime']))  # noqa: E501
        if 'extId2' in params and params['extId2'] is not None:
            form_params.append(('extId', params['extId2']))  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuthScheme', 'basicAuthScheme']  # noqa: E501

        body_params = None

        try:
            if kwargs.get('async_req'):
                return self.api_client._call_api(
                    '/api/iam/v4.1.b1/authn/cert-auth-providers/{extId}', 'PUT',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='iam.v4.authn.UpdateCertAuthProviderApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
            else:
                (data) = self.api_client._call_api(
                    '/api/iam/v4.1.b1/authn/cert-auth-providers/{extId}', 'PUT',
                    path_params,
                    query_params,
                    header_params,
                    body=body_params,
                    post_params=form_params,
                    files=local_var_files,
                    response_type='iam.v4.authn.UpdateCertAuthProviderApiResponse',  # noqa: E501
                    auth_settings=auth_settings,
                    async_req=params.get('async_req'),
                    _return_http_data_only=params.get('_return_http_data_only'),
                    _preload_content=params.get('_preload_content', True),
                    _request_timeout=params.get('_request_timeout'),
                    collection_formats=collection_formats)
                return data
        finally:
            pass
