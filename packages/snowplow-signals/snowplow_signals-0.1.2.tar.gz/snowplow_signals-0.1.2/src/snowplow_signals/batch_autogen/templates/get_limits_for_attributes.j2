{% raw %}{#
Copyright (c) 2025-present Snowplow Analytics Ltd. All rights reserved.
This program is licensed to you under the Snowplow Personal and Academic License Version 1.0,
and you may not use this file except in compliance with the Snowplow Personal and Academic License Version 1.0.
You may obtain a copy of the Snowplow Personal and Academic License Version 1.0 at https://docs.snowplow.io/personal-and-academic-license-1.0/
#}

{% macro get_limits_for_attributes() %}

{# upper limit only applies to last n day aggregates in case the user does not want to include current date in the aggregations #}
{# lower limit is only implemented for reducing unnecessary scans in case there are only last n day aggregate attributes #}
  
  {% set limits_query %}
  
    with base as (
      
      select
        '{{ var('snowplow__start_date', '2025-01-01') }}' as lower_limit,
        coalesce(max(event_date), '{{ var('snowplow__start_date', '2025-01-01') }}') as upper_limit
        
      from {{ ref('{% endraw %}{{ project_name }}{% raw %}_daily_aggregates') }}
      
      group by 1
    )
    
    , upper_limit_changes as (
      
      select
        lower_limit,
        {% if not var('snowplow__include_current_day_in_windows', false) %} 
          case when upper_limit = current_date then {{dbt.dateadd('day', -1, "'"~upper_limit~"'")}} else upper_limit end as upper_limit
        {% else %}
          upper_limit
        {% endif %}
        
      from base
    )
    
    select
      lower_limit,
      upper_limit

    from upper_limit_changes

  {% endset %}

  {% set limit_results = run_query(limits_query)%}

  {% if execute %}
    {% if limit_results|length == 0  %}
      {{ exceptions.raise_compiler_error("Error: No limits returned") }}
    {% else %}
      {% set lower_limit = "'"~limit_results.columns[0].values()[0]~"'" %}
      {% set upper_limit = "'"~limit_results.columns[1].values()[0]~"'" %}
      {{ log(this.table ~ ": processing daily events between " ~ lower_limit ~ " and " ~ upper_limit, info=write_limits_to_stdout) }}
      {{ return([lower_limit, upper_limit]) }}
    {% endif %}
  {% else%}
    {{ return(['','']) }}
  {% endif %}

{% endmacro %}
{% endraw %}
