# This file was generated by Codebase-Generator, do not edit directly
"""
Responses component for Recipe Executor.
Provides OpenAI Responses API integration via PydanticAI.
"""

import logging
import os
from typing import Optional

from pydantic_ai.models.openai import OpenAIResponsesModel


def get_openai_responses_model(
    logger: logging.Logger,
    model_name: Optional[str] = None,
) -> OpenAIResponsesModel:
    """
    Create an OpenAIResponsesModel for the given model name.

    Args:
        logger (logging.Logger): Logger for logging messages.
        model_name: Name of the model (e.g., "gpt-4o").

    Returns:
        OpenAIResponsesModel: A PydanticAI OpenAIResponsesModel instance.

    Raises:
        ValueError: If required environment variables are missing or model_name is not provided.
        Exception: If the model cannot be created.
    """
    # Load environment variables
    default_model = os.environ.get("DEFAULT_MODEL")
    api_key = os.environ.get("OPENAI_API_KEY")

    # Helper to mask secrets for logging
    def mask_secret(val: Optional[str]) -> str:
        if not val:
            return ""
        if len(val) <= 2:
            return "*" * len(val)
        return val[0] + "*" * (len(val) - 2) + val[-1]

    masked_key = mask_secret(api_key)
    logger.debug(f"Loaded environment variables: DEFAULT_MODEL={default_model}, OPENAI_API_KEY={masked_key!r}")

    if not api_key:
        logger.error("OPENAI_API_KEY environment variable is not set")
        raise ValueError("Missing OPENAI_API_KEY environment variable")

    # Determine which model to use
    chosen_model = model_name or default_model
    if not chosen_model:
        logger.error("Model name not provided and DEFAULT_MODEL is not set")
        raise ValueError("Model name must be provided or set via DEFAULT_MODEL environment variable")

    logger.info(f"Using OpenAI Responses model: {chosen_model}")

    try:
        # Instantiate the OpenAIResponsesModel
        responses_model = OpenAIResponsesModel(chosen_model)
    except Exception as e:
        logger.error("Failed to create OpenAIResponsesModel for model %s: %s", chosen_model, e, exc_info=True)
        raise
    return responses_model
