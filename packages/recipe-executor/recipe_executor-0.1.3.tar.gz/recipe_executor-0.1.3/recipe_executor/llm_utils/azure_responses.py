# This file was generated by Codebase-Generator, do not edit directly
"""
Azure Responses Component
Provides Azure OpenAI Responses API integration for PydanticAI Agents.
"""

import logging
import os
from typing import Optional

from azure.identity import DefaultAzureCredential, get_bearer_token_provider
from openai import AsyncAzureOpenAI
from pydantic_ai.models.openai import OpenAIResponsesModel
from pydantic_ai.providers.openai import OpenAIProvider


def _mask_secret(secret: str) -> str:
    """Mask all but first and last character of a secret."""
    if not secret or len(secret) < 2:
        return "**"
    return f"{secret[0]}***{secret[-1]}"


def get_azure_responses_model(
    logger: logging.Logger,
    model_name: str,
    deployment_name: Optional[str] = None,
) -> OpenAIResponsesModel:
    """
    Create a PydanticAI OpenAIResponsesModel for Azure OpenAI

    Args:
        logger: Logger for logging messages.
        model_name: Name of the model (e.g., "gpt-4o").
        deployment_name: Azure deployment name. Defaults to model_name or AZURE_OPENAI_DEPLOYMENT_NAME.

    Returns:
        Configured OpenAIResponsesModel for Azure.

    Raises:
        ValueError: If required environment variables are missing or invalid.
        Exception: On failures initializing the Azure client or model.
    """
    try:
        # Load environment variables
        base_url = os.getenv("AZURE_OPENAI_BASE_URL")
        api_version = os.getenv("AZURE_OPENAI_API_VERSION", "2025-03-01-preview")
        api_key = os.getenv("AZURE_OPENAI_API_KEY")
        use_managed = os.getenv("AZURE_USE_MANAGED_IDENTITY", "false").lower() == "true"
        client_id = os.getenv("AZURE_CLIENT_ID")
        env_deploy = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME")

        # Validate base URL
        if not base_url:
            raise ValueError("AZURE_OPENAI_BASE_URL must be set for Azure OpenAI integration.")
        # Determine deployment name
        deployment = deployment_name or env_deploy or model_name

        # Log loaded configuration (mask secrets)
        logger.debug(
            "Azure OpenAI config: use_managed=%s, api_key=%s, client_id=%s, base_url=%s, api_version=%s, deployment=%s",
            use_managed,
            _mask_secret(api_key) if api_key else None,
            client_id,
            base_url,
            api_version,
            deployment,
        )

        # Initialize Azure OpenAI client
        if use_managed:
            # Use Azure AD for authentication
            logger.info("Authenticating to Azure OpenAI with Managed Identity.")
            # sync credential required
            cred_kwargs = {}
            if client_id:
                cred_kwargs["managed_identity_client_id"] = client_id
            credential = DefaultAzureCredential(**cred_kwargs)
            # default scope for Cognitive Services
            scope = "https://cognitiveservices.azure.com/.default"
            token_provider = get_bearer_token_provider(credential, scope)
            azure_client = AsyncAzureOpenAI(
                azure_endpoint=base_url,
                api_version=api_version,
                azure_ad_token_provider=token_provider,
            )
            auth_method = "ManagedIdentity"
        else:
            # Use API key
            if not api_key:
                raise ValueError("AZURE_OPENAI_API_KEY must be set when not using managed identity.")
            logger.info("Authenticating to Azure OpenAI with API Key.")
            azure_client = AsyncAzureOpenAI(
                azure_endpoint=base_url,
                api_version=api_version,
                api_key=api_key,
            )
            auth_method = "ApiKey"

        # Create Responses model
        model = OpenAIResponsesModel(
            deployment,
            provider=OpenAIProvider(openai_client=azure_client),
        )
        logger.info(
            "Created Azure Responses model '%s' (deployment='%s') using auth=%s.",
            model_name,
            deployment,
            auth_method,
        )
        return model

    except Exception as e:
        logger.debug("Failed to create Azure Responses model: %s", e, exc_info=True)
        raise
