# This file was generated by Codebase-Generator, do not edit directly
"""
Models for Recipe Executor system.

Defines Pydantic models for file specifications, step configurations, and recipe structures.
"""

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class FileSpec(BaseModel):
    """Represents a single file to be generated.

    Attributes:
        path: Relative path where the file should be written.
        content: The content of the file, which can be:
            - A string for text content.
            - A dict for structured content.
            - A list of dicts for multiple structured outputs.
    """

    path: str = Field(..., description="Relative file path to write to")
    content: Union[str, Dict[str, Any], List[Dict[str, Any]]] = Field(..., description="Content of the file")


class ReadFilesConfig(BaseModel):
    """Configuration for a 'read_files' recipe step."""

    path: str = Field(..., description="File path to read")
    content_key: str = Field(..., description="Key under which the file content will be stored in context")


class McpServer(BaseModel):
    """Definition of an MCP server for LLM generation steps."""

    command: str = Field(..., description="Command to start the MCP server")
    args: List[str] = Field(..., description="List of arguments for the command")
    env: Optional[Dict[str, str]] = Field(None, description="Environment variables mapping")


class LLMGenerateConfig(BaseModel):
    """Configuration for a 'llm_generate' recipe step."""

    prompt: str = Field(..., description="Prompt template for the language model")
    model: Optional[str] = Field(None, description="Language model identifier to use")
    output_format: Optional[str] = Field(None, description="Format of the output, e.g., 'files'")
    output_key: Optional[str] = Field(None, description="Key under which to store the output in context")
    mcp_servers: Optional[List[McpServer]] = Field(None, description="List of MCP server definitions")


class WriteFilesConfig(BaseModel):
    """Configuration for a 'write_files' recipe step."""

    files_key: str = Field(..., description="Context key containing the list of files to write")
    root: Optional[str] = Field(None, description="Root directory for writing files")


class RecipeStep(BaseModel):
    """A single step in a recipe.

    Attributes:
        type: The type of the recipe step (e.g., 'read_files', 'llm_generate', 'write_files').
        config: Configuration for the step, validated against known step config models or left as a dict for unknown types.
    """

    type: str = Field(..., description="Type of the recipe step")
    config: Dict[str, Any] = Field(..., description="Step configuration")


class Recipe(BaseModel):
    """A complete recipe with multiple steps.

    Attributes:
        steps: A list of steps defining the recipe.
        env_vars: Optional list of environment variable names this recipe requires.
    """

    steps: List[RecipeStep] = Field(..., description="Ordered list of recipe steps")
    env_vars: Optional[List[str]] = Field(None, description="Environment variables required by the recipe")


__all__ = [
    "FileSpec",
    "ReadFilesConfig",
    "McpServer",
    "LLMGenerateConfig",
    "WriteFilesConfig",
    "RecipeStep",
    "Recipe",
]
