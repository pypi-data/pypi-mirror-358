# This file is autogenerated by maturin v1.7.4
# To update, run
#
#    maturin generate-ci github --platform all
#
# Edited to:
# - build using binary bindings
# - extract the binaries from the wheel
# - upload both the wheel and the binary to the release
# - disable some platforms 

name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:


permissions:
  contents: write

env:
  PROJECT_NAME: "nc-gcode-interpreter"
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install Python linter
        run: pip install ruff
      - name: Lint Python code with ruff
        run: ruff check .

  linux-x64:
    needs: [lint]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
        python-version: ["3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Update Cargo.toml Version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting version to $VERSION"
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-py${{ matrix.python-version }}-${{ github.sha }}
          path: dist

  test:
    needs: [linux-x64]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-latest-x86_64-py${{ matrix.python-version }}-${{ github.sha }}
          path: dist
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install py_opw_kinematics
        shell: bash
        run: |
          set -e  # Exit on error
          PY_VERSION="${{ matrix.python-version }}"
          PY_VERSION_NO_DOT="${PY_VERSION//./}"
          WHL_FILES=(dist/*cp${PY_VERSION_NO_DOT}*.whl)
          if [ ${#WHL_FILES[@]} -eq 0 ]; then
            echo "No matching wheel files found!"
            exit 1
          fi
          if [ ${#WHL_FILES[@]} -gt 1 ]; then
            echo "Multiple wheel files found: ${WHL_FILES[*]}"
            exit 1
          fi
          pip install "${WHL_FILES[0]}[test]"
      - name: Run tests with pytest
        run: pytest
      - name: Type checking with mypy
        run: mypy python
  linux:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [lint, test]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          # - runner: ubuntu-latest
          #   target: x86
          - runner: ubuntu-latest
            target: aarch64
        python-version: ["3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Update Cargo.toml Version
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          set -e  # Exit on error
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting version to $VERSION"
          if ! sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml; then
            echo "Failed to update version in Cargo.toml"
            exit 1
          fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-py${{ matrix.python-version }}-${{ github.sha }}
          path: dist

  windows:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [lint, test]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
        python-version: ["3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.platform.target }}
      - name: Update Cargo.toml Version
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          try {
            $VERSION = $env:GITHUB_REF -replace 'refs/tags/v',''
            Write-Host "Setting version to $VERSION"

            # Read Cargo.toml as UTF-8
            $path = Resolve-Path Cargo.toml
            $content = [System.IO.File]::ReadAllText($path, [System.Text.Encoding]::UTF8)

            # Update version using multiline regex to match "version ="
            $newContent = $content -replace '(?m)^\s*version\s*=\s*".*"', "version = `"$VERSION`""

            if ($newContent -eq $content) {
                throw "Version pattern not found in Cargo.toml"
            }

            # Write back with UTF-8 encoding
            [System.IO.File]::WriteAllText($path, $newContent, [System.Text.Encoding]::UTF8)
            Write-Host "Cargo.toml version updated successfully."
          }
          catch {
            Write-Error "Failed to update version in Cargo.toml: $_"
            exit 1
          }

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-py${{ matrix.python-version }}-${{ github.sha }}
          path: dist

  macos:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [lint, test]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-latest
            target: x86_64
          - runner: macos-latest
            target: aarch64
        python-version: ["3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Update Cargo.toml Version
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          set -e  # Exit on error
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting version to $VERSION"
          if ! sed -i '' "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml; then
            echo "Failed to update version in Cargo.toml"
            exit 1
          fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-py${{ matrix.python-version }}-${{ github.sha }}
          path: dist

  sdist:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Update Cargo.toml Version
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          set -e  # Exit on error
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting version to $VERSION"
          if ! sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml; then
            echo "Failed to update version in Cargo.toml"
            exit 1
          fi
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, linux-x64, windows, macos, sdist]
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'dist/*'
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*
      - name: Prepare release assets
        run: |
          mkdir release-assets
          cp dist/*.tar.gz release-assets/
          cp dist/*.whl release-assets/
          # Remove any duplicate files based on their content
          cd release-assets
          for f in *.whl; do
            if [ -f "$f" ]; then
              # Keep only one copy of each unique file
              sha256sum "$f" | sort -u | while read -r sum file; do
                others=$(sha256sum * | grep "$sum" | cut -d' ' -f2- | grep -v "^$file$" || true)
                for other in $others; do
                  rm -f "$other"
                done
              done
            fi
          done
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          fail_on_unmatched_files: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
