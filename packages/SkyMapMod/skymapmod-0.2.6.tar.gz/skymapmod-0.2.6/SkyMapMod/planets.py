from astropy.coordinates import get_body, Galactic
from astropy.time import Time
import ephem
import numpy as np

from .zodiac import convolution, integral
from .albedo_of_planets import venus_alb_wl, venus_alb_rf, mars_alb_wl, mars_alb_rf, jupiter_alb_wl, jupiter_alb_rf, saturn_alb_wl, saturn_alb_rf
from .solar_spectrum import wavelenght_newguey2003, flux_newguey2003
from .band_V_data import wavelenght_band_V, trancparency_band_V


def coordinates_of_planet(body, date, time): #'mars', 'venus', 'saturn', 'jupyter'; 2023-11-03; 12:00:00; return galactic coordinates of planet
    """
    Вычисляет галактические координаты указанной планеты на заданную дату и время.

    Функция принимает название планеты, дату и время, преобразует их в объект времени,
    вычисляет положение планеты с использованием эфемерид и возвращает её галактические 
    координаты (долготу l и широту b).

    Параметры:
        body (str): Название планеты. Допустимые значения: 'mars', 'venus', 'saturn', 'jupiter'.
        date (str): Дата в формате 'YYYY-MM-DD' (например, '2023-11-03').
        time (str): Время в формате 'HH:MM:SS' (например, '12:00:00').

    Возвращает:
        tuple: Кортеж из двух значений:
            - l (float): Галактическая долгота планеты (в градусах).
            - b (float): Галактическая широта планеты (в градусах).

    Примечания:
        - Для вычисления положения планеты используется библиотека `astropy`:
            - `get_body`: Получает положение планеты в экваториальной системе координат.
            - `transform_to(Galactic)`: Преобразует координаты в галактическую систему.
        - Эфемериды берутся из встроенного набора данных (`ephemeris='builtin'`).
        - Результат возвращается в градусах, так как метод `.value` извлекает числовое значение углов.
    """
    datetime = date + ' ' + time
    time = Time(datetime)
    planet = get_body(body, time, ephemeris='builtin').transform_to(Galactic)
    l = planet.l.value
    b = planet.b.value
    return(l, b)

    
def magnitude_of_planet(body, date, time): #'mars', 'venus', 'saturn', 'jupiter'; 2023-11-03; 12:00:00';
    """
    Вычисляет видимую звездную величину указанной планеты на заданную дату и время.

    Функция принимает название планеты, дату и время наблюдения, использует библиотеку `ephem`
    для расчета положения планеты и возвращает её видимую звездную величину (magnitude).

    Параметры:
        body (str): Название планеты. Допустимые значения: 'venus', 'mars', 'jupiter', 'saturn'.
        date (str): Дата наблюдения в формате 'YYYY-MM-DD' (например, '2023-11-03').
        time (str): Время наблюдения в формате 'HH:MM:SS' (например, '12:00:00'). 
                    В текущей реализации параметр time не используется, так как библиотека `ephem` 
                    автоматически учитывает время при вычислениях.

    Возвращает:
        magnitude (float): Видимая звездная величина планеты (magnitude). Чем меньше значение, тем ярче объект.

    Примечания:
        - Для расчетов используется библиотека `ephem`, которая моделирует движение небесных тел.
        - Дата преобразуется из формата 'YYYY-MM-DD' в формат 'YYYY/MM/DD', так как это требование библиотеки `ephem`.
        - Видимая звездная величина (magnitude) зависит от положения планеты относительно Земли и Солнца.
        - Если планета не указана в списке допустимых значений ('venus', 'mars', 'jupiter', 'saturn'),
          функция вызовет ошибку.


    Зависимости:
        - `ephem`: Библиотека для астрономических расчетов.
          Установка: `pip install ephem`
    """
    if body == 'venus':
        planet = ephem.Venus()
    elif body == 'mars':
        planet = ephem.Mars()
    elif body == 'jupiter':
        planet = ephem.Jupiter()
    elif body == 'saturn':
        planet = ephem.Saturn()
        
    # Устанавливаем дату наблюдения
    date = date.replace('-', '/')

    planet.compute(date)
    magnitude = planet.mag
    return magnitude

def mag_to_phot(mag): #в полосе V
    """
    Пересчитывает звездную величину (magnitude) в поток фотонов в полосе V, используя эталонную звезду 10-й звездной величины.

    Функция использует формулу Погсона для пересчета звездной величины в поток фотонов.
    Звезда 10-й звездной величины в полосе V имеет эталонный поток F0 = 10^2 фот / (см^2 сек).

    Параметры:
        mag (float): Звездная величина (magnitude) объекта в полосе V.

    Возвращает:
        F1 (float): Поток фотонов в единицах фот / (м^2 сек).

    Примечания:
        - Формула Погсона: F = F0 * 10^(0.4 * (10 - mag)),
          где F0 — поток фотонов для звезды 10-й звездной величины.
        - В данной реализации F0 = 10^2 фот / (см^2 сек).
        - Результат переводится из фот / (см^2 сек) в фот / (м^2 сек) умножением на 10^4.
        - Полоса V соответствует видимому диапазону спектра (визуальная звездная величина).
        - Деление на 4π (для перехода к стерадианам) не выполняется, так как это зависит от контекста использования.
    """
    F0 = 10**2
    F1 = F0 * 10 ** (0.4 * (10 - mag)) # фот / (см^2 сек)
    F1 = F1 * 10**4 * 10**(-2) #/ на метр квадратный от бина
    return F1


def venus_spectrum(date, time, Sun_sp_wl = wavelenght_newguey2003, Sun_sp_fx = flux_newguey2003, albedo_wl = venus_alb_wl, albedo_rf = venus_alb_rf, V_wl = wavelenght_band_V, V_tr = trancparency_band_V):
    """
    Вычисляет спектр Венеры на основе заданных даты и времени наблюдения.

    Функция использует спектр альбедо Венеры, солнечный спектр и полосу пропускания V 
    для вычисления нормированного спектра планеты. Нормировка производится так, чтобы 
    интегральная яркость в полосе V соответствовала видимой звездной величине Венеры на 
    указанную дату и время.

    Параметры:
        date (str): Дата наблюдения в формате 'YYYY-MM-DD' (например, '2023-11-03').
        time (str): Время наблюдения в формате 'HH:MM:SS' (например, '12:00:00').
        Sun_sp_wl (ndarray, optional): Массив длин волн солнечного спектра (в нм). 
                                           По умолчанию используется `wavelenght_newguey2003`.
        Sun_sp_fx (ndarray, optional): Массив значений солнечного спектра (в фот / (сек м^2 нм)).
                                           По умолчанию используется `flux_newguey2003`.
        albedo_wl (ndarray, optional): Массив длин волн спектра альбедо Венеры (в нм).
                                           По умолчанию используется `venus_alb_wl`.
        albedo_rf (ndarray, optional): Массив значений спектра альбедо Венеры.
                                           По умолчанию используется `venus_alb_rf`.
        V_wl (ndarray, optional): Массив длин волн полосы пропускания V (в нм).
                                     По умолчанию используется `wavelenght_band_V`.
        V_tr (ndarray, optional): Массив значений прозрачности полосы пропускания V.
                                     По умолчанию используется `trancparency_band_V`.

    Возвращает:
        tuple: Кортеж из двух массивов:
            - planet_wl (ndarray): Массив длин волн спектра планеты (в нм).
            - planet_sp (ndarray): Массив значений спектра планеты (в фот / (сек ср м^2 нм)).

    Примечания:
        - Спектр планеты вычисляется как свертка спектра альбедо планеты с солнечным спектром.
        - Нормировка спектра производится так, чтобы интегральная яркость в полосе V 
          соответствовала видимой звездной величине планеты, вычисленной с помощью 
          функции `magnitude_of_planet`.
        - Пользователь может задать свои спектры вместо стандартных данных.

    Зависимости:
        - `convolution`: Функция для свертки спектров.
        - `integral`: Функция для численного интегрирования.
        - `magnitude_of_planet`: Функция для вычисления видимой звездной величины планеты.
        - `mag_to_phot`: Функция для пересчета звездной величины в поток фотонов.
    """
    body = 'venus'
    planet_wl, planet_sp = convolution(albedo_wl, albedo_rf, Sun_sp_wl, Sun_sp_fx) #вот тут получили спектр планеты
    planet_V_wl, planet_V_sp = convolution(planet_wl, planet_sp, V_wl, V_tr) #свернули с полосой V, фот / (сек ср м^2 нм)

    norm = integral(planet_V_wl, planet_V_sp) # фот / (сек ср м^2)
    
    #делаем так, чтобы эта норма была равна F1
    mag = magnitude_of_planet(body, date, time)
    N = 0.992 #посчитано отдельно по аналогии с зодиакальным светом. Референсная звезда: коэфф = 1, планета: 0.992
    F1 = mag_to_phot(mag) * N
    A = F1 / norm
    planet_sp = A * planet_sp
    
    #########################################################################
#     planet_V_wl, planet_V_sp = convolution(planet_wl, planet_sp, V_wl, V_tr)
#     integr = integral(planet_V_wl, planet_V_sp)
#     print('Техническая проверка на совпадение двух чисел:', integr, F1)
    #########################################################################
    
    return planet_wl, planet_sp

def mars_spectrum(date, time, Sun_sp_wl = wavelenght_newguey2003, Sun_sp_fx = flux_newguey2003, albedo_wl = mars_alb_wl, albedo_rf = mars_alb_rf, V_wl = wavelenght_band_V, V_tr = trancparency_band_V):
    """
    Вычисляет спектр Марса на основе заданных даты и времени наблюдения.

    Функция использует спектр альбедо Марса, солнечный спектр и полосу пропускания V 
    для вычисления нормированного спектра планеты. Нормировка производится так, чтобы 
    интегральная яркость в полосе V соответствовала видимой звездной величине Марса на 
    указанную дату и время.

    Параметры:
        date (str): Дата наблюдения в формате 'YYYY-MM-DD' (например, '2023-11-03').
        time (str): Время наблюдения в формате 'HH:MM:SS' (например, '12:00:00').
        Sun_sp_wl (ndarray, optional): Массив длин волн солнечного спектра (в нм). 
                                           По умолчанию используется `wavelenght_newguey2003`.
        Sun_sp_fx (ndarray, optional): Массив значений солнечного спектра (в фот / (сек м^2 нм)).
                                           По умолчанию используется `flux_newguey2003`.
        albedo_wl (ndarray, optional): Массив длин волн спектра альбедо Марса (в нм).
                                           По умолчанию используется `mars_alb_wl`.
        albedo_rf (ndarray, optional): Массив значений спектра альбедо Марса.
                                           По умолчанию используется `mars_alb_rf`.
        V_wl (ndarray, optional): Массив длин волн полосы пропускания V (в нм).
                                     По умолчанию используется `wavelenght_band_V`.
        V_tr (ndarray, optional): Массив значений прозрачности полосы пропускания V.
                                     По умолчанию используется `trancparency_band_V`.

    Возвращает:
        tuple: Кортеж из двух массивов:
            - planet_wl (ndarray): Массив длин волн спектра планеты (в нм).
            - planet_sp (ndarray): Массив значений спектра планеты (в фот / (сек ср м^2 нм)).

    Примечания:
        - Спектр планеты вычисляется как свертка спектра альбедо планеты с солнечным спектром.
        - Нормировка спектра производится так, чтобы интегральная яркость в полосе V 
          соответствовала видимой звездной величине планеты, вычисленной с помощью 
          функции `magnitude_of_planet`.
        - Пользователь может задать свои спектры вместо стандартных данных.

    Зависимости:
        - `convolution`: Функция для свертки спектров.
        - `integral`: Функция для численного интегрирования.
        - `magnitude_of_planet`: Функция для вычисления видимой звездной величины планеты.
        - `mag_to_phot`: Функция для пересчета звездной величины в поток фотонов.
    """
    body = 'mars'
    planet_wl, planet_sp = convolution(albedo_wl, albedo_rf, Sun_sp_wl, Sun_sp_fx) #вот тут получили спектр планеты
    planet_V_wl, planet_V_sp = convolution(planet_wl, planet_sp, V_wl, V_tr) #свернули с полосой V, фот / (сек ср м^2 нм)

    norm = integral(planet_V_wl, planet_V_sp) # фот / (сек ср м^2)
    
    #делаем так, чтобы эта норма была равна F1
    mag = magnitude_of_planet(body, date, time)
    N = 0.975 #посчитано отдельно по аналогии с зодиакальным светом. Референсная звезда: коэфф = 1, планета: 0.975
    F1 = mag_to_phot(mag) * N
    A = F1 / norm
    planet_sp = A * planet_sp
    
    #########################################################################
#     planet_V_wl, planet_V_sp = convolution(planet_wl, planet_sp, V_wl, V_tr)
#     integr = integral(planet_V_wl, planet_V_sp)
#     print('Техническая проверка на совпадение двух чисел:', integr, F1)
    #########################################################################
    
    return planet_wl, planet_sp

def jupiter_spectrum(date, time, Sun_sp_wl = wavelenght_newguey2003, Sun_sp_fx = flux_newguey2003, albedo_wl = jupiter_alb_wl, albedo_rf = jupiter_alb_rf, V_wl = wavelenght_band_V, V_tr = trancparency_band_V):
    """
    Вычисляет спектр Юпитера на основе заданных даты и времени наблюдения.

    Функция использует спектр альбедо Юпитера, солнечный спектр и полосу пропускания V 
    для вычисления нормированного спектра планеты. Нормировка производится так, чтобы 
    интегральная яркость в полосе V соответствовала видимой звездной величине Юпитера на 
    указанную дату и время.

    Параметры:
        date (str): Дата наблюдения в формате 'YYYY-MM-DD' (например, '2023-11-03').
        time (str): Время наблюдения в формате 'HH:MM:SS' (например, '12:00:00').
        Sun_sp_wl (ndarray, optional): Массив длин волн солнечного спектра (в нм). 
                                           По умолчанию используется `wavelenght_newguey2003`.
        Sun_sp_fx (ndarray, optional): Массив значений солнечного спектра (в фот / (сек м^2 нм)).
                                           По умолчанию используется `flux_newguey2003`.
        albedo_wl (ndarray, optional): Массив длин волн спектра альбедо Юпитера (в нм).
                                           По умолчанию используется `jupiter_alb_wl`.
        albedo_rf (ndarray, optional): Массив значений спектра альбедо Юпитера.
                                           По умолчанию используется `jupiter_alb_rf`.
        V_wl (ndarray, optional): Массив длин волн полосы пропускания V (в нм).
                                     По умолчанию используется `wavelenght_band_V`.
        V_tr (ndarray, optional): Массив значений прозрачности полосы пропускания V.
                                     По умолчанию используется `trancparency_band_V`.

    Возвращает:
        tuple: Кортеж из двух массивов:
            - planet_wl (ndarray): Массив длин волн спектра планеты (в нм).
            - planet_sp (ndarray): Массив значений спектра планеты (в фот / (сек ср м^2 нм)).

    Примечания:
        - Спектр планеты вычисляется как свертка спектра альбедо планеты с солнечным спектром.
        - Нормировка спектра производится так, чтобы интегральная яркость в полосе V 
          соответствовала видимой звездной величине планеты, вычисленной с помощью 
          функции `magnitude_of_planet`.
        - Пользователь может задать свои спектры вместо стандартных данных.

    Зависимости:
        - `convolution`: Функция для свертки спектров.
        - `integral`: Функция для численного интегрирования.
        - `magnitude_of_planet`: Функция для вычисления видимой звездной величины планеты.
        - `mag_to_phot`: Функция для пересчета звездной величины в поток фотонов.
    """
    body = 'jupiter'
    planet_wl, planet_sp = convolution(albedo_wl, albedo_rf, Sun_sp_wl, Sun_sp_fx) #вот тут получили спектр планеты
    planet_V_wl, planet_V_sp = convolution(planet_wl, planet_sp, V_wl, V_tr) #свернули с полосой V, фот / (сек ср м^2 нм)

    norm = integral(planet_V_wl, planet_V_sp) # фот / (сек ср м^2)
    
    #делаем так, чтобы эта норма была равна F1
    mag = magnitude_of_planet(body, date, time)
    N = 0.993 #посчитано отдельно по аналогии с зодиакальным светом. Референсная звезда: коэфф = 1, планета: 0.993
    F1 = mag_to_phot(mag) * N
    A = F1 / norm
    planet_sp = A * planet_sp
    
    #########################################################################
#     planet_V_wl, planet_V_sp = convolution(planet_wl, planet_sp, V_wl, V_tr)
#     integr = integral(planet_V_wl, planet_V_sp)
#     print('Техническая проверка на совпадение двух чисел:', integr, F1)
    #########################################################################
    
    return planet_wl, planet_sp

def saturn_spectrum(date, time, Sun_sp_wl = wavelenght_newguey2003, Sun_sp_fx = flux_newguey2003, albedo_wl = saturn_alb_wl, albedo_rf = saturn_alb_rf, V_wl = wavelenght_band_V, V_tr = trancparency_band_V):
    """
    Вычисляет спектр Сатурна на основе заданных даты и времени наблюдения.

    Функция использует спектр альбедо Сатурна, солнечный спектр и полосу пропускания V 
    для вычисления нормированного спектра планеты. Нормировка производится так, чтобы 
    интегральная яркость в полосе V соответствовала видимой звездной величине Сатурна на 
    указанную дату и время.

    Параметры:
        date (str): Дата наблюдения в формате 'YYYY-MM-DD' (например, '2023-11-03').
        time (str): Время наблюдения в формате 'HH:MM:SS' (например, '12:00:00').
        Sun_sp_wl (ndarray, optional): Массив длин волн солнечного спектра (в нм). 
                                           По умолчанию используется `wavelenght_newguey2003`.
        Sun_sp_fx (ndarray, optional): Массив значений солнечного спектра (в фот / (сек м^2 нм)).
                                           По умолчанию используется `flux_newguey2003`.
        albedo_wl (ndarray, optional): Массив длин волн спектра альбедо Сатурна (в нм).
                                           По умолчанию используется `saturn_alb_wl`.
        albedo_rf (ndarray, optional): Массив значений спектра альбедо Сатурна.
                                           По умолчанию используется `saturn_alb_rf`.
        V_wl (ndarray, optional): Массив длин волн полосы пропускания V (в нм).
                                     По умолчанию используется `wavelenght_band_V`.
        V_tr (ndarray, optional): Массив значений прозрачности полосы пропускания V.
                                     По умолчанию используется `trancparency_band_V`.

    Возвращает:
        tuple: Кортеж из двух массивов:
            - planet_wl (ndarray): Массив длин волн спектра планеты (в нм).
            - planet_sp (ndarray): Массив значений спектра планеты (в фот / (сек ср м^2 нм)).

    Примечания:
        - Спектр планеты вычисляется как свертка спектра альбедо планеты с солнечным спектром.
        - Нормировка спектра производится так, чтобы интегральная яркость в полосе V 
          соответствовала видимой звездной величине планеты, вычисленной с помощью 
          функции `magnitude_of_planet`.
        - Пользователь может задать свои спектры вместо стандартных данных.

    Зависимости:
        - `convolution`: Функция для свертки спектров.
        - `integral`: Функция для численного интегрирования.
        - `magnitude_of_planet`: Функция для вычисления видимой звездной величины планеты.
        - `mag_to_phot`: Функция для пересчета звездной величины в поток фотонов.
    """
    body = 'saturn'
    planet_wl, planet_sp = convolution(albedo_wl, albedo_rf, Sun_sp_wl, Sun_sp_fx) #вот тут получили спектр планеты
    planet_V_wl, planet_V_sp = convolution(planet_wl, planet_sp, V_wl, V_tr) #свернули с полосой V, фот / (сек ср м^2 нм)

    norm = integral(planet_V_wl, planet_V_sp) # фот / (сек ср м^2)
    
    #делаем так, чтобы эта норма была равна F1
    mag = magnitude_of_planet(body, date, time)
    N = 0.989 #посчитано отдельно по аналогии с зодиакальным светом. Референсная звезда: коэфф = 1, планета: 0.989
    F1 = mag_to_phot(mag) * N
    A = F1 / norm
    planet_sp = A * planet_sp
    
    #########################################################################
#     planet_V_wl, planet_V_sp = convolution(planet_wl, planet_sp, V_wl, V_tr)
#     integr = integral(planet_V_wl, planet_V_sp)
#     print('Техническая проверка на совпадение двух чисел:', integr, F1)
    #########################################################################
    
    return planet_wl, planet_sp
    
# Внутри основной функции: если планета попадает в поле зрения (через coordinates_of_planet(.....)),
# ищем ее спектр venus_spectrum(.....)
    
    