# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class ScenarioStatsTuple(object):

    """Tuple value of timestamp and CPU/Memory/Storage resource usage, capacity, and effective capacity.

    :param timestamp: (:attr:`timestamp`) Timestamp of a WhatIf Scenario statistic attribute data point.
    :type timestamp: 
    
    
    :param cpu_usage_ghz: (:attr:`cpu_usage_ghz`) Usage of CPU resources in Ghz.
    :type cpu_usage_ghz: 
    
    
    :param cpu_capacity_ghz: (:attr:`cpu_capacity_ghz`) CPU capacity in Ghz.
    :type cpu_capacity_ghz: 
    
    
    :param cpu_effective_capacity_ghz: (:attr:`cpu_effective_capacity_ghz`) CPU effective capacity in Ghz.
    :type cpu_effective_capacity_ghz: 
    
    
    :param memory_usage_gb: (:attr:`memory_usage_gb`) Usage of Memory resources in Gb.
    :type memory_usage_gb: 
    
    
    :param memory_capacity_gb: (:attr:`memory_capacity_gb`) Memory capacity in Gb.
    :type memory_capacity_gb: 
    
    
    :param memory_effective_capacity_gb: (:attr:`memory_effective_capacity_gb`) Memory effective capacity in Gb.
    :type memory_effective_capacity_gb: 
    
    
    :param storage_usage_gb: (:attr:`storage_usage_gb`) Usage of storage resources in Gb.
    :type storage_usage_gb: 
    
    
    :param storage_capacity_gb: (:attr:`storage_capacity_gb`) Storage capacity in Gb.
    :type storage_capacity_gb: 
    
    
    :param storage_effective_capacity_gb: (:attr:`storage_effective_capacity_gb`) Storage effective capacity in Gb.
    :type storage_effective_capacity_gb: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'timestamp': 'datetime',
        'cpu_usage_ghz': 'float',
        'cpu_capacity_ghz': 'float',
        'cpu_effective_capacity_ghz': 'float',
        'memory_usage_gb': 'float',
        'memory_capacity_gb': 'float',
        'memory_effective_capacity_gb': 'float',
        'storage_usage_gb': 'float',
        'storage_capacity_gb': 'float',
        'storage_effective_capacity_gb': 'float',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'cpu_usage_ghz': 'cpuUsageGhz',
        'cpu_capacity_ghz': 'cpuCapacityGhz',
        'cpu_effective_capacity_ghz': 'cpuEffectiveCapacityGhz',
        'memory_usage_gb': 'memoryUsageGb',
        'memory_capacity_gb': 'memoryCapacityGb',
        'memory_effective_capacity_gb': 'memoryEffectiveCapacityGb',
        'storage_usage_gb': 'storageUsageGb',
        'storage_capacity_gb': 'storageCapacityGb',
        'storage_effective_capacity_gb': 'storageEffectiveCapacityGb',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, timestamp=None, cpu_usage_ghz=None, cpu_capacity_ghz=None, cpu_effective_capacity_ghz=None, memory_usage_gb=None, memory_capacity_gb=None, memory_effective_capacity_gb=None, storage_usage_gb=None, storage_capacity_gb=None, storage_effective_capacity_gb=None, *args, **kwargs):  # noqa: E501
        self.__timestamp = None
        self.__cpu_usage_ghz = None
        self.__cpu_capacity_ghz = None
        self.__cpu_effective_capacity_ghz = None
        self.__memory_usage_gb = None
        self.__memory_capacity_gb = None
        self.__memory_effective_capacity_gb = None
        self.__storage_usage_gb = None
        self.__storage_capacity_gb = None
        self.__storage_effective_capacity_gb = None
        self.discriminator = None
        if timestamp is not None:
            self.__timestamp = timestamp
        if cpu_usage_ghz is not None:
            self.__cpu_usage_ghz = cpu_usage_ghz
        if cpu_capacity_ghz is not None:
            self.__cpu_capacity_ghz = cpu_capacity_ghz
        if cpu_effective_capacity_ghz is not None:
            self.__cpu_effective_capacity_ghz = cpu_effective_capacity_ghz
        if memory_usage_gb is not None:
            self.__memory_usage_gb = memory_usage_gb
        if memory_capacity_gb is not None:
            self.__memory_capacity_gb = memory_capacity_gb
        if memory_effective_capacity_gb is not None:
            self.__memory_effective_capacity_gb = memory_effective_capacity_gb
        if storage_usage_gb is not None:
            self.__storage_usage_gb = storage_usage_gb
        if storage_capacity_gb is not None:
            self.__storage_capacity_gb = storage_capacity_gb
        if storage_effective_capacity_gb is not None:
            self.__storage_effective_capacity_gb = storage_effective_capacity_gb
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'aiops.v4.stats.ScenarioStatsTuple'

    def _initialize_object_version(self):
        return 'v4.r0'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def timestamp(self):
        """
        Timestamp of a WhatIf Scenario statistic attribute data point.

        :type:
                :class:`~datetime`
        """  # noqa: E501
        return self.__timestamp

    @timestamp.setter
    def timestamp(self, timestamp):

        self.__timestamp = timestamp

    @property
    def cpu_usage_ghz(self):
        """
        Usage of CPU resources in Ghz.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__cpu_usage_ghz

    @cpu_usage_ghz.setter
    def cpu_usage_ghz(self, cpu_usage_ghz):

        self.__cpu_usage_ghz = cpu_usage_ghz

    @property
    def cpu_capacity_ghz(self):
        """
        CPU capacity in Ghz.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__cpu_capacity_ghz

    @cpu_capacity_ghz.setter
    def cpu_capacity_ghz(self, cpu_capacity_ghz):

        self.__cpu_capacity_ghz = cpu_capacity_ghz

    @property
    def cpu_effective_capacity_ghz(self):
        """
        CPU effective capacity in Ghz.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__cpu_effective_capacity_ghz

    @cpu_effective_capacity_ghz.setter
    def cpu_effective_capacity_ghz(self, cpu_effective_capacity_ghz):

        self.__cpu_effective_capacity_ghz = cpu_effective_capacity_ghz

    @property
    def memory_usage_gb(self):
        """
        Usage of Memory resources in Gb.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__memory_usage_gb

    @memory_usage_gb.setter
    def memory_usage_gb(self, memory_usage_gb):

        self.__memory_usage_gb = memory_usage_gb

    @property
    def memory_capacity_gb(self):
        """
        Memory capacity in Gb.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__memory_capacity_gb

    @memory_capacity_gb.setter
    def memory_capacity_gb(self, memory_capacity_gb):

        self.__memory_capacity_gb = memory_capacity_gb

    @property
    def memory_effective_capacity_gb(self):
        """
        Memory effective capacity in Gb.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__memory_effective_capacity_gb

    @memory_effective_capacity_gb.setter
    def memory_effective_capacity_gb(self, memory_effective_capacity_gb):

        self.__memory_effective_capacity_gb = memory_effective_capacity_gb

    @property
    def storage_usage_gb(self):
        """
        Usage of storage resources in Gb.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__storage_usage_gb

    @storage_usage_gb.setter
    def storage_usage_gb(self, storage_usage_gb):

        self.__storage_usage_gb = storage_usage_gb

    @property
    def storage_capacity_gb(self):
        """
        Storage capacity in Gb.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__storage_capacity_gb

    @storage_capacity_gb.setter
    def storage_capacity_gb(self, storage_capacity_gb):

        self.__storage_capacity_gb = storage_capacity_gb

    @property
    def storage_effective_capacity_gb(self):
        """
        Storage effective capacity in Gb.

        :type:
                :class:`~float`
        """  # noqa: E501
        return self.__storage_effective_capacity_gb

    @storage_effective_capacity_gb.setter
    def storage_effective_capacity_gb(self, storage_effective_capacity_gb):

        self.__storage_effective_capacity_gb = storage_effective_capacity_gb

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ScenarioStatsTuple, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioStatsTuple):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

