# coding: utf-8


"""
IGNORE:
    Nutanix AIOps APIs

    Manage infrastructure on-premises and in the cloud seamlessly through AIOps features such as Analysis, Reporting, Capacity Planning, What if Analysis, VM Rightsizing, Troubleshooting, App Discovery, Broad Observability, and Ops Automation through Playbooks.  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_aiops_py_client.models.aiops.v4.config.HardwarePart import HardwarePart  # noqa: F401,E501
from ntnx_aiops_py_client.models.aiops.v4.config.Vendor import Vendor  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_aiops_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class HardwareModel(ExternalizableAbstractModel):

    """Metadata about the model. For example, all the parts (CPU, memory and storage) available in the model and their capacity.

    :param vendor: (:attr:`vendor`) 
    :type vendor: 
    
    
    :param model: (:attr:`model`) Name of the model.
    :type model: 
    
    
    :param cpus: (:attr:`cpus`) CPU parts in a model.
    :type cpus: 
    
    
    :param rams: (:attr:`rams`) RAM parts in a model.
    :type rams: 
    
    
    :param hdds: (:attr:`hdds`) HDD parts in a model.
    :type hdds: 
    
    
    :param ssds: (:attr:`ssds`) SSD parts in a model.
    :type ssds: 
    
    
    :param nvmes: (:attr:`nvmes`) NVMe part details in a model.
    :type nvmes: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'vendor': 'aiops.v4.config.Vendor',
        'model': 'str',
        'cpus': 'list[aiops.v4.config.HardwarePart]',
        'rams': 'list[aiops.v4.config.HardwarePart]',
        'hdds': 'list[aiops.v4.config.HardwarePart]',
        'ssds': 'list[aiops.v4.config.HardwarePart]',
        'nvmes': 'list[aiops.v4.config.HardwarePart]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'vendor': 'vendor',
        'model': 'model',
        'cpus': 'cpus',
        'rams': 'rams',
        'hdds': 'hdds',
        'ssds': 'ssds',
        'nvmes': 'nvmes',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, vendor=None, model=None, cpus=None, rams=None, hdds=None, ssds=None, nvmes=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__vendor = None
        self.__model = None
        self.__cpus = None
        self.__rams = None
        self.__hdds = None
        self.__ssds = None
        self.__nvmes = None
        self.discriminator = None
        if vendor is not None:
            self.__vendor = vendor
        if model is not None:
            self.__model = model
        if cpus is not None:
            self.__cpus = cpus
        if rams is not None:
            self.__rams = rams
        if hdds is not None:
            self.__hdds = hdds
        if ssds is not None:
            self.__ssds = ssds
        if nvmes is not None:
            self.__nvmes = nvmes

    def _initialize_object_type(self):
        return 'aiops.v4.config.HardwareModel'

    def _initialize_object_version(self):
        return 'v4.r0'


    @property
    def vendor(self):
        """
        

        :type:
            :class:`~ntnx_aiops_py_client.models.aiops.v4.config.Vendor`
        """  # noqa: E501
        return self.__vendor

    @vendor.setter
    def vendor(self, vendor):

        self.__vendor = vendor

    @property
    def model(self):
        """
        Name of the model.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__model

    @model.setter
    def model(self, model):

        self.__model = model

    @property
    def cpus(self):
        """
        CPU parts in a model.

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.aiops.v4.config.HardwarePart` ]
        """  # noqa: E501
        return self.__cpus

    @cpus.setter
    def cpus(self, cpus):

        self.__cpus = cpus

    @property
    def rams(self):
        """
        RAM parts in a model.

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.aiops.v4.config.HardwarePart` ]
        """  # noqa: E501
        return self.__rams

    @rams.setter
    def rams(self, rams):

        self.__rams = rams

    @property
    def hdds(self):
        """
        HDD parts in a model.

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.aiops.v4.config.HardwarePart` ]
        """  # noqa: E501
        return self.__hdds

    @hdds.setter
    def hdds(self, hdds):

        self.__hdds = hdds

    @property
    def ssds(self):
        """
        SSD parts in a model.

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.aiops.v4.config.HardwarePart` ]
        """  # noqa: E501
        return self.__ssds

    @ssds.setter
    def ssds(self, ssds):

        self.__ssds = ssds

    @property
    def nvmes(self):
        """
        NVMe part details in a model.

        :type:
             list[ :class:`~ntnx_aiops_py_client.models.aiops.v4.config.HardwarePart` ]
        """  # noqa: E501
        return self.__nvmes

    @nvmes.setter
    def nvmes(self, nvmes):

        self.__nvmes = nvmes

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(HardwareModel, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardwareModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

