[build-system]
requires = ["poetry-core>=1.8"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name        = "HybridSuperQubits"
version = "0.9.3"
description = "Package to simulate hybrid superconducting qubits"
authors     = ["Joan CÃ¡ceres <contact@joancaceres.com>"]
license     = "MIT"
readme      = "README.md"
packages    = [ {include = "HybridSuperQubits"} ]
homepage    = "https://github.com/joanjcaceres/HybridSuperQubits"
repository  = "https://github.com/joanjcaceres/HybridSuperQubits"
documentation = "https://hybridsuperqubits.readthedocs.io"

[tool.poetry.dependencies]
python      = ">=3.10,<3.14"
matplotlib  = ">=3.8"
tqdm        = ">=4.66"
# Scientific computing dependencies (install via conda-forge for best performance on Apple Silicon)
numpy       = {version = ">=1.26", optional = true}
scipy       = {version = ">=1.5", optional = true}
qutip       = {version = ">=5.1", optional = true}
scqubits    = {version = ">=4.3", optional = true}

[tool.poetry.extras]
# Full installation (use with pip if conda is not available)
full = ["numpy", "scipy", "qutip", "scqubits"]
# Core scientific dependencies
scientific = ["numpy", "scipy"]
# QuTiP ecosystem
qutip = ["qutip", "scqubits"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^5.0.0"
pytest-benchmark = "^4.0.0"
pytest-mock = "^3.14.0"
ruff = "^0.1.0"
mypy = "^1.8.0"

# Linting and formatting configuration
[tool.ruff]
target-version = "py39"
line-length = 88
extend-exclude = [
    "docs/*",
    "examples/*",
    ".venv/*",
    "build/*",
    "dist/*",
]

[tool.ruff.lint]
# Enable additional rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "I",   # isort
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "E731",  # lambda assignment
]

[tool.ruff.lint.isort]
known-first-party = ["HybridSuperQubits"]

[tool.ruff.format]
docstring-code-format = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=HybridSuperQubits",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["HybridSuperQubits"]
omit = [
    "tests/*",
    "examples/*",
    "docs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Type checking configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Allow gradual typing
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "qutip.*",
    "scqubits.*",
    "matplotlib.*",
    "scipy.*",
]
ignore_missing_imports = true
