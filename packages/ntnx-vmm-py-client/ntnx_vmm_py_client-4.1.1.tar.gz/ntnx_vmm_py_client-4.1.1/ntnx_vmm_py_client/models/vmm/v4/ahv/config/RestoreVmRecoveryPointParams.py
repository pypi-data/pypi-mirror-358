# coding: utf-8


"""
IGNORE:
    Nutanix Virtual Machine Management APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.VmConfigOverrideSpecification import VmConfigOverrideSpecification  # noqa: F401,E501

class RestoreVmRecoveryPointParams(object):

    """Input parameters for the VM recovery point restore operation.

    :param is_strict_mode: (:attr:`is_strict_mode`) If set to false, any VM configuration that cannot be restored will be dropped or reset to system defaults. This currently applies to the following fields in the VM configuration: subnets, NIC profiles, project, and categories. It also handles dropping unknown features on older PEs. If set to true, the restore operation will run in normal mode, where any failures will be raised as errors, and the VM will not be restored until the issues are resolved. (**Default** True)
    :type is_strict_mode: 
    
    
    :param vm_config_override_spec: (:attr:`vm_config_override_spec`) 
    :type vm_config_override_spec: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'is_strict_mode': 'bool',
        'vm_config_override_spec': 'vmm.v4.ahv.config.VmConfigOverrideSpecification',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'is_strict_mode': 'isStrictMode',
        'vm_config_override_spec': 'vmConfigOverrideSpec',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, is_strict_mode=True, vm_config_override_spec=None, *args, **kwargs):  # noqa: E501
        self.__is_strict_mode = None
        self.__vm_config_override_spec = None
        self.discriminator = None
        if is_strict_mode is not None:
            self.__is_strict_mode = is_strict_mode
        if vm_config_override_spec is not None:
            self.__vm_config_override_spec = vm_config_override_spec
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.config.RestoreVmRecoveryPointParams'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def is_strict_mode(self):
        """
        If set to false, any VM configuration that cannot be restored will be dropped or reset to system defaults. This currently applies to the following fields in the VM configuration: subnets, NIC profiles, project, and categories. It also handles dropping unknown features on older PEs. If set to true, the restore operation will run in normal mode, where any failures will be raised as errors, and the VM will not be restored until the issues are resolved.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__is_strict_mode

    @is_strict_mode.setter
    def is_strict_mode(self, is_strict_mode):

        self.__is_strict_mode = is_strict_mode

    @property
    def vm_config_override_spec(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.VmConfigOverrideSpecification`
        """  # noqa: E501
        return self.__vm_config_override_spec

    @vm_config_override_spec.setter
    def vm_config_override_spec(self, vm_config_override_spec):

        self.__vm_config_override_spec = vm_config_override_spec

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(RestoreVmRecoveryPointParams, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestoreVmRecoveryPointParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

