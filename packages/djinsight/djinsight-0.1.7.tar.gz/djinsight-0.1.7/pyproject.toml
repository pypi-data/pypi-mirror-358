[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "djinsight"
version = "0.1.7"
description = "A Django/Wagtail package for tracking page view statistics with Redis and async processing"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "MDigital", email = "kontakt@mdigital.com.pl"},
]
maintainers = [
    {name = "MDigital", email = "kontakt@mdigital.com.pl"},
]
keywords = ["django", "wagtail", "analytics", "statistics", "page-views", "redis", "celery"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Wagtail",
    "Framework :: Wagtail :: 3",
    "Framework :: Wagtail :: 4",
    "Framework :: Wagtail :: 5",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "Django>=3.2",
    "wagtail>=3.0",
    "redis>=4.0.0",
    "celery>=5.0.0",
    "django-redis>=5.0.0",
    "django-environ>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-django>=4.0",
    "pytest-cov>=3.0",
    "black>=22.0",
    "flake8>=4.0",
    "isort>=5.0",
    "mypy>=0.900",
    "factory-boy>=3.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
]
test = [
    "pytest>=6.0",
    "pytest-django>=4.0",
    "pytest-cov>=3.0",
    "factory-boy>=3.0",
    "coverage>=6.0",
]

[project.urls]
Homepage = "https://github.com/krystianmagdziarz/djinsight"
Documentation = "https://djinsight.readthedocs.io/"
Repository = "https://github.com/krystianmagdziarz/djinsight.git"
"Bug Tracker" = "https://github.com/krystianmagdziarz/djinsight/issues"
Changelog = "https://github.com/krystianmagdziarz/djinsight/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["djinsight"]
include-package-data = true

[tool.setuptools.package-data]
djinsight = [
    "templates/**/*",
    "static/**/*",
    "migrations/*.py",
    "management/commands/*.py",
    "templatetags/*.py",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_django = "django"
known_wagtail = "wagtail"
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "DJANGO", "WAGTAIL", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
    "migrations",
]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = "--tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["djinsight"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 