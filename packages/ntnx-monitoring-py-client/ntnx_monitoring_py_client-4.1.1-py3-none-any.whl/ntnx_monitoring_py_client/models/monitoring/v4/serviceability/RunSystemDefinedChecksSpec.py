# coding: utf-8


"""
IGNORE:
    Nutanix Monitoring APIs

    Manage Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_monitoring_py_client.models.common.v1.config.IPv4Address import IPv4Address  # noqa: F401,E501

class RunSystemDefinedChecksSpec(object):

    """Required parameters for running the System-Defined Checks.

    :param sda_ext_ids: (:attr:`sda_ext_ids`) List of Check IDs to be executed. This field cannot be set simultaneously with shouldRunAllChecks; only one of them should be specified.
    :type sda_ext_ids: 
    
    
    :param should_anonymize: (:attr:`should_anonymize`) Indicates whether to mask sensitive data in the check run summary. (**Default** True)
    :type should_anonymize: 
    
    
    :param should_send_report_to_configured_recipients: (:attr:`should_send_report_to_configured_recipients`) Determines if the run summary should be sent to the configured email address associated with the cluster. (**Default** True)
    :type should_send_report_to_configured_recipients: 
    
    
    :param additional_recipients: (:attr:`additional_recipients`) A list of additional email addresses for sending the check run summary.
    :type additional_recipients: 
    
    
    :param node_ips: (:attr:`node_ips`) List of node IP addresses where the Check will run. This field will be ignored if the check scope is a cluster.
    :type node_ips: 
    
    
    :param should_run_all_checks: (:attr:`should_run_all_checks`) Indicates whether all System-Defined Checks applicable to the specified cluster should be executed. This field is mutually exclusive with the sdaExtIds parameter, meaning that only one of these should be set at a time. Please use this field with caution, as it is resource-intensive. (**Default** False)
    :type should_run_all_checks: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'sda_ext_ids': 'list[str]',
        'should_anonymize': 'bool',
        'should_send_report_to_configured_recipients': 'bool',
        'additional_recipients': 'list[str]',
        'node_ips': 'list[common.v1.config.IPv4Address]',
        'should_run_all_checks': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'sda_ext_ids': 'sdaExtIds',
        'should_anonymize': 'shouldAnonymize',
        'should_send_report_to_configured_recipients': 'shouldSendReportToConfiguredRecipients',
        'additional_recipients': 'additionalRecipients',
        'node_ips': 'nodeIps',
        'should_run_all_checks': 'shouldRunAllChecks',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, sda_ext_ids=None, should_anonymize=True, should_send_report_to_configured_recipients=True, additional_recipients=None, node_ips=None, should_run_all_checks=False, *args, **kwargs):  # noqa: E501
        self.__sda_ext_ids = None
        self.__should_anonymize = None
        self.__should_send_report_to_configured_recipients = None
        self.__additional_recipients = None
        self.__node_ips = None
        self.__should_run_all_checks = None
        self.discriminator = None
        if sda_ext_ids is not None:
            self.__sda_ext_ids = sda_ext_ids
        if should_anonymize is not None:
            self.__should_anonymize = should_anonymize
        if should_send_report_to_configured_recipients is not None:
            self.__should_send_report_to_configured_recipients = should_send_report_to_configured_recipients
        if additional_recipients is not None:
            self.__additional_recipients = additional_recipients
        if node_ips is not None:
            self.__node_ips = node_ips
        if should_run_all_checks is not None:
            self.__should_run_all_checks = should_run_all_checks
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'monitoring.v4.serviceability.RunSystemDefinedChecksSpec'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def sda_ext_ids(self):
        """
        List of Check IDs to be executed. This field cannot be set simultaneously with shouldRunAllChecks; only one of them should be specified.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__sda_ext_ids

    @sda_ext_ids.setter
    def sda_ext_ids(self, sda_ext_ids):

        self.__sda_ext_ids = sda_ext_ids

    @property
    def should_anonymize(self):
        """
        Indicates whether to mask sensitive data in the check run summary.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_anonymize

    @should_anonymize.setter
    def should_anonymize(self, should_anonymize):

        self.__should_anonymize = should_anonymize

    @property
    def should_send_report_to_configured_recipients(self):
        """
        Determines if the run summary should be sent to the configured email address associated with the cluster.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_send_report_to_configured_recipients

    @should_send_report_to_configured_recipients.setter
    def should_send_report_to_configured_recipients(self, should_send_report_to_configured_recipients):

        self.__should_send_report_to_configured_recipients = should_send_report_to_configured_recipients

    @property
    def additional_recipients(self):
        """
        A list of additional email addresses for sending the check run summary.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__additional_recipients

    @additional_recipients.setter
    def additional_recipients(self, additional_recipients):

        self.__additional_recipients = additional_recipients

    @property
    def node_ips(self):
        """
        List of node IP addresses where the Check will run. This field will be ignored if the check scope is a cluster.

        :type:
             list[ :class:`~ntnx_monitoring_py_client.models.common.v1.config.IPv4Address` ]
        """  # noqa: E501
        return self.__node_ips

    @node_ips.setter
    def node_ips(self, node_ips):

        self.__node_ips = node_ips

    @property
    def should_run_all_checks(self):
        """
        Indicates whether all System-Defined Checks applicable to the specified cluster should be executed. This field is mutually exclusive with the sdaExtIds parameter, meaning that only one of these should be set at a time. Please use this field with caution, as it is resource-intensive.

        :type:
                :class:`~bool`
        """  # noqa: E501
        return self.__should_run_all_checks

    @should_run_all_checks.setter
    def should_run_all_checks(self, should_run_all_checks):

        self.__should_run_all_checks = should_run_all_checks

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(RunSystemDefinedChecksSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunSystemDefinedChecksSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

