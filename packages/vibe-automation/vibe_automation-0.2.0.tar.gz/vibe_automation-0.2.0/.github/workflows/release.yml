name: Release

on:
  push:
    tags:
      - 'release/v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release-created: ${{ steps.release.outputs.release_created }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/release/v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release v${{ steps.version.outputs.version }}" \
            --generate-notes
          echo "release_created=true" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    needs: create-release
    if: needs.create-release.outputs.release-created == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for trusted publishing
      contents: read

    steps:
      - name: Checkout code along with submodules
        uses: actions/checkout@v4
        env:
          GIT_TERMINAL_PROMPT: 1
        with:
          fetch-depth: 0
          token: ${{ secrets.SUBMODULE_TOKEN }}
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: uv sync --group dev

      - name: Generate proto files
        run: uv run python -m scripts.generate_protos

      - name: Build package
        run: uv build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
