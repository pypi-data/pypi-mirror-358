Metadata-Version: 2.4
Name: meshagent
Version: 0.0.34
Summary: Meshagent
License-Expression: Apache-2.0
Project-URL: Documentation, https://docs.meshagent.com
Project-URL: Website, https://www.meshagent.com
Project-URL: Source, https://www.meshagent.com
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: all
Requires-Dist: meshagent-api[all]~=0.0.34; extra == "all"
Requires-Dist: meshagent-agents[all]~=0.0.34; extra == "all"
Requires-Dist: meshagent-tools~=0.0.34; extra == "all"
Requires-Dist: meshagent-openai~=0.0.34; extra == "all"
Requires-Dist: meshagent-computers~=0.0.34; extra == "all"
Requires-Dist: meshagent-mcp~=0.0.34; extra == "all"
Requires-Dist: meshagent-livekit~=0.0.34; extra == "all"
Requires-Dist: meshagent-cli~=0.0.34; extra == "all"
Provides-Extra: agents
Requires-Dist: meshagent-agents~=0.0.34; extra == "agents"
Provides-Extra: tools
Requires-Dist: meshagent-tools~=0.0.34; extra == "tools"
Provides-Extra: cli
Requires-Dist: meshagent-cli~=0.0.34; extra == "cli"
Provides-Extra: mcp-service
Requires-Dist: meshagent-cli~=0.0.34; extra == "mcp-service"
Dynamic: license-file

# MeshAgent Python SDK

MeshAgent is your platform to create, deploy, and manage AI agents collaboratively and at scale, securely and in real time. 

MeshAgent removes the infrastructure headaches of building and shipping AI Agents. It spins up secure, real-time "Rooms" that connect humans, agents, and shared context -- letting you launch, share, and refine agents in hours instead of weeks.

---

**Documentation**: [docs.meshagent.com](https://docs.meshagent.com/)

---

## Why MeshAgent? 

- **Real-time multi-user "Rooms" for true human-AI teamwork**: Secure workspaces, "Rooms", automatically spin-up when someone joins, tracking presence, chat, documents, and agent activity, and disappear when everyone leaves -- so people and agents stay in sync. 

- **Accelerated feedback loop and shortened development cycle**: Invite a colleague or stakeholder into the MeshAgent Studio Room so they can see, hear, and interact with your agent immediately -- letting you demo, gather feedback, and iterate on the agent on the same day.

- **Shareable links that showcase your agent**: After you deploy an agent, MeshAgent provides you a URL so colleagues or customers can jump straight into the Room, try the agent, and give feedback -- no code checkout, IDE, or GPU required. 

- **Support across languages**: The same feature set (Rooms, Agents, Tools, Messaging, Queues, Storage, Documents, etc.) is exposed through official Python, Javascript, Typescript, and Dart SDKs, so every team member can work in their preferred language. 

- **Built-in Observability**: Streaming logs and traces give you real-time insight into every message, agent action, and error. 

- **Secure and elastic by default**: Project-scoped keys, on-demand provisioning, and auto-scaling infrastructure keep Rooms private, secure, and ready for your usage needs.


## Getting Setup

### Create your MeshAgent Account 
1. Go to [studio.meshagent.com](www.studio.meshagent.com) and sign in or sign up for an account.
2. Create a project and give it a name (e.g., MyFirstAgentProject)
3. Navigate to the API Keys tab and click + New API Key. Give your key a name and description then click “ok”.
4. Click on the key to copy the MESHAGENT_KEY_ID, MESHAGENT_PROJECT_ID, and MESHAGENT_SECRET. You will need to export these as environment variables to connect to your Project.

### Install the MeshAgent SDK

```sh
pip install meshagent[all]
```

```sh
uv add 'meshagent[all]'
```

### Set Environment Variables

Before you begin, you must export three environment variables. Make sure to substitute the placeholder values (xxxx-xxxx...) with your actual keys and secrets.

```bash
export MESHAGENT_KEY_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
export MESHAGENT_PROJECT_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
export MESHAGENT_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
```

### Run your first agent!

To call a chat agent into the room run: 

```sh
meshagent chatbot join --room YOUR_ROOM --agent-name YOUR_CHATBOT --name YOUR_CHATBOT
```

To call a voice agent into the room run: 
```sh
meshagent voicebot join --room YOUR_ROOM --agent-name YOUR_VOICEBOT --name YOUR_VOICEBOT
```

## Next Steps and Examples

To see examples of agents in action and to start building your own agents check out the MeshAgent docs at [docs.meshagent.com](https://docs.meshagent.com/)
