"""PTVL003: Random Dependency Detection."""

import ast
from typing import Optional

from pytestee.domain.models import CheckerConfig, CheckResult, TestFile, TestFunction
from pytestee.domain.rules.base_rule import BaseRule


class PTVL003(BaseRule):
    """Rule for detecting random-dependent code in tests."""

    def __init__(self) -> None:
        super().__init__(
            rule_id="PTVL003",
            name="random_dependency_detection",
            description="Test function contains random-dependent code that may cause flaky tests",
        )
        # Random-related functions that should be avoided in tests
        self._random_functions = {
            "random.random",
            "random.randint",
            "random.choice",
            "random.shuffle",
            "random.sample",
            "random.uniform",
            "random.gauss",
            "random.normalvariate",
            "uuid.uuid4",
            "uuid.uuid1",
            "secrets.token_hex",
            "secrets.token_urlsafe",
            "secrets.choice",
            "random",
            "randint",
            "choice",
            "shuffle",
            "sample",
            "uniform",
        }

    def check(
        self,
        test_function: TestFunction,
        test_file: TestFile,
        config: Optional[CheckerConfig] = None,
    ) -> CheckResult:
        """Check if test function contains random-dependent code."""
        random_dependencies = self._find_random_dependencies(test_function)

        if random_dependencies:
            dependency_details = ", ".join(f"line {line}: {func}" for line, func in random_dependencies)
            return self._create_failure_result(
                f"Random dependency detected: {dependency_details}. "
                "Consider using fixed seeds, mocks, or deterministic values to avoid flaky tests.",
                test_file,
                test_function,
            )

        return self._create_success_result(
            "No random dependencies found",
            test_file,
            test_function,
        )

    def _find_random_dependencies(self, test_function: TestFunction) -> list[tuple[int, str]]:
        """Find random-dependent function calls in the test function."""
        random_dependencies = []

        # Create a module node to walk through the AST
        module = ast.Module(body=test_function.body, type_ignores=[])

        for node in ast.walk(module):
            if isinstance(node, ast.Call):
                func_name = self._get_function_name(node.func)
                if func_name and func_name in self._random_functions:
                    line_no = getattr(node, "lineno", test_function.lineno)
                    random_dependencies.append((line_no, func_name))

        return random_dependencies

    def _get_function_name(self, func_node: ast.expr) -> Optional[str]:
        """Extract function name from AST node."""
        if isinstance(func_node, ast.Name):
            return func_node.id
        if isinstance(func_node, ast.Attribute):
            # Handle chained attributes like random.randint
            parts = []
            current: ast.expr = func_node
            while isinstance(current, ast.Attribute):
                parts.append(current.attr)
                current = current.value
            if isinstance(current, ast.Name):
                parts.append(current.id)
            return ".".join(reversed(parts))
        return None
