"""PTVL001: Private Attribute/Method Access Detection."""

import ast
from typing import Optional

from pytestee.domain.models import CheckerConfig, CheckResult, TestFile, TestFunction
from pytestee.domain.rules.base_rule import BaseRule


class PTVL001(BaseRule):
    """Rule for detecting access to private attributes and methods."""

    def __init__(self) -> None:
        super().__init__(
            rule_id="PTVL001",
            name="private_access_detection",
            description="Test function accesses private attributes or methods (names starting with underscore)",
        )

    def check(
        self,
        test_function: TestFunction,
        test_file: TestFile,
        config: Optional[CheckerConfig] = None,
    ) -> CheckResult:
        """Check if test function accesses private attributes or methods."""
        private_accesses = self._find_private_accesses(test_function)

        if private_accesses:
            access_details = ", ".join(f"line {line}: {name}" for line, name in private_accesses)
            return self._create_failure_result(
                f"Private attribute/method access detected: {access_details}. "
                "Consider using public interfaces instead to avoid implementation coupling.",
                test_file,
                test_function,
            )

        return self._create_success_result(
            "No private attribute/method access found",
            test_file,
            test_function,
        )

    def _find_private_accesses(self, test_function: TestFunction) -> list[tuple[int, str]]:
        """Find private attribute/method accesses in the test function."""
        private_accesses = []

        # Create a module node to walk through the AST
        module = ast.Module(body=test_function.body, type_ignores=[])

        for node in ast.walk(module):
            if isinstance(node, ast.Attribute):
                # Check for private attribute access (starts with underscore but not dunder)
                if (node.attr.startswith("_") and
                    not node.attr.startswith("__") and
                    not node.attr.endswith("__")):
                    line_no = getattr(node, "lineno", test_function.lineno)
                    private_accesses.append((line_no, node.attr))

            elif (isinstance(node, ast.Call) and
                  isinstance(node.func, ast.Attribute) and
                  node.func.attr.startswith("_") and
                  not node.func.attr.startswith("__") and
                  not node.func.attr.endswith("__")):
                # Check for private method calls
                line_no = getattr(node.func, "lineno", test_function.lineno)
                private_accesses.append((line_no, f"{node.func.attr}()"))

        return private_accesses
