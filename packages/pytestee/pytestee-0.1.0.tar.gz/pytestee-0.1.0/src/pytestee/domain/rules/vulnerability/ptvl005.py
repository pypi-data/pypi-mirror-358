"""PTVL005: Class Variable Manipulation Detection."""

import ast
from typing import Optional

from pytestee.domain.models import CheckerConfig, CheckResult, TestFile, TestFunction
from pytestee.domain.rules.base_rule import BaseRule


class PTVL005(BaseRule):
    """Rule for detecting class variable manipulations in test classes."""

    def __init__(self) -> None:
        super().__init__(
            rule_id="PTVL005",
            name="class_variable_manipulation_detection",
            description="Test function modifies class variables that may affect other test methods",
        )

    def check(
        self,
        test_function: TestFunction,
        test_file: TestFile,
        config: Optional[CheckerConfig] = None,
    ) -> CheckResult:
        """Check if test function modifies class variables."""
        # First, check if this test function is inside a test class
        test_class = self._find_containing_test_class(test_function, test_file)
        if not test_class:
            # Not in a test class, skip this rule
            return self._create_success_result(
                "Not in a test class - rule not applicable",
                test_file,
                test_function,
            )

        class_var_modifications = self._find_class_variable_modifications(test_function, test_class)

        if class_var_modifications:
            modification_details = ", ".join(f"line {line}: {var}" for line, var in class_var_modifications)
            return self._create_failure_result(
                f"Class variable modification detected: {modification_details}. "
                "Consider using instance variables or test fixtures to avoid test isolation issues.",
                test_file,
                test_function,
            )

        return self._create_success_result(
            "No class variable modifications found",
            test_file,
            test_function,
        )

    def _find_containing_test_class(self, test_function: TestFunction, test_file: TestFile) -> Optional[ast.ClassDef]:
        """Find the test class containing this test function."""
        for test_class in test_file.test_classes:
            if test_class.test_methods and test_function.name in test_class.test_methods:
                # Find the actual AST node for this class
                for node in ast.walk(test_file.ast_tree):
                    if isinstance(node, ast.ClassDef) and node.name == test_class.name:
                        return node
        return None

    def _find_class_variable_modifications(self, test_function: TestFunction, test_class: ast.ClassDef) -> list[tuple[int, str]]:
        """Find class variable modifications in the test function."""
        # First, identify class variables
        class_variables = self._extract_class_variables(test_class)

        if not class_variables:
            return []

        modifications = []

        # Create a module node to walk through the AST
        module = ast.Module(body=test_function.body, type_ignores=[])

        for node in ast.walk(module):
            if isinstance(node, ast.Assign):
                for target in node.targets:
                    # Check for self.class_var = value or ClassName.class_var = value
                    if isinstance(target, ast.Attribute) and isinstance(target.value, ast.Name):
                        if target.value.id == "self" and target.attr in class_variables:
                            line_no = getattr(node, "lineno", 0) + test_function.lineno - 1
                            modifications.append((line_no, f"self.{target.attr}"))
                        elif target.value.id == test_class.name and target.attr in class_variables:
                            line_no = getattr(node, "lineno", 0) + test_function.lineno - 1
                            modifications.append((line_no, f"{test_class.name}.{target.attr}"))

        return modifications

    def _extract_class_variables(self, test_class: ast.ClassDef) -> set[str]:
        """Extract class variable names from test class."""
        class_variables = set()

        for node in test_class.body:
            if isinstance(node, ast.Assign):
                for target in node.targets:
                    if isinstance(target, ast.Name):
                        # This is a class variable assignment
                        class_variables.add(target.id)
            elif (isinstance(node, ast.AnnAssign) and
                  isinstance(node.target, ast.Name)):
                # Type-annotated class variable
                class_variables.add(node.target.id)

        return class_variables
