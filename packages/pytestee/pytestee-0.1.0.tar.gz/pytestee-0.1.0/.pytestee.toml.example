# pytestee configuration example
# Copy this to .pytestee.toml or add to pyproject.toml under [tool.pytestee]

# File selection patterns
# Exclude patterns support standard glob patterns
# By default, all .py files are considered unless excluded
exclude = [
    # Default exclusions (automatically applied):
    ".venv/**",                # Virtual environment
    "venv/**",                 # Alternative virtual environment
    "**/__pycache__/**",       # Python cache directories
    
    # Additional exclusions you might want:
    # "**/conftest.py",        # Exclude pytest configuration files
    # "**/test_fixtures/**",   # Exclude fixture directories
    # "*_integration_test.py", # Exclude integration tests
]

# Rule selection (ruff-style patterns)
# Use "select" to enable specific rules or rule categories
# Use "ignore" to disable specific rules
select = [
    "PTCM003",  # AAA or GWT comment pattern detection (flexible)
    "PTST001",  # Structural pattern detection (empty line separation)
    "PTLG001",  # Logical flow pattern detection (AST analysis)
    "PTAS005",  # Assertion count validation (balanced approach)
    "PTNM001",  # Japanese character naming check
]
ignore = []

# Alternative: Select entire rule categories
# select = ["PTCM", "PTST", "PTAS", "PTNM"]  # Enable all rules in these categories
# ignore = ["PTAS001", "PTAS002"]            # But disable specific conflicting rules

# Rule-specific configurations
# Each rule can have its own configuration namespace

[rules.PTAS005]
# Assertion count validation (balanced approach)
max_asserts = 3     # Maximum number of assertions per test
min_asserts = 1     # Minimum number of assertions per test

[rules.PTAS001]
# Too few assertions rule (if enabled instead of PTAS005)
min_asserts = 2     # Require at least 2 assertions for thorough testing

[rules.PTAS002]
# Too many assertions rule (if enabled instead of PTAS005)
max_asserts = 2     # Limit to maximum 2 assertions for focused testing

[rules.PTAS003]
# High assertion density rule
max_density = 0.5   # Maximum ratio of assertions to total lines (0.0-1.0)

[rules.PTCM001]
# Strict AAA comment pattern
require_comments = true  # Require explicit # Arrange, # Act, # Assert comments

[rules.PTCM002]
# Strict GWT comment pattern
require_comments = true  # Require explicit # Given, # When, # Then comments

[rules.PTCM003]
# Flexible AAA or GWT comment pattern (recommended)
require_comments = false  # Allow pattern detection without strict comment requirements
allow_gwt = true         # Accept both AAA and GWT patterns

# Rule severity overrides
# Change rule severity levels: "error", "warning", "info"
[severity]
PTNM001 = "warning"  # Japanese naming suggestions as warnings instead of errors
PTLG001 = "info"     # Logical flow pattern as informational

# Available rules:
# PTCM001 - AAA pattern in comments (strict)
# PTCM002 - GWT pattern in comments (strict)
# PTCM003 - AAA or GWT pattern (flexible)
# PTST001 - Structural pattern detection
# PTLG001 - Logical flow pattern
# PTAS001 - Too few assertions
# PTAS002 - Too many assertions
# PTAS003 - High assertion density
# PTAS004 - No assertions found
# PTAS005 - Assertion count validation (balanced)
# PTNM001 - Japanese character naming

# Common configuration scenarios:

# Strict testing standards:
# select = ["PTCM001", "PTAS001", "PTNM001"]
# [rules.PTCM001]
# require_comments = true
# [rules.PTAS001]
# min_asserts = 2

# Minimal requirements:
# select = ["PTAS004", "PTST001"]  # Only check for missing assertions and basic structure

# Flexible approach (recommended):
# select = ["PTCM003", "PTST001", "PTAS005", "PTNM001"]
# [rules.PTCM003]
# require_comments = false
# allow_gwt = true
# [rules.PTAS005]
# max_asserts = 3
# min_asserts = 1

