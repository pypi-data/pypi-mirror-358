{
  "permissions": {
    "allow": [
      "mcp__sequentialthinking__sequentialthinking",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(claude mcp remove:*)",
      "mcp__KEN-MCP__generate_mcp_server",
      "Bash(claude mcp add:*)",
      "Bash(/opt/homebrew/bin/python3.10:*)",
      "Bash(python3:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(claude mcp:*)",
      "WebFetch(domain:github.com)",
      "mcp__ken-mcp__generate_mcp_server",
      "Bash(python:*)",
      "Bash(grep:*)",
      "Bash(timeout:*)",
      "Bash(mkdir:*)",
      "Bash(find:*)",
      "Bash(touch:*)",
      "Bash(rm:*)",
      "Bash(/Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -m ken_mcp.cli verify:*)",
      "Bash(/Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nfrom ken_mcp.core.requirement_parser import RequirementParser\n\n# Test various domains\ntest_cases = [\n    'Create an MCP for analyzing protein sequences and predicting structures',\n    'Build an MCP that tracks cryptocurrency portfolios and sends alerts',\n    'I need an MCP for managing restaurant orders and inventory'\n]\n\nparser = RequirementParser()\nfor req in test_cases:\n    print(f'\\nüìù {req}')\n    parsed = parser.parse(req)\n    print(f'   Domain: {parsed.domain}')\n    print(f'   Entities: {parsed.entities}')\n    print(f'   Tools: {[t[\\\"name\\\"] for t in parsed.suggested_tools[:3]]}')\")",
      "Bash(/Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nfrom ken_mcp.core.analyzer import analyze_and_plan\n\n# Test one example\nreq = 'Create an MCP for controlling drones and managing flight paths'\nplan = analyze_and_plan(req)\n\nprint('Generated plan for:', req)\nprint('\\\\nAnalysis context:')\nif plan.analysis_context:\n    print(f'  Domain: {plan.analysis_context.get(\\\"domain\\\")}')\n    print(f'  Actions: {plan.analysis_context.get(\\\"primary_actions\\\")}')\n    print(f'  Entities: {plan.analysis_context.get(\\\"entities\\\")}')\n\nprint('\\\\nGenerated tools:')\nfor tool in plan.tools:\n    print(f'  - {tool.name}: {tool.description[:50]}...')\n\")",
      "WebFetch(domain:modelcontextprotocol.io)",
      "Bash(/Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nfrom ken_mcp.core.models import ProjectConfig\nfrom ken_mcp.core.orchestrator import generate_mcp_server\nimport asyncio\n\n# Mock context\nclass MockContext:\n    async def info(self, msg): print(f'[INFO] {msg}')\n    async def report_progress(self, current, total, msg): pass\n\nasync def test():\n    config = ProjectConfig(\n        requirements='Create an MCP to integrate with GitHub for managing repositories, issues, and pull requests',\n        project_name='github-integration',\n        output_dir='test_intelligent_mcps'\n    )\n    \n    ctx = MockContext()\n    result = await generate_mcp_server(ctx, config)\n    \n    if result.success:\n        print(f'\\\\n‚úÖ MCP generated successfully!')\n        print(f'   Path: {result.project_path}')\n        print(f'   Tools: {result.tools_generated}')\n        \n        # Check for syntax errors\n        import ast\n        server_file = result.project_path / 'server.py'\n        try:\n            with open(server_file) as f:\n                ast.parse(f.read())\n            print('   ‚úÖ No syntax errors')\n        except SyntaxError as e:\n            print(f'   ‚ùå Syntax error: {e}')\n\nasyncio.run(test())\")",
      "Bash(/Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nfrom ken_mcp.core.requirement_parser import RequirementParser\n\n# Same 10 examples as before\ntest_cases = [\n    'Create an MCP to integrate with GitHub for managing issues and pull requests',\n    'Build an MCP that connects to PostgreSQL database for querying data',\n    'I need an MCP for sending messages to Slack channels',\n    'Create an MCP to scrape web pages and extract content',\n    'Build an MCP for file system operations like reading and writing files',\n    'I want an MCP that interfaces with Notion API for managing pages',\n    'Create an MCP to interact with AWS S3 buckets',\n    'Build an MCP for executing GraphQL queries against an API',\n    'I need an MCP for managing tasks in Linear',\n    'Create an MCP that monitors system metrics and sends alerts'\n]\n\nparser = RequirementParser()\nprint('KEN-MCP can now handle these 10 realistic MCP use cases:\\\\n')\nfor i, req in enumerate(test_cases, 1):\n    parsed = parser.parse(req)\n    tools = [t['name'] for t in parsed.suggested_tools[:3]]\n    print(f'{i}. {req}')\n    print(f'   ‚úÖ Domain: {parsed.domain}')\n    print(f'   ‚úÖ Generates: {tools}')\n    print()\")",
      "Bash(ls:*)",
      "Bash(/Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3:*)",
      "Bash(PYTHONPATH=/Users/kenkai/ClaudeCode/MCP:$PYTHONPATH /Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"from ken_mcp.core.orchestrator import generate_mcp_server; generate_mcp_server('postgresql-test', 'Create an MCP to manage PostgreSQL database operations including tables, queries, backups, and performance monitoring', 'test_edge_cases')\")",
      "Bash(cp:*)",
      "Bash(PYTHONPATH=/Users/kenkai/ClaudeCode/MCP:$PYTHONPATH /Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, '/Users/kenkai/ClaudeCode/MCP')\nfrom test_50_mcps_v2.run_tests import generate_agent_mcps, MCP_DEFINITIONS\nagent_name = 'Agent 1 - Content Management & Media'\nmcps = MCP_DEFINITIONS[agent_name]\nasyncio.run(generate_agent_mcps(agent_name, mcps))\n\")",
      "Bash(PYTHONPATH=/Users/kenkai/ClaudeCode/MCP:$PYTHONPATH /Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, '/Users/kenkai/ClaudeCode/MCP')\nfrom test_50_mcps_v2.run_tests import generate_agent_mcps, MCP_DEFINITIONS\nagent_name = 'Agent 2 - E-commerce & Business'\nmcps = MCP_DEFINITIONS[agent_name]\nasyncio.run(generate_agent_mcps(agent_name, mcps))\n\")",
      "Bash(PYTHONPATH=/Users/kenkai/ClaudeCode/MCP:$PYTHONPATH /Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, '/Users/kenkai/ClaudeCode/MCP')\nfrom test_50_mcps_v2.run_tests import generate_agent_mcps, MCP_DEFINITIONS\nagent_name = 'Agent 3 - Data Science & Analytics'\nmcps = MCP_DEFINITIONS[agent_name]\nasyncio.run(generate_agent_mcps(agent_name, mcps))\n\")",
      "Bash(PYTHONPATH=/Users/kenkai/ClaudeCode/MCP:$PYTHONPATH /Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, '/Users/kenkai/ClaudeCode/MCP')\nfrom test_50_mcps_v2.run_tests import generate_agent_mcps, MCP_DEFINITIONS\nagent_name = 'Agent 4 - Security & Compliance'\nmcps = MCP_DEFINITIONS[agent_name]\nasyncio.run(generate_agent_mcps(agent_name, mcps))\n\")",
      "Bash(PYTHONPATH=/Users/kenkai/ClaudeCode/MCP:$PYTHONPATH /Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, '/Users/kenkai/ClaudeCode/MCP')\nfrom test_50_mcps_v2.run_tests import generate_agent_mcps, MCP_DEFINITIONS\nagent_name = 'Agent 5 - Education & Knowledge'\nmcps = MCP_DEFINITIONS[agent_name]\nasyncio.run(generate_agent_mcps(agent_name, mcps))\n\")",
      "Bash(PYTHONPATH=/Users/kenkai/ClaudeCode/MCP:$PYTHONPATH /Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nimport json\nfrom pathlib import Path\nfrom validation_scripts.report_generator import generate_master_report\n\n# Check which agents have results\nall_results = {}\nbase_dir = Path('/Users/kenkai/ClaudeCode/MCP/test_50_mcps_v2')\n\nagent_dirs = [\n    'agent_1__content_media',\n    'agent_2__ecommerce_business', \n    'agent_3__data_science_analytics',\n    'agent_4__security_compliance',\n    'agent_5__education_knowledge'\n]\n\nfor agent_dir in agent_dirs:\n    results_file = base_dir / agent_dir / 'results.json'\n    if results_file.exists():\n        with open(results_file) as f:\n            agent_results = json.load(f)\n        \n        # Map back to agent names\n        agent_name_map = {\n            'agent_1__content_media': 'Agent 1 - Content Management & Media',\n            'agent_2__ecommerce_business': 'Agent 2 - E-commerce & Business',\n            'agent_3__data_science_analytics': 'Agent 3 - Data Science & Analytics', \n            'agent_4__security_compliance': 'Agent 4 - Security & Compliance',\n            'agent_5__education_knowledge': 'Agent 5 - Education & Knowledge'\n        }\n        \n        agent_name = agent_name_map.get(agent_dir, agent_dir)\n        all_results[agent_name] = agent_results\n        print(f'Loaded {len(agent_results)} results for {agent_name}')\n\nprint(f'\\\\nTotal agents with results: {len(all_results)}')\n\n# Generate master report\nif all_results:\n    master_report = generate_master_report(all_results)\n    report_path = base_dir / 'MASTER_REPORT.md'\n    with open(report_path, 'w') as f:\n        f.write(master_report)\n    print(f'Master report saved to: {report_path}')\nelse:\n    print('No results found')\n\")",
      "Bash(PYTHONPATH=/Users/kenkai/ClaudeCode/MCP:$PYTHONPATH /Users/kenkai/.local/pipx/venvs/fastmcp/bin/python3 -c \"\nimport json\nimport sys\nfrom pathlib import Path\n\n# Add validation scripts to path  \nsys.path.insert(0, str(Path.cwd() / 'validation_scripts'))\nfrom report_generator import generate_master_report\n\n# Check which agents have results\nall_results = {}\nbase_dir = Path.cwd()\n\nagent_dirs = [\n    'agent_1__content_media',\n    'agent_2__ecommerce_business', \n    'agent_3__data_science_analytics',\n    'agent_4__security_compliance',\n    'agent_5__education_knowledge'\n]\n\nfor agent_dir in agent_dirs:\n    results_file = base_dir / agent_dir / 'results.json'\n    if results_file.exists():\n        with open(results_file) as f:\n            agent_results = json.load(f)\n        \n        # Map back to agent names\n        agent_name_map = {\n            'agent_1__content_media': 'Agent 1 - Content Management & Media',\n            'agent_2__ecommerce_business': 'Agent 2 - E-commerce & Business',\n            'agent_3__data_science_analytics': 'Agent 3 - Data Science & Analytics', \n            'agent_4__security_compliance': 'Agent 4 - Security & Compliance',\n            'agent_5__education_knowledge': 'Agent 5 - Education & Knowledge'\n        }\n        \n        agent_name = agent_name_map.get(agent_dir, agent_dir)\n        all_results[agent_name] = agent_results\n        print(f'Loaded {len(agent_results)} results for {agent_name}')\n\nprint(f'\\\\nTotal agents with results: {len(all_results)}')\n\n# Generate master report\nif all_results:\n    master_report = generate_master_report(all_results)\n    report_path = base_dir / 'MASTER_REPORT.md'\n    with open(report_path, 'w') as f:\n        f.write(master_report)\n    print(f'Master report saved to: {report_path}')\n    \n    # Show summary stats\n    total_mcps = sum(len(results) for results in all_results.values())\n    total_valid = sum(sum(1 for r in results if r.get('syntax', {}).get('syntax_valid', False)) \n                     for results in all_results.values())\n    total_high_quality = sum(sum(1 for r in results if r.get('overall_score', 0) >= 4) \n                            for results in all_results.values())\n    \n    print(f'\\\\nüéØ Final Results Summary:')\n    print(f'  Total MCPs Generated: {total_mcps}')\n    print(f'  Syntax Valid: {total_valid} ({int(total_valid/total_mcps*100) if total_mcps > 0 else 0}%)')\n    print(f'  High Quality (4+/5): {total_high_quality} ({int(total_high_quality/total_mcps*100) if total_mcps > 0 else 0}%)')\nelse:\n    print('No results found')\n\")",
      "Bash(pip install:*)",
      "Bash(cat:*)",
      "Bash(mv:*)",
      "Bash(true)",
      "Bash(pip3 install:*)",
      "Bash(/Users/kenkai/ClaudeCode/MCP/clean-server-test-mcp/run_server.py)",
      "mcp__shebang-fix-test-mcp__fetch_data",
      "Bash(rg:*)",
      "Bash(./run_server.sh:*)",
      "Bash(awk:*)"
    ],
    "deny": []
  }
}