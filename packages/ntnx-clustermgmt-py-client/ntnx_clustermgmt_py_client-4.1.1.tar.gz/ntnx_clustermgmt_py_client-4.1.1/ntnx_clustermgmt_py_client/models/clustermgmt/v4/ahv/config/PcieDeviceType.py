# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path

class PcieDeviceType(object):

    """Device type according to the PCI code and ID assignment specification


    Allowed enum values:

        - _UNKNOWN
        - _REDACTED
        - MASS_STORAGE_CONTROLLER: Mass storage controller
        - NETWORK_CONTROLLER: Network controller
        - DISPLAY_CONTROLLER: Display controller
        - MULTIMEDIA_DEVICE: Multimedia controller
        - MEMORY_CONTROLLER: Memory controller
        - BRIDGE_DEVICE: Bridge device
        - SIMPLE_COMMUNICATION_CONTROLLER: Simple communication controller
        - BASE_SYSTEM_PERIPHERAL: Base system peripherals
        - INPUT_DEVICE: Input device
        - DOCKING_STATION: Docking station
        - PROCESSOR: Processor
        - SERIAL_BUS_CONTROLLER: Serial bus controller
        - WIRELESS_CONTROLLER: Wireless controller
        - INTELLIGENT_IO_CONTROLLER: Intelligent I/O controller
        - SATELLITE_COMMUNICATION_CONTROLLER: Satellite communication controller
        - ENCRYPTION_DECRYPTION_CONTROLLER: Encryption/Decryption controller
        - DATA_ACQUISITION_AND_SIGNAL_PROCESSING_CONTROLLER: Data acquisition and signal processing controller
        - PROCESSING_ACCELERATOR: Processing accelerator
        - NON_ESSENTIAL_INSTRUMENTATION: Non-essential instrumentation
    """
    _UNKNOWN = "$UNKNOWN"
    _REDACTED = "$REDACTED"
    MASS_STORAGE_CONTROLLER = "MASS_STORAGE_CONTROLLER"
    NETWORK_CONTROLLER = "NETWORK_CONTROLLER"
    DISPLAY_CONTROLLER = "DISPLAY_CONTROLLER"
    MULTIMEDIA_DEVICE = "MULTIMEDIA_DEVICE"
    MEMORY_CONTROLLER = "MEMORY_CONTROLLER"
    BRIDGE_DEVICE = "BRIDGE_DEVICE"
    SIMPLE_COMMUNICATION_CONTROLLER = "SIMPLE_COMMUNICATION_CONTROLLER"
    BASE_SYSTEM_PERIPHERAL = "BASE_SYSTEM_PERIPHERAL"
    INPUT_DEVICE = "INPUT_DEVICE"
    DOCKING_STATION = "DOCKING_STATION"
    PROCESSOR = "PROCESSOR"
    SERIAL_BUS_CONTROLLER = "SERIAL_BUS_CONTROLLER"
    WIRELESS_CONTROLLER = "WIRELESS_CONTROLLER"
    INTELLIGENT_IO_CONTROLLER = "INTELLIGENT_IO_CONTROLLER"
    SATELLITE_COMMUNICATION_CONTROLLER = "SATELLITE_COMMUNICATION_CONTROLLER"
    ENCRYPTION_DECRYPTION_CONTROLLER = "ENCRYPTION_DECRYPTION_CONTROLLER"
    DATA_ACQUISITION_AND_SIGNAL_PROCESSING_CONTROLLER = "DATA_ACQUISITION_AND_SIGNAL_PROCESSING_CONTROLLER"
    PROCESSING_ACCELERATOR = "PROCESSING_ACCELERATOR"
    NON_ESSENTIAL_INSTRUMENTATION = "NON_ESSENTIAL_INSTRUMENTATION"


    def __init__(self, *args, **kwargs):  # noqa: E501
        self.discriminator = None
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.ahv.config.PcieDeviceType'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr in vars(self):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(PcieDeviceType, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PcieDeviceType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

