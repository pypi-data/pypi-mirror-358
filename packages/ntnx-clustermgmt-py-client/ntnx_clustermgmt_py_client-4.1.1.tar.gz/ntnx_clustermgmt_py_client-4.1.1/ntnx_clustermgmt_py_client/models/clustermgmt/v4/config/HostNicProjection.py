# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.HostNic import HostNic  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.NetworkSwitchInterface import NetworkSwitchInterface  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501

class HostNicProjection(HostNic):

    """

    :param name: (:attr:`name`) Name of the host NIC.
    :type name: 
     max=64 chars
    
    :param host_description: (:attr:`host_description`) Host description.
    :type host_description: 
    
    
    :param mac_address: (:attr:`mac_address`) Host Mac address.
    :type mac_address: 
    
    
    :param ipv4_addresses: (:attr:`ipv4_addresses`) List of IPv4 addresses associated with the NIC entity for the network connection.
    :type ipv4_addresses: 
    
    
    :param ipv6_addresses: (:attr:`ipv6_addresses`) List of IPv6 addresses associated with the NIC entity for the network connection.
    :type ipv6_addresses: 
    
    
    :param interface_status: (:attr:`interface_status`) Operational status of the interface to the port associated with the NIC entity.
    :type interface_status: 
    
    
    :param is_dhcp_enabled: (:attr:`is_dhcp_enabled`) Status of DHCP protocol.
    :type is_dhcp_enabled: 
    
    
    :param link_speed_in_kbps: (:attr:`link_speed_in_kbps`) Link current speed in Kbps.
    :type link_speed_in_kbps: 
    
    
    :param mtu_in_bytes: (:attr:`mtu_in_bytes`) Maximum transmission unit in bytes.
    :type mtu_in_bytes: 
    
    
    :param node_uuid: (:attr:`node_uuid`) UUID of the host.
    :type node_uuid: 
    
    
    :param discovery_protocol: (:attr:`discovery_protocol`) Network discovery protocol (either LLDP or None).
    :type discovery_protocol: 
    
    
    :param switch_device_id: (:attr:`switch_device_id`) Switch device Id learned through the discovery protocol.
    :type switch_device_id: 
    
    
    :param switch_port_id: (:attr:`switch_port_id`) Switch port Id learned through the discovery protocol.
    :type switch_port_id: 
    
    
    :param switch_vendor_info: (:attr:`switch_vendor_info`) Switch vendor information learned through the discovery protocol.
    :type switch_vendor_info: 
    
    
    :param switch_vlan_id: (:attr:`switch_vlan_id`) Switch VLAN Id learned through the discovery protocol.
    :type switch_vlan_id: 
    
    
    :param switch_management_ip: (:attr:`switch_management_ip`) 
    :type switch_management_ip: 
    
    
    :param switch_mac_address: (:attr:`switch_mac_address`) Switch Mac address
    :type switch_mac_address: 
    
    
    :param attached_switch_interface_list: (:attr:`attached_switch_interface_list`) List of network switch interfaces attached to the host NIC.
    :type attached_switch_interface_list: 
    
    
    :param rx_ring_size_in_bytes: (:attr:`rx_ring_size_in_bytes`) Size of configured buffer (in bytes) to the port associated with NIC, storing the network packets received through the port.
    :type rx_ring_size_in_bytes: 
    
    
    :param tx_ring_size_in_bytes: (:attr:`tx_ring_size_in_bytes`) Size of configured buffer (in bytes) to the port associated with NIC, storing the network packets that would be transmitted through the port.
    :type tx_ring_size_in_bytes: 
    
    
    :param link_capacity_in_mbps: (:attr:`link_capacity_in_mbps`) Link max speed that can be configured in Mbps.
    :type link_capacity_in_mbps: 
    
    
    :param cluster_ext_id: (:attr:`cluster_ext_id`) UUID of the cluster to which the host NIC belongs.
    :type cluster_ext_id: 
    
    
    :param nic_profile_ext_id: (:attr:`nic_profile_ext_id`) NIC profile ID to which the host NIC is attached.
    :type nic_profile_ext_id: 
    
    
    :param supported_capabilities: (:attr:`supported_capabilities`) List of supported capabilities of the host NIC.
    :type supported_capabilities: 
    
    
    :param driver_version: (:attr:`driver_version`) Driver version of the host NIC.
    :type driver_version: 
    
    
    :param firmware_version: (:attr:`firmware_version`) Firmware version of the host NIC.
    :type firmware_version: 
    
    
    :param virtual_nic_ext_ids: (:attr:`virtual_nic_ext_ids`) List of virtual NICs UUIDs associated with the host NIC.
    :type virtual_nic_ext_ids: 
    
    
    :param pci_model_id: (:attr:`pci_model_id`) PCI model ID of the host NIC.
    :type pci_model_id: 
    
    
    :param ext_id: (:attr:`ext_id`) A globally unique identifier of an instance that is suitable for external consumption. 
    :type ext_id: 
    
    
    :param links: (:attr:`links`) A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    :type links: 
    
    
    :param tenant_id: (:attr:`tenant_id`) A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this ID to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    :type tenant_id: 
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'host_description': 'str',
        'mac_address': 'str',
        'ipv4_addresses': 'list[common.v1.config.IPAddress]',
        'ipv6_addresses': 'list[common.v1.config.IPAddress]',
        'interface_status': 'str',
        'is_dhcp_enabled': 'bool',
        'link_speed_in_kbps': 'int',
        'mtu_in_bytes': 'int',
        'node_uuid': 'str',
        'discovery_protocol': 'str',
        'switch_device_id': 'str',
        'switch_port_id': 'str',
        'switch_vendor_info': 'str',
        'switch_vlan_id': 'str',
        'switch_management_ip': 'common.v1.config.IPAddress',
        'switch_mac_address': 'str',
        'attached_switch_interface_list': 'list[clustermgmt.v4.config.NetworkSwitchInterface]',
        'rx_ring_size_in_bytes': 'int',
        'tx_ring_size_in_bytes': 'int',
        'link_capacity_in_mbps': 'int',
        'cluster_ext_id': 'str',
        'nic_profile_ext_id': 'str',
        'supported_capabilities': 'list[str]',
        'driver_version': 'str',
        'firmware_version': 'str',
        'virtual_nic_ext_ids': 'list[str]',
        'pci_model_id': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'host_description': 'hostDescription',
        'mac_address': 'macAddress',
        'ipv4_addresses': 'ipv4Addresses',
        'ipv6_addresses': 'ipv6Addresses',
        'interface_status': 'interfaceStatus',
        'is_dhcp_enabled': 'isDhcpEnabled',
        'link_speed_in_kbps': 'linkSpeedInKbps',
        'mtu_in_bytes': 'mtuInBytes',
        'node_uuid': 'nodeUuid',
        'discovery_protocol': 'discoveryProtocol',
        'switch_device_id': 'switchDeviceId',
        'switch_port_id': 'switchPortId',
        'switch_vendor_info': 'switchVendorInfo',
        'switch_vlan_id': 'switchVlanId',
        'switch_management_ip': 'switchManagementIp',
        'switch_mac_address': 'switchMacAddress',
        'attached_switch_interface_list': 'attachedSwitchInterfaceList',
        'rx_ring_size_in_bytes': 'rxRingSizeInBytes',
        'tx_ring_size_in_bytes': 'txRingSizeInBytes',
        'link_capacity_in_mbps': 'linkCapacityInMbps',
        'cluster_ext_id': 'clusterExtId',
        'nic_profile_ext_id': 'nicProfileExtId',
        'supported_capabilities': 'supportedCapabilities',
        'driver_version': 'driverVersion',
        'firmware_version': 'firmwareVersion',
        'virtual_nic_ext_ids': 'virtualNicExtIds',
        'pci_model_id': 'pciModelId',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, host_description=None, mac_address=None, ipv4_addresses=None, ipv6_addresses=None, interface_status=None, is_dhcp_enabled=None, link_speed_in_kbps=None, mtu_in_bytes=None, node_uuid=None, discovery_protocol=None, switch_device_id=None, switch_port_id=None, switch_vendor_info=None, switch_vlan_id=None, switch_management_ip=None, switch_mac_address=None, attached_switch_interface_list=None, rx_ring_size_in_bytes=None, tx_ring_size_in_bytes=None, link_capacity_in_mbps=None, cluster_ext_id=None, nic_profile_ext_id=None, supported_capabilities=None, driver_version=None, firmware_version=None, virtual_nic_ext_ids=None, pci_model_id=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        HostNic.__init__(self, name, host_description, mac_address, ipv4_addresses, ipv6_addresses, interface_status, is_dhcp_enabled, link_speed_in_kbps, mtu_in_bytes, node_uuid, discovery_protocol, switch_device_id, switch_port_id, switch_vendor_info, switch_vlan_id, switch_management_ip, switch_mac_address, attached_switch_interface_list, rx_ring_size_in_bytes, tx_ring_size_in_bytes, link_capacity_in_mbps, cluster_ext_id, nic_profile_ext_id, supported_capabilities, driver_version, firmware_version, virtual_nic_ext_ids, pci_model_id, ext_id, links, tenant_id, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.HostNicProjection'

    def _initialize_object_version(self):
        return 'v4.r1'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(HostNicProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostNicProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

