# coding: utf-8


"""
IGNORE:
    Nutanix Cluster Management APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.PrivateKeyAlgorithm import PrivateKeyAlgorithm  # noqa: F401,E501

class SSLCertificate(object):

    """Detailed description of SSL certificate properties.

    :param passphrase: (:attr:`passphrase`) Passphrase used to decrypt private keys.
    :type passphrase: 
     min=1 chars, max=1000 chars
    
    :param private_key: (:attr:`private_key`) Information about the private key in SSL.
    :type private_key: 
     min=1 chars, max=2000000 chars
    
    :param public_certificate: (:attr:`public_certificate`) Details about the public SSL certificate.
    :type public_certificate: 
     min=1 chars, max=2000000 chars
    
    :param ca_chain: (:attr:`ca_chain`) Description of the certificate authority (CA) chain.
    :type ca_chain: 
     min=1 chars, max=2000000 chars
    
    :param private_key_algorithm: (:attr:`private_key_algorithm`) 
    :type private_key_algorithm: required
    
    

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'passphrase': 'str',
        'private_key': 'str',
        'public_certificate': 'str',
        'ca_chain': 'str',
        'private_key_algorithm': 'clustermgmt.v4.config.PrivateKeyAlgorithm',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'passphrase': 'passphrase',
        'private_key': 'privateKey',
        'public_certificate': 'publicCertificate',
        'ca_chain': 'caChain',
        'private_key_algorithm': 'privateKeyAlgorithm',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, passphrase=None, private_key=None, public_certificate=None, ca_chain=None, private_key_algorithm=None, *args, **kwargs):  # noqa: E501
        self.__passphrase = None
        self.__private_key = None
        self.__public_certificate = None
        self.__ca_chain = None
        self.__private_key_algorithm = None
        self.discriminator = None
        if passphrase is not None:
            self.__passphrase = passphrase
        if private_key is not None:
            self.__private_key = private_key
        if public_certificate is not None:
            self.__public_certificate = public_certificate
        if ca_chain is not None:
            self.__ca_chain = ca_chain
        self.__private_key_algorithm = private_key_algorithm
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.SSLCertificate'

    def _initialize_object_version(self):
        return 'v4.r1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def passphrase(self):
        """
        Passphrase used to decrypt private keys.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        if passphrase is not None and len(passphrase) > 1000:
            raise ValueError("Invalid value for `passphrase`, length must be less than or equal to `1000`")  # noqa: E501
        if passphrase is not None and len(passphrase) < 1:
            raise ValueError("Invalid value for `passphrase`, length must be greater than or equal to `1`")  # noqa: E501

        self.__passphrase = passphrase

    @property
    def private_key(self):
        """
        Information about the private key in SSL.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__private_key

    @private_key.setter
    def private_key(self, private_key):
        if private_key is not None and len(private_key) > 2000000:
            raise ValueError("Invalid value for `private_key`, length must be less than or equal to `2000000`")  # noqa: E501
        if private_key is not None and len(private_key) < 1:
            raise ValueError("Invalid value for `private_key`, length must be greater than or equal to `1`")  # noqa: E501

        self.__private_key = private_key

    @property
    def public_certificate(self):
        """
        Details about the public SSL certificate.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__public_certificate

    @public_certificate.setter
    def public_certificate(self, public_certificate):
        if public_certificate is not None and len(public_certificate) > 2000000:
            raise ValueError("Invalid value for `public_certificate`, length must be less than or equal to `2000000`")  # noqa: E501
        if public_certificate is not None and len(public_certificate) < 1:
            raise ValueError("Invalid value for `public_certificate`, length must be greater than or equal to `1`")  # noqa: E501

        self.__public_certificate = public_certificate

    @property
    def ca_chain(self):
        """
        Description of the certificate authority (CA) chain.

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__ca_chain

    @ca_chain.setter
    def ca_chain(self, ca_chain):
        if ca_chain is not None and len(ca_chain) > 2000000:
            raise ValueError("Invalid value for `ca_chain`, length must be less than or equal to `2000000`")  # noqa: E501
        if ca_chain is not None and len(ca_chain) < 1:
            raise ValueError("Invalid value for `ca_chain`, length must be greater than or equal to `1`")  # noqa: E501

        self.__ca_chain = ca_chain

    @property
    def private_key_algorithm(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.PrivateKeyAlgorithm`
        """  # noqa: E501
        return self.__private_key_algorithm

    @private_key_algorithm.setter
    def private_key_algorithm(self, private_key_algorithm):
        if private_key_algorithm is None:
            raise ValueError("Invalid value for `private_key_algorithm`, must not be `None`")  # noqa: E501

        self.__private_key_algorithm = private_key_algorithm

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:
                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):

            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(SSLCertificate, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSLCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

