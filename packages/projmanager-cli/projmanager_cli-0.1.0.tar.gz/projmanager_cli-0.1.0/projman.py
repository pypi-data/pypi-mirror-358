import os
import subprocess
import requests
import click
from pathlib import Path

@click.group()
def cli():
    """All-in-one project manager CLI tool."""
    pass

@cli.command()
@click.argument("project_name")
def create(project_name):
    """Create a new project structure."""
    base = Path(project_name)
    src = base / "src" / project_name
    tests = base / "tests"

    src.mkdir(parents=True, exist_ok=True)
    tests.mkdir(parents=True, exist_ok=True)
    (src / "__init__.py").touch()
    (tests / "test_sample.py").write_text("def test_sample(): assert True\n")
    (base / "README.md").write_text(f"# {project_name}\n\nGenerated by projman.")
    (base / ".gitignore").write_text("venv/\n__pycache__/\n*.pyc\n")
    (base / "pyproject.toml").write_text("[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"")
    (base / "setup.py").write_text(f"""from setuptools import setup, find_packages

setup(
    name="{project_name}",
    version="0.1",
    packages=find_packages(where="src"),
    package_dir={{"": "src"}},
)
""")
    click.echo(f"‚úÖ Project '{project_name}' created.")

@cli.command()
@click.argument("project_name")
@click.option("--install", help="Comma-separated packages to install in venv")
def venv(project_name, install):
    """Create a virtual environment in the project."""
    venv_path = Path(project_name) / "venv"
    subprocess.run(["python3", "-m", "venv", str(venv_path)])
    click.echo("‚úÖ Virtual environment created.")

    if install:
        pip_path = venv_path / "bin" / "pip"
        packages = install.split(",")
        subprocess.run([str(pip_path), "install"] + packages)
        click.echo(f"‚úÖ Installed: {', '.join(packages)}")

@cli.command()
@click.argument("project_name")
def publish(project_name):
    """Create a GitHub repo and push project."""
    token = os.getenv("GITHUB_TOKEN")
    if not token:
        click.echo("‚ùå Set your GITHUB_TOKEN environment variable.")
        return

    username = get_github_username(token)
    if not username:
        click.echo("‚ùå Could not fetch GitHub username.")
        return

    # Create GitHub repo
    response = requests.post(
        "https://api.github.com/user/repos",
        headers={
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json",
        },
        json={"name": project_name, "private": False}
    )

    if response.status_code == 201:
        click.echo("‚úÖ GitHub repo created.")
    elif response.status_code == 422:
        click.echo("‚ö†Ô∏è Repo may already exist.")
    else:
        click.echo(f"‚ùå GitHub error: {response.json()}")
        return

    # Local Git setup
    subprocess.run(["git", "init"], cwd=project_name)
    subprocess.run(["git", "add", "."], cwd=project_name)
    subprocess.run(["git", "commit", "-m", "Initial commit"], cwd=project_name)
    subprocess.run(["git", "branch", "-M", "main"], cwd=project_name)
    subprocess.run(["git", "remote", "add", "origin", f"https://github.com/{username}/{project_name}.git"], cwd=project_name)
    subprocess.run(["git", "push", "-u", "origin", "main"], cwd=project_name)

    click.echo("üöÄ Pushed to GitHub.")

def get_github_username(token):
    try:
        r = requests.get("https://api.github.com/user", headers={"Authorization": f"token {token}"})
        return r.json().get("login")
    except:
        return None

if __name__ == "__main__":
    cli()
