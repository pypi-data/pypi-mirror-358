Metadata-Version: 2.4
Name: shapes-overlay
Version: 0.1.0
Summary: Opera√ß√µes espaciais entre shapefiles com GeoPandas overlay
Author-email: Ricardo Malnati <ricardomalnati@gmail.com>
License-Expression: MIT
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: geopandas
Requires-Dist: shapely
Requires-Dist: fiona
Requires-Dist: pyproj

# shapes-overlay

[![Python](https://img.shields.io/badge/python-3.10%2B-blue?logo=python)](https://www.python.org/)
[![Docker](https://img.shields.io/badge/docker-ready-blue?logo=docker)](https://www.docker.com/)
[![Build](https://img.shields.io/badge/build-passing-brightgreen)](#)
[![License](https://img.shields.io/badge/license-MIT-green)](LICENSE)
[![Executar no Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/Malnati/shapes-overlay/blob/main/overlay.ipynb)
[![PyPI version](https://img.shields.io/pypi/v/shapes-overlay.svg)](https://pypi.org/project/shapes-overlay/)

# ‚ú® Objetivo

Este aplicativo realiza **opera√ß√µes espaciais entre dois arquivos Shapefile (`.shp`)** utilizando a fun√ß√£o `overlay` da biblioteca [GeoPandas](https://geopandas.org/). A entrada consiste em dois shapefiles (ou `.zip` contendo o shapefile completo) e a sa√≠da √© um novo shapefile resultante da opera√ß√£o escolhida.

---

# √çndice

- [‚öôÔ∏è Opera√ß√µes dispon√≠veis (`--how`)](#Ô∏è-opera√ß√µes-dispon√≠veis---how-)
- [üß† O que o projeto realmente faz (trecho principal de c√≥digo)](#-o-que-o-projeto-realmente-faz-trecho-principal-de-c√≥digo)
- [üì• Par√¢metros dispon√≠veis](#-par√¢metros-dispon√≠veis)
- [üöÄ Como usar](#-como-usar)
  - [1Ô∏è‚É£ Execu√ß√£o via Python (direto)](#1Ô∏è‚É£-execu√ß√£o-via-python-direto)
  - [2Ô∏è‚É£ Execu√ß√£o via Docker Compose](#2Ô∏è‚É£-execu√ß√£o-via-docker-compose)
  - [3Ô∏è‚É£ Execu√ß√£o via Google Colab (Notebook Interativo)](#3Ô∏è‚É£-execu√ß√£o-via-google-colab-notebook-interativo)
  - [4Ô∏è‚É£ Execu√ß√£o via API](#4Ô∏è‚É£-execu√ß√£o-via-api)
    - [Campos esperados (multipart/form)](#campos-esperados-multipartform)
    - [Exemplo via curl](#exemplo-via-curl)
  - [5Ô∏è‚É£ Importa√ß√£o como m√≥dulo Python](#5Ô∏è‚É£-importa√ß√£o-como-m√≥dulo-python)
- [üì¶ Resultados e arquivos de sa√≠da](#-resultados-e-arquivos-de-sa√≠da)
- [üß™ Exemplo de Teste Realizado via API](#-exemplo-de-teste-realizado-via-api)
- [üñºÔ∏è Exemplos Visuais (Swagger e Resposta)](#-exemplos-visuais-swagger-e-resposta)

---

# ‚öôÔ∏è Opera√ß√µes dispon√≠veis (`--how`)

| Opera√ß√£o (`how`)        | Descri√ß√£o                                                                 |
|-------------------------|---------------------------------------------------------------------------|
| `intersection`          | Retorna apenas as **√°reas comuns** entre os dois shapes                   |
| `union`                 | Retorna **toda a √°rea combinada** dos dois shapes                         |
| `identity`              | Retorna os pol√≠gonos de `input_shape1`, divididos por `input_shape2`      |
| `symmetric_difference`  | Retorna as √°reas **exclusivas de cada shape**, sem interse√ß√£o             |
| `difference`            | Retorna apenas as √°reas de `input_shape1` que **n√£o est√£o em** `input_shape2` |

---

# üß† O que o projeto realmente faz (trecho principal de c√≥digo)

Abaixo, o trecho real que encapsula a execu√ß√£o da fun√ß√£o `gpd.overlay`, incluindo a reproje√ß√£o de CRS quando necess√°rio:

```python
if reproject and gdf1.crs != gdf2.crs:
    print(f'üîÅ Convertendo CRS de gdf2 ({gdf2.crs}) para coincidir com gdf1 ({gdf1.crs})')
    gdf2 = gdf2.to_crs(gdf1.crs)

resultado = gpd.overlay(
    gdf1, gdf2,
    how=how,
    keep_geom_type=keep_geom_type,
    make_valid=make_valid,
    use_sindex=use_sindex
)
```


Este c√≥digo garante que as opera√ß√µes geom√©tricas sejam realizadas com precis√£o e seguran√ßa, mesmo quando os arquivos t√™m sistemas de coordenadas diferentes ou geometrias imperfeitas.

---

# üì• Par√¢metros dispon√≠veis

| Par√¢metro         | Tipo  | Obrigat√≥rio | Padr√£o | Descri√ß√£o                                                    |
|-------------------|-------|-------------|--------|--------------------------------------------------------------|
| --input_shape1    | str   | ‚úÖ          |   ‚Äî    | Caminho para o primeiro shapefile (ex: CAR)                  |
| --input_shape2    | str   | ‚úÖ          |   ‚Äî    | Caminho para o segundo shapefile                             |
| --output_shape    | str   | ‚úÖ          |   ‚Äî    | Caminho onde o shapefile de sa√≠da ser√° salvo                 |
| --how             | str   | ‚úÖ          |   ‚Äî    | Tipo de opera√ß√£o espacial: **intersection**, **union**, **identity**, **symmetric_difference** ou **difference** |
| --reproject       | bool  | ‚ùå          | true   | Reprojetar input_shape2 para o CRS de input_shape1           |
| --keep_geom_type  | bool  | ‚ùå          | true   | Manter o tipo original da geometria (evita mistura de tipos) |
| --make_valid      | bool  | ‚ùå          | true   | Corrigir geometrias inv√°lidas automaticamente                |

---

# üöÄ Como usar

## 1Ô∏è‚É£ Execu√ß√£o via Python (direto)

```bash
python overlay.py \
  --input_shape1 path/para/shape1.shp \
  --input_shape2 path/para/shape2.shp \
  --output_shape path/para/overlayed.shp \
  --how intersection
```
---

## 2Ô∏è‚É£ Execu√ß√£o via Docker Compose

```bash
docker compose build INPUT_SHAPE1=shape1.shp \
			INPUT_SHAPE2=shape2.shp \
			OUTPUT_SHAPE=overlayed.shp \
			HOW=intersection \
docker compose up overlay
```
---

## 3Ô∏è‚É£ Execu√ß√£o via Google Colab (Notebook Interativo)

Al√©m das formas tradicionais de uso, voc√™ pode executar o projeto diretamente no navegador, sem instalar nada, utilizando o [notebook interativo no Google Colab](https://colab.research.google.com/github/Malnati/shapes-overlay/blob/main/overlay.ipynb). Esta √© a maneira mais simples e acess√≠vel para testar rapidamente as opera√ß√µes de overlay entre shapefiles.

## Como funciona?

1. **Acesse o notebook:**
   - Clique no badge "Executar no Colab" no topo deste README ou [acesse diretamente aqui](https://colab.research.google.com/github/Malnati/shapes-overlay/blob/main/overlay.ipynb).

2. **Fa√ßa upload dos arquivos:**
   - O notebook apresenta uma interface gr√°fica para upload de dois arquivos `.zip`, cada um contendo um shapefile completo (com `.shp`, `.shx`, `.dbf`, `.prj`, etc).
   - Exemplo da interface:

     ![Interface do notebook](./assets/GoogleColabsOverlayNotebook.png)

3. **Escolha a opera√ß√£o e par√¢metros:**
   - Selecione o tipo de opera√ß√£o espacial desejada (`intersection`, `union`, `identity`, `symmetric_difference` ou `difference`).
   - Marque/desmarque as op√ß√µes de `keep_geom_type`, `make_valid` e `reproject` conforme necess√°rio.

4. **Execute o overlay:**
   - Clique no bot√£o **Executar Overlay**.
   - O notebook ir√° processar os arquivos, realizar a opera√ß√£o escolhida e gerar um novo shapefile compactado (`resultado_overlay.zip`).
   - Exemplo de mensagem de sucesso e bot√£o de download:

     ![Download do resultado](./assets/GoogleColabsOverlayNotebook-Downloading.png.png)

5. **Baixe o resultado:**
   - O arquivo `.zip` gerado estar√° pronto para download diretamente pelo navegador.

## Vantagens do uso via Colab
- N√£o requer instala√ß√£o de depend√™ncias locais.
- Interface amig√°vel e interativa.
- Ideal para testes r√°pidos e demonstra√ß√µes.

> **Dica:** O notebook utiliza as mesmas op√ß√µes e l√≥gica do c√≥digo principal do projeto, garantindo resultados id√™nticos aos obtidos via linha de comando ou API.

> **Nota:** O par√¢metro `--how` aceita apenas os seguintes valores: `intersection`, `union`, `identity`, `symmetric_difference`, `difference`. Qualquer outro valor resultar√° em erro.
---

## 4Ô∏è‚É£ Execu√ß√£o via API

**Como iniciar**

`docker compose up -d api`

Acesse: http://localhost:8383/docs para ver a documenta√ß√£o Swagger.

Endpoint: `POST /overlay`

Envia dois arquivos `.zip` (cada um contendo os arquivos do shapefile completo) e retorna o shapefile resultante da opera√ß√£o.

### Campos esperados (multipart/form):

| Campo         | Tipo                | Obrigat√≥rio | Descri√ß√£o                                            |
|---------------|---------------------|-------------|-----------------------------------------------------|
| input_shape1  | UploadFile (.zip)   | ‚úÖ          | Primeiro shapefile compactado                        |
| input_shape2  | UploadFile (.zip)   | ‚úÖ          | Segundo shapefile compactado                         |
| how           | str                 | ‚úÖ          | Tipo de opera√ß√£o: **intersection**, **union**, **identity**, **symmetric_difference** ou **difference** |
| reproject     | bool                | ‚ùå          | Reprojetar ou n√£o (true por padr√£o)                  |
| keep_geom_type| bool                | ‚ùå          | Manter tipo de geometria (true por padr√£o)           |
| make_valid    | bool                | ‚ùå          | Corrigir geometrias inv√°lidas (true por padr√£o)      |

## Exemplo via curl:
```bash
curl -X POST http://localhost:8383/overlay \
  -F "input_shape1=@shape1.zip" \
  -F "input_shape2=@shape2.zip" \
  -F "how=union" \
  --output resultado_union.zip

curl -X POST http://localhost:8383/overlay \
  -F "input_shape1=@shape1.zip" \
  -F "input_shape2=@shape2.zip" \
  -F "how=identity" \
  --output resultado_identity.zip
```
---

## 5Ô∏è‚É£ Importa√ß√£o como m√≥dulo Python

Voc√™ pode usar a fun√ß√£o diretamente:

```Python
from overlay import overlay

overlay(
    input_shape1="shape1.shp",
    input_shape2="shape2.shp",
    output_shape="overlayed.shp",
    how="difference"
)
```
---

# üì¶ Resultados e arquivos de sa√≠da

O resultado √© um novo shapefile salvo no caminho definido em --output_shape ou retornado compactado via API. Ele inclui os arquivos:

```plain
overlayed.zip
‚îú‚îÄ‚îÄ overlayed.shp
‚îú‚îÄ‚îÄ overlayed.shx
‚îú‚îÄ‚îÄ overlayed.dbf
‚îî‚îÄ‚îÄ overlayed.prj
```
---

# üß™ Exemplo de Teste Realizado via API

Abaixo est√° um exemplo real de teste realizado utilizando o endpoint `POST /overlay` da API, via Swagger.

### Par√¢metros utilizados
- **input_shape1:** [`Biomas_BR_ABC_2021.zip`](./Biomas_BR_ABC_2021.zip)
- **input_shape2:** [`Brasil.zip`](./Brasil.zip)
- **how:** `intersection`
- **keep_geom_type:** `true` (padr√£o)
- **make_valid:** `true` (padr√£o)
- **reproject:** `true` (padr√£o)

### Requisi√ß√£o via Swagger (c√≥digo gerado)
```bash
curl -X 'POST' \
  'http://192.168.5.179:8383/overlay' \
  -H 'accept: application/json' \
  -H 'Content-Type: multipart/form-data' \
  -F 'input_shape1=@Biomas_BR_ABC_2021.zip;type=application/zip' \
  -F 'input_shape2=@Brasil.zip;type=application/zip' \
  -F 'how=intersection' \
  -F 'keep_geom_type=true' \
  -F 'make_valid=true' \
  -F 'reproject=true'
```

# üñºÔ∏è Exemplos Visuais (Swagger e Resposta)

#### Exemplo visual do POST (Swagger UI):
![POST /overlay - Swagger UI](./assets/OverlayParameters.png)

#### Exemplo visual do Server response:
![Server response - Swagger UI](./assets/Responsebody.png)

### Arquivo de sa√≠da gerado
- [`intersection.zip`](./intersection.zip) ‚Äî resultado do teste (tempo de execu√ß√£o: **menos de 1 min**)

O arquivo de sa√≠da cont√©m o shapefile resultante da opera√ß√£o de interse√ß√£o entre os biomas e o shape do Brasil.

üìù Licen√ßa

MIT ‚Äî consulte o arquivo LICENSE para mais detalhes.
