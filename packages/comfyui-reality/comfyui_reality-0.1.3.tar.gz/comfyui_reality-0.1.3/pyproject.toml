[project]
name = "comfyui-reality"
version = "0.1.3"
description = "Experimental AR/USDZ export toolkit for ComfyUI - Create AR-ready 3D content from existing workflows"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Gerred Dillon", email = "hello@gerred.org" }
]
maintainers = [
    { name = "Gerred Dillon", email = "hello@gerred.org" }
]
requires-python = ">=3.12"
keywords = ["comfyui", "ar", "usdz", "3d", "stickers", "augmented-reality", "arkit", "ios", "custom-nodes"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: GPU :: NVIDIA CUDA",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Artistic Software",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "pillow>=10.0.0",
    "numpy>=1.24.0",
    "opencv-python>=4.8.0",
    "trimesh>=4.0.0",
    "pydantic>=2.5.0",
    "httpx>=0.25.0",
    "websockets>=12.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "anyio>=4.0.0",
    "comfy-cli>=1.4.1",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
]

usdz-export = [
    "usd-core>=23.11",  # USD Python bindings for USDZ export
]
full = [
    "usd-core>=23.11",
]

[project.scripts]
comfy-reality = "comfy_reality.runtime.cli:cli"
comfy-runtime = "comfy_reality.runtime.cli:cli"

[project.urls]
Homepage = "https://github.com/gerred/comfyui-reality"
Repository = "https://github.com/gerred/comfyui-reality"
Issues = "https://github.com/gerred/comfyui-reality/issues"
Documentation = "https://github.com/gerred/comfyui-reality#readme"
Changelog = "https://github.com/gerred/comfyui-reality/releases"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/comfy_reality"]

# ComfyUI Registry Configuration
[tool.comfy]
PublisherId = "gerred"
DisplayName = "ComfyUI Reality"
node_files = ["src/comfy_reality/nodes"]
custom_node_class_mappings = "comfy_reality.nodes"
description = "AR/USDZ export toolkit for ComfyUI - Create AR-ready 3D content"
homepage = "https://github.com/gerred/comfyui-reality"
documentation = "https://github.com/gerred/comfyui-reality#readme"
version = "0.1.1"
tags = ["ar", "3d-modeling", "usdz", "stickers", "export", "arkit", "ios"]
icon = "ðŸ¥½"
maintainer = "Gerred Dillon <hello@gerred.org>"
license = "MIT"
compatibility.comfyui = ">=0.1.0"
compatibility.python = ">=3.12"

[tool.comfy.requirements]
system = [
    "ffmpeg",  # For media processing
]
python = [
    "pillow>=10.0.0",
    "numpy>=1.24.0", 
    "trimesh>=4.0.0",
    # usd-core is in main dependencies
    "pydantic>=2.5.0",
]

# Ruff configuration for modern Python linting
[tool.ruff]
line-length = 140
target-version = "py312"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["B011"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# PyTest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=comfy_reality",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "trimesh.*",
    "pxr.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

