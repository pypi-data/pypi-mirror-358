name: Build Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --extra dev
    
    - name: Lint with ruff
      run: |
        uv run ruff check src tests
        uv run ruff format --check src tests
    
    - name: Type check with mypy
      run: |
        uv run mypy src
    
    - name: Test with pytest
      run: |
        uv run pytest --cov=comfy_reality --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Build package
      run: |
        uv build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.python-version }}
        path: dist/

  validate-comfyui:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python 3.12
      run: uv python install 3.12
    
    - name: Install ComfyUI for validation
      run: |
        git clone https://github.com/comfyanonymous/ComfyUI.git
        cd ComfyUI
        uv sync
        cd ..
    
    - name: Install package in development mode
      run: |
        uv sync --extra dev
    
    - name: Test node loading
      run: |
        cd ComfyUI
        python -c "
        import sys
        sys.path.insert(0, '../src')
        try:
            from comfy_reality.nodes import NODE_CLASS_MAPPINGS, NODE_DISPLAY_NAME_MAPPINGS
            print(f'Successfully loaded {len(NODE_CLASS_MAPPINGS)} nodes')
            for name in NODE_CLASS_MAPPINGS:
                print(f'  - {name}')
        except Exception as e:
            print(f'Failed to load nodes: {e}')
            sys.exit(1)
        "
