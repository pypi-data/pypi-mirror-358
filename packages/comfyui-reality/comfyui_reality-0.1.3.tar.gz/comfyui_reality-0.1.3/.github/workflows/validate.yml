name: Validate ComfyUI Compatibility

on:
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Mondays at 6 AM UTC
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: 
      - 'src/comfy_reality/nodes/**'
      - 'pyproject.toml'
      - '.github/workflows/validate.yml'

jobs:
  validate-compatibility:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        comfyui-version: ["latest", "stable"]
        python-version: ["3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install ComfyUI ${{ matrix.comfyui-version }}
      run: |
        if [ "${{ matrix.comfyui-version }}" == "latest" ]; then
          git clone https://github.com/comfyanonymous/ComfyUI.git
        else
          git clone --depth 1 --branch stable https://github.com/comfyanonymous/ComfyUI.git
        fi
        cd ComfyUI
        uv sync
        cd ..
    
    - name: Install package
      run: |
        uv sync --extra dev
    
    - name: Test node registration
      run: |
        cd ComfyUI
        python -c "
        import sys
        import os
        sys.path.insert(0, '../src')
        
        # Test node imports
        try:
            from comfy_reality.nodes import NODE_CLASS_MAPPINGS, NODE_DISPLAY_NAME_MAPPINGS
            print(f'✓ Loaded {len(NODE_CLASS_MAPPINGS)} node classes')
            print(f'✓ Loaded {len(NODE_DISPLAY_NAME_MAPPINGS)} display names')
            
            # Validate node structure
            for node_name, node_class in NODE_CLASS_MAPPINGS.items():
                print(f'Validating {node_name}...')
                
                # Check required methods
                if not hasattr(node_class, 'INPUT_TYPES'):
                    raise ValueError(f'{node_name} missing INPUT_TYPES')
                if not hasattr(node_class, 'FUNCTION'):
                    raise ValueError(f'{node_name} missing FUNCTION')
                if not hasattr(node_class, 'CATEGORY'):
                    raise ValueError(f'{node_name} missing CATEGORY')
                
                # Check input types structure
                input_types = node_class.INPUT_TYPES()
                if not isinstance(input_types, dict):
                    raise ValueError(f'{node_name} INPUT_TYPES must return dict')
                
                print(f'✓ {node_name} structure valid')
                
        except Exception as e:
            print(f'✗ Node validation failed: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        
        print('✓ All nodes validated successfully')
        "
    
    - name: Test node execution (dry run)
      run: |
        cd ComfyUI
        python -c "
        import sys
        sys.path.insert(0, '../src')
        
        try:
            from comfy_reality.nodes import NODE_CLASS_MAPPINGS
            
            # Test basic node instantiation
            for node_name, node_class in NODE_CLASS_MAPPINGS.items():
                print(f'Testing {node_name} instantiation...')
                
                try:
                    instance = node_class()
                    print(f'✓ {node_name} can be instantiated')
                except Exception as e:
                    print(f'✗ {node_name} instantiation failed: {e}')
                    # Continue with other nodes
                    continue
                    
        except Exception as e:
            print(f'✗ Node execution test failed: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
            
        print('✓ All node instantiation tests passed')
        "
    
    - name: Validate package metadata
      run: |
        uv run python -c "
        import tomllib
        import sys
        
        with open('pyproject.toml', 'rb') as f:
            config = tomllib.load(f)
        
        # Check ComfyUI specific configuration
        if 'tool' not in config:
            print('✗ Missing [tool] section')
            sys.exit(1)
            
        if 'comfy' not in config['tool']:
            print('✗ Missing [tool.comfy] section')
            sys.exit(1)
            
        comfy_config = config['tool']['comfy']
        
        required_fields = ['node_files', 'display_name', 'description', 'version']
        for field in required_fields:
            if field not in comfy_config:
                print(f'✗ Missing required field: {field}')
                sys.exit(1)
                
        print('✓ Package metadata validation passed')
        "
    
    - name: Check backward compatibility
      run: |
        # Create a simple test workflow to ensure our nodes work
        cd ComfyUI
        python -c "
        import sys
        import json
        sys.path.insert(0, '../src')
        
        # Mock workflow test
        workflow = {
            'nodes': {
                '1': {
                    'class_type': 'ARStickerGenerator',
                    'inputs': {}
                }
            }
        }
        
        print('✓ Workflow structure validation passed')
        print(f'✓ ComfyUI compatibility validated for version: ${{ matrix.comfyui-version }}')
        "
    
    - name: Generate compatibility report
      if: always()
      run: |
        echo "## ComfyUI Compatibility Report" >> $GITHUB_STEP_SUMMARY
        echo "- **ComfyUI Version**: ${{ matrix.comfyui-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Result**: All compatibility tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Result**: Compatibility issues detected" >> $GITHUB_STEP_SUMMARY
        fi

  test-installation:
    runs-on: ubuntu-latest
    needs: validate-compatibility
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Test fresh installation
      run: |
        # Test installation from source
        uv sync --extra dev
        
        # Test that the package can be imported
        uv run python -c "
        import comfy_reality
        print(f'✓ Package imported successfully: {comfy_reality.__file__}')
        "
        
        # Test CLI tools
        uv run comfy-reality --help
        
        echo "✅ Fresh installation test passed" >> $GITHUB_STEP_SUMMARY
