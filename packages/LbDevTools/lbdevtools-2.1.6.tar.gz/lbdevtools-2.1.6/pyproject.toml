[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "LbDevTools"
authors = [{name = "CERN - LHCb Core Software", email = "lhcb-core-soft@cern.ch"}]
license = {text = "GPLv3+"}
description = "LHCb development tools"
readme = "README.rst"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python :: 3",
]
requires-python = ">=3.12"
dependencies = [
    "LbEnv>=0.3.0",
    "LbPlatformUtils",
    "jinja2",
    "yapf==0.24.0",
    "whichcraft",
    "six",
    "GitPython>=2.1.12",
    "python-gitlab>=2",
    "gitdb2>=3",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://gitlab.cern.ch/lhcb-core/LbDevTools"

[project.optional-dependencies]
testing = ["coverage", "pytest"]

[project.scripts]
lb-project-init = "LbDevTools.ProjectInit:main"
lb-dev = "LbDevTools.ProjectDev:main"
lb-devtools-datadir = "LbDevTools:_print_data_location"
lb-gen-release-notes = "LbDevTools.ReleaseNotes:main"
lb-check-copyright = "LbDevTools.SourceTools:check_copyright"
lb-add-copyright = "LbDevTools.SourceTools:add_copyright"
lb-format = "LbDevTools.SourceTools:format"
lb-clang-format = "LbDevTools.SourceTools:clang_format"
lb-glimpse = "LbDevTools.Indexing:search"
git-lb-use = "LbDevTools.GitTools.use:main"
git-lb-checkout = "LbDevTools.GitTools.checkout:main"
git-lb-push = "LbDevTools.GitTools.push:main"
git-lb-clone-pkg = "LbDevTools.GitTools.clone_pkg:main"
git-lb-reset-mtime = "LbDevTools.GitTools.reset_mtime:main"

[tool.setuptools]
zip-safe = false
include-package-data = true
script-files = ["bin/lb-gen-compiler-wrapper"]

[tool.setuptools.packages.find]
exclude = ["*.tests"]
namespaces = false

[tool.setuptools_scm]

[tool.ruff.lint]
ignore = ["E741", "SIM115", "UP031"]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "FURB",     # refurb
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
#   "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PYI",      # flake8-pyi
  "RET",      # flake8-return
#   "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "linux-aarch64", "osx-arm64"]

[tool.pixi.dependencies]
python = "*"

[tool.pixi.feature.testing.dependencies]
cmake = "*"
make = "*"
git = "*"
c-compiler = "*"

[tool.pixi.pypi-dependencies]
LbDevTools = { path = ".", editable = true }

[tool.pixi.feature.testing.tasks.pytest]
cmd = "pytest"

[tool.pixi.feature.pre-commit.dependencies]
pre-commit = "*"

[tool.pixi.feature.pre-commit.tasks.pre-commit]
cmd = "pre-commit"

[tool.pixi.environments]
default = { solve-group = "default" }
testing = { features = ["testing"], solve-group = "default" }
pre-commit = { features = ["pre-commit"], no-default-feature = true }
