# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import py_micro.model.auth_service_pb2 as auth__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in auth_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthServiceStub(object):
    """Auth Service for managing roles, and permissions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRole = channel.unary_unary(
                '/auth.v1.AuthService/CreateRole',
                request_serializer=auth__service__pb2.CreateRoleRequest.SerializeToString,
                response_deserializer=auth__service__pb2.Role.FromString,
                _registered_method=True)
        self.GetRole = channel.unary_unary(
                '/auth.v1.AuthService/GetRole',
                request_serializer=auth__service__pb2.GetRoleRequest.SerializeToString,
                response_deserializer=auth__service__pb2.Role.FromString,
                _registered_method=True)
        self.UpdateRole = channel.unary_unary(
                '/auth.v1.AuthService/UpdateRole',
                request_serializer=auth__service__pb2.UpdateRoleRequest.SerializeToString,
                response_deserializer=auth__service__pb2.Role.FromString,
                _registered_method=True)
        self.DeleteRole = channel.unary_unary(
                '/auth.v1.AuthService/DeleteRole',
                request_serializer=auth__service__pb2.DeleteRoleRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListRoles = channel.unary_unary(
                '/auth.v1.AuthService/ListRoles',
                request_serializer=auth__service__pb2.ListRolesRequest.SerializeToString,
                response_deserializer=auth__service__pb2.ListRolesResponse.FromString,
                _registered_method=True)
        self.AssignRoleToUser = channel.unary_unary(
                '/auth.v1.AuthService/AssignRoleToUser',
                request_serializer=auth__service__pb2.AssignRoleToUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.RemoveRoleFromUser = channel.unary_unary(
                '/auth.v1.AuthService/RemoveRoleFromUser',
                request_serializer=auth__service__pb2.RemoveRoleFromUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.CreatePermission = channel.unary_unary(
                '/auth.v1.AuthService/CreatePermission',
                request_serializer=auth__service__pb2.CreatePermissionRequest.SerializeToString,
                response_deserializer=auth__service__pb2.Permission.FromString,
                _registered_method=True)
        self.GetPermission = channel.unary_unary(
                '/auth.v1.AuthService/GetPermission',
                request_serializer=auth__service__pb2.GetPermissionRequest.SerializeToString,
                response_deserializer=auth__service__pb2.Permission.FromString,
                _registered_method=True)
        self.UpdatePermission = channel.unary_unary(
                '/auth.v1.AuthService/UpdatePermission',
                request_serializer=auth__service__pb2.UpdatePermissionRequest.SerializeToString,
                response_deserializer=auth__service__pb2.Permission.FromString,
                _registered_method=True)
        self.DeletePermission = channel.unary_unary(
                '/auth.v1.AuthService/DeletePermission',
                request_serializer=auth__service__pb2.DeletePermissionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListPermissions = channel.unary_unary(
                '/auth.v1.AuthService/ListPermissions',
                request_serializer=auth__service__pb2.ListPermissionsRequest.SerializeToString,
                response_deserializer=auth__service__pb2.ListPermissionsResponse.FromString,
                _registered_method=True)
        self.AssignPermissionToRole = channel.unary_unary(
                '/auth.v1.AuthService/AssignPermissionToRole',
                request_serializer=auth__service__pb2.AssignPermissionToRoleRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.RemovePermissionFromRole = channel.unary_unary(
                '/auth.v1.AuthService/RemovePermissionFromRole',
                request_serializer=auth__service__pb2.RemovePermissionFromRoleRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/auth.v1.AuthService/Login',
                request_serializer=auth__service__pb2.LoginRequest.SerializeToString,
                response_deserializer=auth__service__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/auth.v1.AuthService/Logout',
                request_serializer=auth__service__pb2.LogoutRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.RefreshToken = channel.unary_unary(
                '/auth.v1.AuthService/RefreshToken',
                request_serializer=auth__service__pb2.RefreshTokenRequest.SerializeToString,
                response_deserializer=auth__service__pb2.RefreshTokenResponse.FromString,
                _registered_method=True)
        self.VerifyToken = channel.unary_unary(
                '/auth.v1.AuthService/VerifyToken',
                request_serializer=auth__service__pb2.VerifyTokenRequest.SerializeToString,
                response_deserializer=auth__service__pb2.VerifyTokenResponse.FromString,
                _registered_method=True)
        self.CheckPermission = channel.unary_unary(
                '/auth.v1.AuthService/CheckPermission',
                request_serializer=auth__service__pb2.CheckPermissionRequest.SerializeToString,
                response_deserializer=auth__service__pb2.CheckPermissionResponse.FromString,
                _registered_method=True)
        self.CheckUserPermissions = channel.unary_unary(
                '/auth.v1.AuthService/CheckUserPermissions',
                request_serializer=auth__service__pb2.CheckUserPermissionsRequest.SerializeToString,
                response_deserializer=auth__service__pb2.CheckUserPermissionsResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/auth.v1.AuthService/HealthCheck',
                request_serializer=auth__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=auth__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class AuthServiceServicer(object):
    """Auth Service for managing roles, and permissions
    """

    def CreateRole(self, request, context):
        """Role Management Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignRoleToUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveRoleFromUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePermission(self, request, context):
        """Permission Management Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPermission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePermission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePermission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPermissions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignPermissionToRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemovePermissionFromRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Authentication Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckPermission(self, request, context):
        """Authorization Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUserPermissions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check endpoint (retained from template)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRole,
                    request_deserializer=auth__service__pb2.CreateRoleRequest.FromString,
                    response_serializer=auth__service__pb2.Role.SerializeToString,
            ),
            'GetRole': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRole,
                    request_deserializer=auth__service__pb2.GetRoleRequest.FromString,
                    response_serializer=auth__service__pb2.Role.SerializeToString,
            ),
            'UpdateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRole,
                    request_deserializer=auth__service__pb2.UpdateRoleRequest.FromString,
                    response_serializer=auth__service__pb2.Role.SerializeToString,
            ),
            'DeleteRole': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRole,
                    request_deserializer=auth__service__pb2.DeleteRoleRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListRoles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoles,
                    request_deserializer=auth__service__pb2.ListRolesRequest.FromString,
                    response_serializer=auth__service__pb2.ListRolesResponse.SerializeToString,
            ),
            'AssignRoleToUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignRoleToUser,
                    request_deserializer=auth__service__pb2.AssignRoleToUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'RemoveRoleFromUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveRoleFromUser,
                    request_deserializer=auth__service__pb2.RemoveRoleFromUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreatePermission': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePermission,
                    request_deserializer=auth__service__pb2.CreatePermissionRequest.FromString,
                    response_serializer=auth__service__pb2.Permission.SerializeToString,
            ),
            'GetPermission': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPermission,
                    request_deserializer=auth__service__pb2.GetPermissionRequest.FromString,
                    response_serializer=auth__service__pb2.Permission.SerializeToString,
            ),
            'UpdatePermission': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePermission,
                    request_deserializer=auth__service__pb2.UpdatePermissionRequest.FromString,
                    response_serializer=auth__service__pb2.Permission.SerializeToString,
            ),
            'DeletePermission': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePermission,
                    request_deserializer=auth__service__pb2.DeletePermissionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPermissions,
                    request_deserializer=auth__service__pb2.ListPermissionsRequest.FromString,
                    response_serializer=auth__service__pb2.ListPermissionsResponse.SerializeToString,
            ),
            'AssignPermissionToRole': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignPermissionToRole,
                    request_deserializer=auth__service__pb2.AssignPermissionToRoleRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'RemovePermissionFromRole': grpc.unary_unary_rpc_method_handler(
                    servicer.RemovePermissionFromRole,
                    request_deserializer=auth__service__pb2.RemovePermissionFromRoleRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=auth__service__pb2.LoginRequest.FromString,
                    response_serializer=auth__service__pb2.LoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=auth__service__pb2.LogoutRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'RefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshToken,
                    request_deserializer=auth__service__pb2.RefreshTokenRequest.FromString,
                    response_serializer=auth__service__pb2.RefreshTokenResponse.SerializeToString,
            ),
            'VerifyToken': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyToken,
                    request_deserializer=auth__service__pb2.VerifyTokenRequest.FromString,
                    response_serializer=auth__service__pb2.VerifyTokenResponse.SerializeToString,
            ),
            'CheckPermission': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckPermission,
                    request_deserializer=auth__service__pb2.CheckPermissionRequest.FromString,
                    response_serializer=auth__service__pb2.CheckPermissionResponse.SerializeToString,
            ),
            'CheckUserPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUserPermissions,
                    request_deserializer=auth__service__pb2.CheckUserPermissionsRequest.FromString,
                    response_serializer=auth__service__pb2.CheckUserPermissionsResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=auth__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=auth__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.v1.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('auth.v1.AuthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Auth Service for managing roles, and permissions
    """

    @staticmethod
    def CreateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/CreateRole',
            auth__service__pb2.CreateRoleRequest.SerializeToString,
            auth__service__pb2.Role.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/GetRole',
            auth__service__pb2.GetRoleRequest.SerializeToString,
            auth__service__pb2.Role.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/UpdateRole',
            auth__service__pb2.UpdateRoleRequest.SerializeToString,
            auth__service__pb2.Role.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/DeleteRole',
            auth__service__pb2.DeleteRoleRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRoles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/ListRoles',
            auth__service__pb2.ListRolesRequest.SerializeToString,
            auth__service__pb2.ListRolesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignRoleToUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/AssignRoleToUser',
            auth__service__pb2.AssignRoleToUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveRoleFromUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/RemoveRoleFromUser',
            auth__service__pb2.RemoveRoleFromUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/CreatePermission',
            auth__service__pb2.CreatePermissionRequest.SerializeToString,
            auth__service__pb2.Permission.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/GetPermission',
            auth__service__pb2.GetPermissionRequest.SerializeToString,
            auth__service__pb2.Permission.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/UpdatePermission',
            auth__service__pb2.UpdatePermissionRequest.SerializeToString,
            auth__service__pb2.Permission.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletePermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/DeletePermission',
            auth__service__pb2.DeletePermissionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/ListPermissions',
            auth__service__pb2.ListPermissionsRequest.SerializeToString,
            auth__service__pb2.ListPermissionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignPermissionToRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/AssignPermissionToRole',
            auth__service__pb2.AssignPermissionToRoleRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemovePermissionFromRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/RemovePermissionFromRole',
            auth__service__pb2.RemovePermissionFromRoleRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/Login',
            auth__service__pb2.LoginRequest.SerializeToString,
            auth__service__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/Logout',
            auth__service__pb2.LogoutRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/RefreshToken',
            auth__service__pb2.RefreshTokenRequest.SerializeToString,
            auth__service__pb2.RefreshTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/VerifyToken',
            auth__service__pb2.VerifyTokenRequest.SerializeToString,
            auth__service__pb2.VerifyTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckPermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/CheckPermission',
            auth__service__pb2.CheckPermissionRequest.SerializeToString,
            auth__service__pb2.CheckPermissionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckUserPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/CheckUserPermissions',
            auth__service__pb2.CheckUserPermissionsRequest.SerializeToString,
            auth__service__pb2.CheckUserPermissionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.v1.AuthService/HealthCheck',
            auth__service__pb2.HealthCheckRequest.SerializeToString,
            auth__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
