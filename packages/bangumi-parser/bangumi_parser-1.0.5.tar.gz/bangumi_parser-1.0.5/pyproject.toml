[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "bangumi-parser"
version = "1.0.5"
authors = [
    {name = "AyalaKaguya", email = "support@easybangumi.org"},
]
description = "A library for parsing and organizing anime video files"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
keywords = ["anime", "video", "parser", "bangumi", "media", "organization"]
license = {text = "MIT"}
dependencies = []

[project.urls]
Homepage = "https://github.com/easybangumiorg/bangumi-parser"
Repository = "https://github.com/easybangumiorg/bangumi-parser"
Issues = "https://github.com/easybangumiorg/bangumi-parser/issues"
Documentation = "https://github.com/easybangumiorg/bangumi-parser#readme"

[project.scripts]
bangumi-parser = "bangumi_parser.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "flake8>=6.0",
    "mypy>=1.0",
    "twine>=4.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
]

[tool.hatch.version]
path = "src/bangumi_parser/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/bangumi_parser"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.black]
target-version = ['py310']
include = '\.pyi?$'
line-length = 88
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
pythonpath = "src"
python_files = [
    "test_*.py",
    "*_test.py",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
