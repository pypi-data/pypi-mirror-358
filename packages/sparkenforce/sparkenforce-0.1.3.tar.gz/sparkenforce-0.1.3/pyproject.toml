[project]
name = "sparkenforce"
version = "v0.1.3"
description = "Type annotation system that allows you to specify and validate the schema of PySpark DataFrames using Python type hints for both function arguments and return values."
authors = [{ name = "Agustín Recoba", email = "agustin.recoba@outlook.com" }]
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["python"]
requires-python = ">=3.10,<4"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]

dependencies = [
    "pyspark>=3.0.0",
]

[dependency-groups]
dev = [
    "ipykernel",
    "ty>=0.0.1a11",
    "pytest>=8.4.1",
    "pytest-cov",
    "coverage>=7.8.2",
    "ruff>=0.12.0",
    "taskipy>=1.14.1",
    "pre-commit>=4.2.0",
]

[project.urls]
homepage = "https://github.com/agustin-recoba/sparkenforce"
repository = "https://github.com/agustin-recoba/sparkenforce.git"
documentation = "https://github.com/agustin-recoba/sparkenforce"
issues = "https://github.com/agustin-recoba/sparkenforce/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/sparkenforce"]

[tool.taskipy.tasks]
format = { cmd = "ruff format ./src/", help = "Format code using ruff" }
lint = { cmd = "ruff check --fix ./src/", help = "Lint code using ruff" }
type = { cmd = "ty check", help = "Typecheck code using ty" }
tests = { cmd = "pytest --verbose --color=yes tests", help = "Run all tests using pytest" }
coverage = { cmd = "coverage html && coverage report -m", help = "Generate coverage report" }
run = { cmd = "uv run ./src/sparkenforce/sparkenforce.py", help = "Run main application" }

[tool.ruff]
line-length = 100
indent-width = 4
format.indent-style = "space"
target-version = "py310"
src = ["src", "tests"]

[tool.ruff.lint]
pydocstyle.convention = "google"
fixable = ["ALL"]
select = ["ALL"]
ignore = [
    "FA102", # Flake8-future-annotations
    "F401", # Disable fix for unused imports
    "F821", # Disable fix for undefined names (obviously used in type hints)
    "B904", # Allow raising exceptions without from e
    "PLR0913", # too many arguments
    "CPY", # Flake8-copyright
    "T201", # Debugging print statements
    "ERA", # Eradicate – detects commented-out code
    "BLE001", # Catch-all exceptions
    "D100", # missing docstring in public module
    "D105", # undocumented magic method
    "D107", # undocumented public init
    "D203", # incorrect-blank-line-before-class
    "D205", # line-between-summary-and-description
    "D212", # multi-line-summary-first-line
    "D400", # missing-trailing-period
    "D407", # missing-dashed-underline-after-section
    "S101", # assert
    "S311", # rand-usage
]


[tool.ty]
src.root = "./src"
environment.python = "./.venv"
terminal.output-format = "concise"

[tool.coverage.paths]
source = ["src"]
tests = ["tests","*/tests"]

[tool.coverage.report]
skip_empty = true
show_missing = true
fail_under = 100

[tool.coverage.run]
branch = true
source = ["src", "tests"]

[tool.portray.mkdocs]
site_name = "sparkenforce"

[tool.portray.mkdocs.theme]
name = "material"
custom_dir = "docs"
palette = {scheme= "slate", primary="deep purple", accent="purple"}
