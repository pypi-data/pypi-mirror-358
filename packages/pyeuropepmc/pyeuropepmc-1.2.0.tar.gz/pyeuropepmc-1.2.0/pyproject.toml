[project]
name = "pyeuropepmc"
version = "1.2.0"
description = "A Python package for working with the Europe PMC API to search and retrieve scientific literature."
license = "file:LICENSE"
readme = "README.md"
authors = [
  { name = "Jonas Heinicke (HZI)", email = "jonas.heinicke@helmholtz-hzi.de" }
]
requires-python = ">=3.10,<4.0"

[tool.poetry.urls]
"Homepage" = "https://github.com/JonasHeinickeBio/pyEuropePMC"
"Bug Tracker" = "https://github.com/JonasHeinickeBio/pyEuropePMC/issues"

[tool.semantic_release]
version_variable = ["src/pyeuropepmc/__init__.py:__version__"]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
upload_to_pypi = true
upload_to_release = true
build_command = "pip install poetry && poetry build"
commit_author = "Jonas Heinicke (HZI) <jonas.heinicke@helmholtz-hzi.de>"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
ipython = ">=7.30"
ipykernel = ">=6.7"
ipywidgets = ">=7.6"
isort = ">=5.10"
jupyterlab = ">=3.2"
notebook = ">=6.4"
numpy = ">=1.21"
pandas = ">=1.4"
rdflib-jsonld = ">=0.5"
rdflib = ">=6.0"
python-dotenv = ">=0.19"
requests = "^2.32.4"
typer = ">=0.12.5,<0.13.0"
backoff = "^2.2.1"
tornado = "^6.5.1"
flask = "^3.1.1"
defusedxml = "^0.7.1"


[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pre-commit = "^4.2.0"
black = "^25.1.0"
mypy = "^1.16.1"
types-PyYAML = "6.0.12.20240311"
types-requests = "^2.31.0"
flake8 = ">=4.0"
pytest-benchmark = "^5.1.0"
flake8-pyproject = "^1.2.3"
coverage = "^7.9.1"
bandit = "^1.8.5"
ruff = "^0.12.1"
typing-extensions = "^4.14.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
known_first_party = ["pyeuropepmc"]
force_sort_within_sections = true


[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = ["tests"]
markers = [
  "slow: mark test as slow (use '-m \"not slow\"' to skip)",
  "integration: mark test as integration (use '-m \"not integration\"' to skip)",
  "unit: mark test as unit (use '-m \"not unit\"' to skip)",
  "network: mark test that requires network access (use '-m \"not network\"' to skip)",
  "functional: mark test as functional (use '-m \"not functional\"' to skip)",
]
[tool.flake8]
ignore = ["E203", "E266", "E731"]

# Allow lambda expressions (E731) as they are used in specific cases for concise, inline functions.
# Allow line breaks before binary operators (W503) for compatibility with Black's formatting style.
# Ignore whitespace before ':' (E203) due to conflicts with Black.
max-line-length = 99
max-complexity = 10
count = true
# Ignore F401 (unused imports) in __init__.py files.
per-file-ignores = [
  "__init__.py:F401"
]
# Exclude common build, cache, and IDE directories.
exclude = [
  ".git",
  ".venv",
  "dist",
  "build",
  "docs",
  "__pycache__",
  ".pytest_cache",
  ".vscode",
  ".github",
  ".idea"
]

[tool.ruff]
line-length = 99
target-version = "py310"
exclude = [
  ".git",
  ".venv",
  "dist",
  "build",
  "docs",
  "__pycache__",
  ".pytest_cache",
  ".vscode",
  ".github",
  ".idea"
]

[tool.ruff.lint]
select = ["E", "F", "W", "C90"]
ignore = ["E203", "E266", "E731"]

[tool.black]
line-length = 99
include = '\.pyi?$'
exclude = '''
/(
  \.git
  | \.venv
  | dist
  | build
  | docs
  | __pycache__
  | \.pytest_cache
  | \.vscode
  | \.github
  | \.idea
)/
'''
preview = true
skip-string-normalization = false

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.coverage.run]
branch = true
source = ["pyeuropepmc"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 50  # Set your desired test coverage threshold

[tool.bandit]
skips = ["B101", "B303"]
exclude_dirs = ["tests", "docs", "examples", ".venv", "dist", "build",
               ".git", "__pycache__", ".pytest_cache", ".vscode", ".github", ".idea"]
paths = ["src"]

[tool.mypy]
python_version = "3.10"
strict = true
ignore_missing_imports = true
exclude = "tests/"
files = "src/"
disable_error_code = ["misc", "import-untyped"]
